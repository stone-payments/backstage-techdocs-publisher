{"version":3,"file":"index.cjs.js","sources":["../src/stages/publish/helpers.ts","../src/stages/generate/helpers.ts","../src/stages/generate/mkDocsPatchers.ts","../src/stages/generate/techdocs.ts","../src/stages/generate/generators.ts","../src/helpers.ts","../src/stages/prepare/dir.ts","../src/stages/prepare/url.ts","../src/stages/prepare/preparers.ts","../src/stages/publish/awsS3.ts","../src/stages/publish/azureBlobStorage.ts","../src/stages/publish/migrations/GoogleMigration.ts","../src/stages/publish/googleStorage.ts","../src/stages/publish/local.ts","../src/stages/publish/openStackSwift.ts","../src/stages/publish/publish.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Entity, DEFAULT_NAMESPACE } from '@backstage/catalog-model';\nimport mime from 'mime-types';\nimport path from 'path';\nimport createLimiter from 'p-limit';\nimport recursiveReadDir from 'recursive-readdir';\n\n/**\n * Helper to get the expected content-type for a given file extension. Also\n * takes XSS mitigation into account.\n */\nconst getContentTypeForExtension = (ext: string): string => {\n  const defaultContentType = 'text/plain; charset=utf-8';\n\n  // Prevent sanitization bypass by preventing browsers from directly rendering\n  // the contents of untrusted files.\n  if (ext.match(/htm|xml|svg/i)) {\n    return defaultContentType;\n  }\n\n  return mime.contentType(ext) || defaultContentType;\n};\n\nexport type responseHeadersType = {\n  'Content-Type': string;\n};\n\n/**\n * Some files need special headers to be used correctly by the frontend. This function\n * generates headers in the response to those file requests.\n * @param fileExtension - .html, .css, .js, .png etc.\n */\nexport const getHeadersForFileExtension = (\n  fileExtension: string,\n): responseHeadersType => {\n  return {\n    'Content-Type': getContentTypeForExtension(fileExtension),\n  };\n};\n\n/**\n * Recursively traverse all the sub-directories of a path and return\n * a list of absolute paths of all the files. e.g. tree command in Unix\n *\n * @example\n *\n * /User/username/my_dir\n *     dirA\n *     |   subDirA\n *     |   |   file1\n *     EmptyDir\n *     dirB\n *     |   file2\n *     file3\n *\n * getFileListRecursively('/Users/username/myDir')\n * // returns\n * [\n *   '/User/username/my_dir/dirA/subDirA/file1',\n *   '/User/username/my_dir/dirB/file2',\n *   '/User/username/my_dir/file3'\n * ]\n * @param rootDirPath - Absolute path to the root directory.\n */\nexport const getFileTreeRecursively = async (\n  rootDirPath: string,\n): Promise<string[]> => {\n  // Iterate on all the files in the directory and its sub-directories\n  const fileList = await recursiveReadDir(rootDirPath).catch(error => {\n    throw new Error(`Failed to read template directory: ${error.message}`);\n  });\n  return fileList;\n};\n\n/**\n * Takes a posix path and returns a lower-cased version of entity's triplet\n * with the remaining path in posix.\n *\n * Path must not include a starting slash.\n *\n * @example\n * lowerCaseEntityTriplet('default/Component/backstage')\n * // return default/component/backstage\n */\nexport const lowerCaseEntityTriplet = (posixPath: string): string => {\n  const [namespace, kind, name, ...rest] = posixPath.split(path.posix.sep);\n  const lowerNamespace = namespace.toLowerCase();\n  const lowerKind = kind.toLowerCase();\n  const lowerName = name.toLowerCase();\n  return [lowerNamespace, lowerKind, lowerName, ...rest].join(path.posix.sep);\n};\n\n/**\n * Takes either a win32 or posix path and returns a lower-cased version of entity's triplet\n * with the remaining path in posix.\n *\n * Starting slashes will be trimmed.\n *\n * Throws an error if the path does not appear to be an entity triplet.\n *\n * @example\n * lowerCaseEntityTripletInStoragePath('/default/Component/backstage/file.txt')\n * // return default/component/backstage/file.txt\n */\nexport const lowerCaseEntityTripletInStoragePath = (\n  originalPath: string,\n): string => {\n  let posixPath = originalPath;\n  if (originalPath.includes(path.win32.sep)) {\n    posixPath = originalPath.split(path.win32.sep).join(path.posix.sep);\n  }\n\n  // remove leading slash\n  const parts = posixPath.split(path.posix.sep);\n  if (parts[0] === '') {\n    parts.shift();\n  }\n\n  // check if all parts of the entity exist (name, namespace, kind) plus filename\n  if (parts.length <= 3) {\n    throw new Error(\n      `Encountered file unmanaged by TechDocs ${originalPath}. Skipping.`,\n    );\n  }\n\n  return lowerCaseEntityTriplet(parts.join(path.posix.sep));\n};\n\n/**\n * Take a posix path and return a path without leading and trailing\n * separators\n *\n * @example\n * normalizeExternalStorageRootPath('/backstage-data/techdocs/')\n * // return backstage-data/techdocs\n */\nexport const normalizeExternalStorageRootPath = (posixPath: string): string => {\n  // remove leading slash\n  let normalizedPath = posixPath;\n  if (posixPath.startsWith(path.posix.sep)) {\n    normalizedPath = posixPath.slice(1);\n  }\n\n  // remove trailing slash\n  if (normalizedPath.endsWith(path.posix.sep)) {\n    normalizedPath = normalizedPath.slice(0, normalizedPath.length - 1);\n  }\n\n  return normalizedPath;\n};\n\n// Only returns the files that existed previously and are not present anymore.\nexport const getStaleFiles = (\n  newFiles: string[],\n  oldFiles: string[],\n): string[] => {\n  const staleFiles = new Set(oldFiles);\n  newFiles.forEach(newFile => {\n    staleFiles.delete(newFile);\n  });\n  return Array.from(staleFiles);\n};\n\n// Compose actual filename on remote bucket including entity information\nexport const getCloudPathForLocalPath = (\n  entity: Entity,\n  localPath = '',\n  useLegacyPathCasing = false,\n  externalStorageRootPath = '',\n): string => {\n  // Convert destination file path to a POSIX path for uploading.\n  // GCS expects / as path separator and relativeFilePath will contain \\\\ on Windows.\n  // https://cloud.google.com/storage/docs/gsutil/addlhelp/HowSubdirectoriesWork\n  const relativeFilePathPosix = localPath.split(path.sep).join(path.posix.sep);\n\n  // The / delimiter is intentional since it represents the cloud storage and not the local file system.\n  const entityRootDir = `${entity.metadata?.namespace ?? DEFAULT_NAMESPACE}/${\n    entity.kind\n  }/${entity.metadata.name}`;\n\n  const relativeFilePathTriplet = `${entityRootDir}/${relativeFilePathPosix}`;\n\n  const destination = useLegacyPathCasing\n    ? relativeFilePathTriplet\n    : lowerCaseEntityTriplet(relativeFilePathTriplet);\n\n  // Again, the / delimiter is intentional, as it represents remote storage.\n  const destinationWithRoot = [\n    // The extra filter prevents unintended double slashes and prefixes.\n    ...externalStorageRootPath.split(path.posix.sep).filter(s => s !== ''),\n    destination,\n  ].join('/');\n\n  return destinationWithRoot; // Remote storage file relative path\n};\n\n// Perform rate limited generic operations by passing a function and a list of arguments\nexport const bulkStorageOperation = async <T>(\n  operation: (arg: T) => Promise<unknown>,\n  args: T[],\n  { concurrencyLimit } = { concurrencyLimit: 25 },\n) => {\n  const limiter = createLimiter(concurrencyLimit);\n  await Promise.all(args.map(arg => limiter(operation, arg)));\n};\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isChildPath } from '@backstage/backend-common';\nimport { Entity } from '@backstage/catalog-model';\nimport { assertError, ForwardedError } from '@backstage/errors';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { SpawnOptionsWithoutStdio, spawn } from 'child_process';\nimport fs from 'fs-extra';\nimport gitUrlParse from 'git-url-parse';\nimport yaml, { DEFAULT_SCHEMA, Type } from 'js-yaml';\nimport path, { resolve as resolvePath } from 'path';\nimport { PassThrough, Writable } from 'stream';\nimport { Logger } from 'winston';\nimport { ParsedLocationAnnotation } from '../../helpers';\nimport { SupportedGeneratorKey } from './types';\nimport { getFileTreeRecursively } from '../publish/helpers';\n\n// TODO: Implement proper support for more generators.\nexport function getGeneratorKey(entity: Entity): SupportedGeneratorKey {\n  if (!entity) {\n    throw new Error('No entity provided');\n  }\n\n  return 'techdocs';\n}\n\nexport type RunCommandOptions = {\n  /** command to run */\n  command: string;\n  /** arguments to pass the command */\n  args: string[];\n  /** options to pass to spawn */\n  options: SpawnOptionsWithoutStdio;\n  /** stream to capture stdout and stderr output */\n  logStream?: Writable;\n};\n\n/**\n * Run a command in a sub-process, normally a shell command.\n */\nexport const runCommand = async ({\n  command,\n  args,\n  options,\n  logStream = new PassThrough(),\n}: RunCommandOptions) => {\n  await new Promise<void>((resolve, reject) => {\n    const process = spawn(command, args, options);\n\n    process.stdout.on('data', stream => {\n      logStream.write(stream);\n    });\n\n    process.stderr.on('data', stream => {\n      logStream.write(stream);\n    });\n\n    process.on('error', error => {\n      return reject(error);\n    });\n\n    process.on('close', code => {\n      if (code !== 0) {\n        return reject(`Command ${command} failed, exit code: ${code}`);\n      }\n      return resolve();\n    });\n  });\n};\n\n/**\n * Return the source url for MkDocs based on the backstage.io/techdocs-ref annotation.\n * Depending on the type of target, it can either return a repo_url, an edit_uri, both, or none.\n *\n * @param parsedLocationAnnotation - Object with location url and type\n * @param scmIntegrations - the scmIntegration to do url transformations\n * @param docsFolder - the configured docs folder in the mkdocs.yml (defaults to 'docs')\n * @returns the settings for the mkdocs.yml\n */\nexport const getRepoUrlFromLocationAnnotation = (\n  parsedLocationAnnotation: ParsedLocationAnnotation,\n  scmIntegrations: ScmIntegrationRegistry,\n  docsFolder: string = 'docs',\n): { repo_url?: string; edit_uri?: string } => {\n  const { type: locationType, target } = parsedLocationAnnotation;\n\n  if (locationType === 'url') {\n    const integration = scmIntegrations.byUrl(target);\n\n    // We only support it for github, gitlab and bitbucketServer for now as the edit_uri\n    // is not properly supported for others yet.\n    if (\n      integration &&\n      ['github', 'gitlab', 'bitbucketServer'].includes(integration.type)\n    ) {\n      // handle the case where a user manually writes url:https://github.com/backstage/backstage i.e. without /blob/...\n      const { filepathtype } = gitUrlParse(target);\n      if (filepathtype === '') {\n        return { repo_url: target };\n      }\n\n      const sourceFolder = integration.resolveUrl({\n        url: `./${docsFolder}`,\n        base: target,\n      });\n      return {\n        repo_url: target,\n        edit_uri: integration.resolveEditUrl(sourceFolder),\n      };\n    }\n  }\n\n  return {};\n};\n\nclass UnknownTag {\n  constructor(public readonly data: any, public readonly type?: string) {}\n}\n\nexport const MKDOCS_SCHEMA = DEFAULT_SCHEMA.extend([\n  new Type('', {\n    kind: 'scalar',\n    multi: true,\n    representName: o => (o as UnknownTag).type,\n    represent: o => (o as UnknownTag).data ?? '',\n    instanceOf: UnknownTag,\n    construct: (data: string, type?: string) => new UnknownTag(data, type),\n  }),\n  new Type('', {\n    kind: 'sequence',\n    multi: true,\n    representName: o => (o as UnknownTag).type,\n    represent: o => (o as UnknownTag).data ?? '',\n    instanceOf: UnknownTag,\n    construct: (data: string, type?: string) => new UnknownTag(data, type),\n  }),\n]);\n\n/**\n * Finds and loads the contents of either an mkdocs.yml or mkdocs.yaml file,\n * depending on which is present (MkDocs supports both as of v1.2.2).\n *\n * @param inputDir - base dir to be searched for either an mkdocs.yml or\n *   mkdocs.yaml file.\n */\nexport const getMkdocsYml = async (\n  inputDir: string,\n): Promise<{ path: string; content: string }> => {\n  let mkdocsYmlPath: string;\n  let mkdocsYmlFileString: string;\n  try {\n    mkdocsYmlPath = path.join(inputDir, 'mkdocs.yaml');\n    mkdocsYmlFileString = await fs.readFile(mkdocsYmlPath, 'utf8');\n  } catch {\n    try {\n      mkdocsYmlPath = path.join(inputDir, 'mkdocs.yml');\n      mkdocsYmlFileString = await fs.readFile(mkdocsYmlPath, 'utf8');\n    } catch (error) {\n      throw new ForwardedError(\n        'Could not read MkDocs YAML config file mkdocs.yml or mkdocs.yaml for validation',\n        error,\n      );\n    }\n  }\n\n  return {\n    path: mkdocsYmlPath,\n    content: mkdocsYmlFileString,\n  };\n};\n\n/**\n * Validating mkdocs config file for incorrect/insecure values\n * Throws on invalid configs\n *\n * @param inputDir - base dir to be used as a docs_dir path validity check\n * @param mkdocsYmlFileString - The string contents of the loaded\n *   mkdocs.yml or equivalent of a docs site\n * @returns the parsed docs_dir or undefined\n */\nexport const validateMkdocsYaml = async (\n  inputDir: string,\n  mkdocsYmlFileString: string,\n): Promise<string | undefined> => {\n  const mkdocsYml = yaml.load(mkdocsYmlFileString, {\n    schema: MKDOCS_SCHEMA,\n  });\n\n  if (mkdocsYml === null || typeof mkdocsYml !== 'object') {\n    return undefined;\n  }\n\n  const parsedMkdocsYml: Record<string, any> = mkdocsYml;\n  if (\n    parsedMkdocsYml.docs_dir &&\n    !isChildPath(inputDir, resolvePath(inputDir, parsedMkdocsYml.docs_dir))\n  ) {\n    throw new Error(\n      `docs_dir configuration value in mkdocs can't be an absolute directory or start with ../ for security reasons.\n       Use relative paths instead which are resolved relative to your mkdocs.yml file location.`,\n    );\n  }\n  return parsedMkdocsYml.docs_dir;\n};\n\n/**\n * Update docs/index.md file before TechDocs generator uses it to generate docs site,\n * falling back to docs/README.md or README.md in case a default docs/index.md\n * is not provided.\n */\nexport const patchIndexPreBuild = async ({\n  inputDir,\n  logger,\n  docsDir = 'docs',\n}: {\n  inputDir: string;\n  logger: Logger;\n  docsDir?: string;\n}) => {\n  const docsPath = path.join(inputDir, docsDir);\n  const indexMdPath = path.join(docsPath, 'index.md');\n\n  if (await fs.pathExists(indexMdPath)) {\n    return;\n  }\n  logger.warn(`${path.join(docsDir, 'index.md')} not found.`);\n  const fallbacks = [\n    path.join(docsPath, 'README.md'),\n    path.join(docsPath, 'readme.md'),\n    path.join(inputDir, 'README.md'),\n    path.join(inputDir, 'readme.md'),\n  ];\n\n  await fs.ensureDir(docsPath);\n  for (const filePath of fallbacks) {\n    try {\n      await fs.copyFile(filePath, indexMdPath);\n      return;\n    } catch (error) {\n      logger.warn(`${path.relative(inputDir, filePath)} not found.`);\n    }\n  }\n\n  logger.warn(\n    `Could not find any techdocs' index file. Please make sure at least one of ${[\n      indexMdPath,\n      ...fallbacks,\n    ].join(' ')} exists.`,\n  );\n};\n\n/**\n * Create or update the techdocs_metadata.json. Values initialized/updated are:\n * - The build_timestamp (now)\n * - The list of files generated\n *\n * @param techdocsMetadataPath - File path to techdocs_metadata.json\n */\nexport const createOrUpdateMetadata = async (\n  techdocsMetadataPath: string,\n  logger: Logger,\n): Promise<void> => {\n  const techdocsMetadataDir = techdocsMetadataPath\n    .split(path.sep)\n    .slice(0, -1)\n    .join(path.sep);\n  // check if file exists, create if it does not.\n  try {\n    await fs.access(techdocsMetadataPath, fs.constants.F_OK);\n  } catch (err) {\n    // Bootstrap file with empty JSON\n    await fs.writeJson(techdocsMetadataPath, JSON.parse('{}'));\n  }\n  // check if valid Json\n  let json;\n  try {\n    json = await fs.readJson(techdocsMetadataPath);\n  } catch (err) {\n    assertError(err);\n    const message = `Invalid JSON at ${techdocsMetadataPath} with error ${err.message}`;\n    logger.error(message);\n    throw new Error(message);\n  }\n\n  json.build_timestamp = Date.now();\n\n  // Get and write generated files to the metadata JSON. Each file string is in\n  // a form appropriate for invalidating the associated object from cache.\n  try {\n    json.files = (await getFileTreeRecursively(techdocsMetadataDir)).map(file =>\n      file.replace(`${techdocsMetadataDir}${path.sep}`, ''),\n    );\n  } catch (err) {\n    assertError(err);\n    json.files = [];\n    logger.warn(`Unable to add files list to metadata: ${err.message}`);\n  }\n\n  await fs.writeJson(techdocsMetadataPath, json);\n  return;\n};\n\n/**\n * Update the techdocs_metadata.json to add etag of the prepared tree (e.g. commit SHA or actual Etag of the resource).\n * This is helpful to check if a TechDocs site in storage has gone outdated, without maintaining an in-memory build info\n * per Backstage instance.\n *\n * @param techdocsMetadataPath - File path to techdocs_metadata.json\n * @param etag - The ETag to use\n */\nexport const storeEtagMetadata = async (\n  techdocsMetadataPath: string,\n  etag: string,\n): Promise<void> => {\n  const json = await fs.readJson(techdocsMetadataPath);\n  json.etag = etag;\n  await fs.writeJson(techdocsMetadataPath, json);\n};\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Logger } from 'winston';\nimport fs from 'fs-extra';\nimport yaml from 'js-yaml';\nimport { ParsedLocationAnnotation } from '../../helpers';\nimport { getRepoUrlFromLocationAnnotation, MKDOCS_SCHEMA } from './helpers';\nimport { assertError } from '@backstage/errors';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\n\ntype MkDocsObject = {\n  plugins?: string[];\n  docs_dir: string;\n  repo_url?: string;\n  edit_uri?: string;\n};\n\nconst patchMkdocsFile = async (\n  mkdocsYmlPath: string,\n  logger: Logger,\n  updateAction: (mkdocsYml: MkDocsObject) => boolean,\n) => {\n  // We only want to override the mkdocs.yml if it has actually changed. This is relevant if\n  // used with a 'dir' location on the file system as this would permanently update the file.\n  let didEdit = false;\n\n  let mkdocsYmlFileString;\n  try {\n    mkdocsYmlFileString = await fs.readFile(mkdocsYmlPath, 'utf8');\n  } catch (error) {\n    assertError(error);\n    logger.warn(\n      `Could not read MkDocs YAML config file ${mkdocsYmlPath} before running the generator: ${error.message}`,\n    );\n    return;\n  }\n\n  let mkdocsYml: any;\n  try {\n    mkdocsYml = yaml.load(mkdocsYmlFileString, { schema: MKDOCS_SCHEMA });\n\n    // mkdocsYml should be an object type after successful parsing.\n    // But based on its type definition, it can also be a string or undefined, which we don't want.\n    if (typeof mkdocsYml === 'string' || typeof mkdocsYml === 'undefined') {\n      throw new Error('Bad YAML format.');\n    }\n  } catch (error) {\n    assertError(error);\n    logger.warn(\n      `Error in parsing YAML at ${mkdocsYmlPath} before running the generator. ${error.message}`,\n    );\n    return;\n  }\n\n  didEdit = updateAction(mkdocsYml);\n\n  try {\n    if (didEdit) {\n      await fs.writeFile(\n        mkdocsYmlPath,\n        yaml.dump(mkdocsYml, { schema: MKDOCS_SCHEMA }),\n        'utf8',\n      );\n    }\n  } catch (error) {\n    assertError(error);\n    logger.warn(\n      `Could not write to ${mkdocsYmlPath} after updating it before running the generator. ${error.message}`,\n    );\n    return;\n  }\n};\n\n/**\n * Update the mkdocs.yml file before TechDocs generator uses it to generate docs site.\n *\n * List of tasks:\n * - Add repo_url or edit_uri if it does not exists\n * If mkdocs.yml has a repo_url, the generated docs site gets an Edit button on the pages by default.\n * If repo_url is missing in mkdocs.yml, we will use techdocs annotation of the entity to possibly get\n * the repository URL.\n *\n * This function will not throw an error since this is not critical to the whole TechDocs pipeline.\n * Instead it will log warnings if there are any errors in reading, parsing or writing YAML.\n *\n * @param mkdocsYmlPath - Absolute path to mkdocs.yml or equivalent of a docs site\n * @param logger - A logger instance\n * @param parsedLocationAnnotation - Object with location url and type\n * @param scmIntegrations - the scmIntegration to do url transformations\n */\nexport const patchMkdocsYmlPreBuild = async (\n  mkdocsYmlPath: string,\n  logger: Logger,\n  parsedLocationAnnotation: ParsedLocationAnnotation,\n  scmIntegrations: ScmIntegrationRegistry,\n) => {\n  await patchMkdocsFile(mkdocsYmlPath, logger, mkdocsYml => {\n    if (!('repo_url' in mkdocsYml) && !('edit_uri' in mkdocsYml)) {\n      // Add edit_uri and/or repo_url to mkdocs.yml if it is missing.\n      // This will enable the Page edit button generated by MkDocs.\n      // If the either has been set, keep the original value\n      const result = getRepoUrlFromLocationAnnotation(\n        parsedLocationAnnotation,\n        scmIntegrations,\n        mkdocsYml.docs_dir,\n      );\n\n      if (result.repo_url || result.edit_uri) {\n        mkdocsYml.repo_url = result.repo_url;\n        mkdocsYml.edit_uri = result.edit_uri;\n\n        logger.info(\n          `Set ${JSON.stringify(\n            result,\n          )}. You can disable this feature by manually setting 'repo_url' or 'edit_uri' according to the MkDocs documentation at https://www.mkdocs.org/user-guide/configuration/#repo_url`,\n        );\n        return true;\n      }\n    }\n    return false;\n  });\n};\n\n/**\n * Update the mkdocs.yml file before TechDocs generator uses it to generate docs site.\n *\n * List of tasks:\n * - Add techdocs-core plugin to mkdocs file if it doesn't exist\n *\n * This function will not throw an error since this is not critical to the whole TechDocs pipeline.\n * Instead it will log warnings if there are any errors in reading, parsing or writing YAML.\n *\n * @param mkdocsYmlPath - Absolute path to mkdocs.yml or equivalent of a docs site\n * @param logger - A logger instance\n */\nexport const pathMkdocsYmlWithTechdocsPlugin = async (\n  mkdocsYmlPath: string,\n  logger: Logger,\n) => {\n  await patchMkdocsFile(mkdocsYmlPath, logger, mkdocsYml => {\n    // Modify mkdocs.yaml to contain the needed techdocs-core plugin if it is not there\n    if (!('plugins' in mkdocsYml)) {\n      mkdocsYml.plugins = ['techdocs-core'];\n      return true;\n    }\n\n    if (mkdocsYml.plugins && !mkdocsYml.plugins.includes('techdocs-core')) {\n      mkdocsYml.plugins.push('techdocs-core');\n      return true;\n    }\n    return false;\n  });\n};\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContainerRunner } from '@backstage/backend-common';\nimport { Config } from '@backstage/config';\nimport path from 'path';\nimport { Logger } from 'winston';\nimport {\n  ScmIntegrationRegistry,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport {\n  createOrUpdateMetadata,\n  getMkdocsYml,\n  patchIndexPreBuild,\n  runCommand,\n  storeEtagMetadata,\n  validateMkdocsYaml,\n} from './helpers';\n\nimport {\n  patchMkdocsYmlPreBuild,\n  pathMkdocsYmlWithTechdocsPlugin,\n} from './mkDocsPatchers';\nimport {\n  GeneratorBase,\n  GeneratorConfig,\n  GeneratorOptions,\n  GeneratorRunInType,\n  GeneratorRunOptions,\n} from './types';\nimport { ForwardedError } from '@backstage/errors';\n\n/**\n * Generates documentation files\n * @public\n */\nexport class TechdocsGenerator implements GeneratorBase {\n  /**\n   * The default docker image (and version) used to generate content. Public\n   * and static so that techdocs-node consumers can use the same version.\n   */\n  public static readonly defaultDockerImage = 'spotify/techdocs:v1.1.0';\n  private readonly logger: Logger;\n  private readonly containerRunner?: ContainerRunner;\n  private readonly options: GeneratorConfig;\n  private readonly scmIntegrations: ScmIntegrationRegistry;\n\n  /**\n   * Returns a instance of TechDocs generator\n   * @param config - A Backstage configuration\n   * @param options - Options to configure the generator\n   */\n  static fromConfig(config: Config, options: GeneratorOptions) {\n    const { containerRunner, logger } = options;\n    const scmIntegrations = ScmIntegrations.fromConfig(config);\n    return new TechdocsGenerator({\n      logger,\n      containerRunner,\n      config,\n      scmIntegrations,\n    });\n  }\n\n  constructor(options: {\n    logger: Logger;\n    containerRunner?: ContainerRunner;\n    config: Config;\n    scmIntegrations: ScmIntegrationRegistry;\n  }) {\n    this.logger = options.logger;\n    this.options = readGeneratorConfig(options.config, options.logger);\n    this.containerRunner = options.containerRunner;\n    this.scmIntegrations = options.scmIntegrations;\n  }\n\n  /** {@inheritDoc GeneratorBase.run} */\n  public async run(options: GeneratorRunOptions): Promise<void> {\n    const {\n      inputDir,\n      outputDir,\n      parsedLocationAnnotation,\n      etag,\n      logger: childLogger,\n      logStream,\n    } = options;\n\n    // Do some updates to mkdocs.yml before generating docs e.g. adding repo_url\n    const { path: mkdocsYmlPath, content } = await getMkdocsYml(inputDir);\n\n    // validate the docs_dir first\n    const docsDir = await validateMkdocsYaml(inputDir, content);\n\n    if (parsedLocationAnnotation) {\n      await patchMkdocsYmlPreBuild(\n        mkdocsYmlPath,\n        childLogger,\n        parsedLocationAnnotation,\n        this.scmIntegrations,\n      );\n    }\n\n    if (this.options.legacyCopyReadmeMdToIndexMd) {\n      await patchIndexPreBuild({ inputDir, logger: childLogger, docsDir });\n    }\n\n    if (!this.options.omitTechdocsCoreMkdocsPlugin) {\n      await pathMkdocsYmlWithTechdocsPlugin(mkdocsYmlPath, childLogger);\n    }\n\n    // Directories to bind on container\n    const mountDirs = {\n      [inputDir]: '/input',\n      [outputDir]: '/output',\n    };\n\n    try {\n      switch (this.options.runIn) {\n        case 'local':\n          await runCommand({\n            command: 'mkdocs',\n            args: ['build', '-d', outputDir, '-v'],\n            options: {\n              cwd: inputDir,\n            },\n            logStream,\n          });\n          childLogger.info(\n            `Successfully generated docs from ${inputDir} into ${outputDir} using local mkdocs`,\n          );\n          break;\n        case 'docker':\n          if (this.containerRunner === undefined) {\n            throw new Error(\n              \"Invalid state: containerRunner cannot be undefined when runIn is 'docker'\",\n            );\n          }\n          await this.containerRunner.runContainer({\n            imageName:\n              this.options.dockerImage ?? TechdocsGenerator.defaultDockerImage,\n            args: ['build', '-d', '/output'],\n            logStream,\n            mountDirs,\n            workingDir: '/input',\n            // Set the home directory inside the container as something that applications can\n            // write to, otherwise they will just fail trying to write to /\n            envVars: { HOME: '/tmp' },\n            pullImage: this.options.pullImage,\n          });\n          childLogger.info(\n            `Successfully generated docs from ${inputDir} into ${outputDir} using techdocs-container`,\n          );\n          break;\n        default:\n          throw new Error(\n            `Invalid config value \"${this.options.runIn}\" provided in 'techdocs.generators.techdocs'.`,\n          );\n      }\n    } catch (error) {\n      this.logger.debug(\n        `Failed to generate docs from ${inputDir} into ${outputDir}`,\n      );\n      throw new ForwardedError(\n        `Failed to generate docs from ${inputDir} into ${outputDir}`,\n        error,\n      );\n    }\n\n    /**\n     * Post Generate steps\n     */\n\n    // Add build timestamp and files to techdocs_metadata.json\n    // Creates techdocs_metadata.json if file does not exist.\n    await createOrUpdateMetadata(\n      path.join(outputDir, 'techdocs_metadata.json'),\n      childLogger,\n    );\n\n    // Add etag of the prepared tree to techdocs_metadata.json\n    // Assumes that the file already exists.\n    if (etag) {\n      await storeEtagMetadata(\n        path.join(outputDir, 'techdocs_metadata.json'),\n        etag,\n      );\n    }\n  }\n}\n\nexport function readGeneratorConfig(\n  config: Config,\n  logger: Logger,\n): GeneratorConfig {\n  const legacyGeneratorType = config.getOptionalString(\n    'techdocs.generators.techdocs',\n  ) as GeneratorRunInType;\n\n  if (legacyGeneratorType) {\n    logger.warn(\n      `The 'techdocs.generators.techdocs' configuration key is deprecated and will be removed in the future. Please use 'techdocs.generator' instead. ` +\n        `See here https://backstage.io/docs/features/techdocs/configuration`,\n    );\n  }\n\n  return {\n    runIn:\n      legacyGeneratorType ??\n      config.getOptionalString('techdocs.generator.runIn') ??\n      'docker',\n    dockerImage: config.getOptionalString('techdocs.generator.dockerImage'),\n    pullImage: config.getOptionalBoolean('techdocs.generator.pullImage'),\n    omitTechdocsCoreMkdocsPlugin: config.getOptionalBoolean(\n      'techdocs.generator.mkdocs.omitTechdocsCorePlugin',\n    ),\n    legacyCopyReadmeMdToIndexMd: config.getOptionalBoolean(\n      'techdocs.generator.mkdocs.legacyCopyReadmeMdToIndexMd',\n    ),\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContainerRunner } from '@backstage/backend-common';\nimport { Entity } from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport { Logger } from 'winston';\nimport { getGeneratorKey } from './helpers';\nimport { TechdocsGenerator } from './techdocs';\nimport {\n  GeneratorBase,\n  GeneratorBuilder,\n  SupportedGeneratorKey,\n} from './types';\n\n/**\n * Collection of docs generators\n * @public\n */\nexport class Generators implements GeneratorBuilder {\n  private generatorMap = new Map<SupportedGeneratorKey, GeneratorBase>();\n\n  /**\n   * Returns a generators instance containing a generator for TechDocs\n   * @param config - A Backstage configuration\n   * @param options - Options to configure the TechDocs generator\n   */\n  static async fromConfig(\n    config: Config,\n    options: { logger: Logger; containerRunner: ContainerRunner },\n  ): Promise<GeneratorBuilder> {\n    const generators = new Generators();\n\n    const techdocsGenerator = TechdocsGenerator.fromConfig(config, options);\n    generators.register('techdocs', techdocsGenerator);\n\n    return generators;\n  }\n\n  /**\n   * Register a generator in the generators collection\n   * @param generatorKey - Unique identifier for the generator\n   * @param generator - The generator instance to register\n   */\n  register(generatorKey: SupportedGeneratorKey, generator: GeneratorBase) {\n    this.generatorMap.set(generatorKey, generator);\n  }\n\n  /**\n   * Returns the generator for a given TechDocs entity\n   * @param entity - A TechDocs entity instance\n   */\n  get(entity: Entity): GeneratorBase {\n    const generatorKey = getGeneratorKey(entity);\n    const generator = this.generatorMap.get(generatorKey);\n\n    if (!generator) {\n      throw new Error(`No generator registered for entity: \"${generatorKey}\"`);\n    }\n\n    return generator;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { resolveSafeChildPath, UrlReader } from '@backstage/backend-common';\nimport {\n  Entity,\n  getEntitySourceLocation,\n  parseLocationRef,\n} from '@backstage/catalog-model';\nimport { InputError } from '@backstage/errors';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport path from 'path';\nimport { Logger } from 'winston';\nimport { PreparerResponse, RemoteProtocol } from './stages/prepare/types';\n\n/**\n * Parsed location annotation\n * @public\n */\nexport type ParsedLocationAnnotation = {\n  type: RemoteProtocol;\n  target: string;\n};\n\n/**\n * Returns a parset locations annotation\n * @public\n * @param annotationName - The name of the annotation in the entity metadata\n * @param entity - A TechDocs entity instance\n */\nexport const parseReferenceAnnotation = (\n  annotationName: string,\n  entity: Entity,\n): ParsedLocationAnnotation => {\n  const annotation = entity.metadata.annotations?.[annotationName];\n  if (!annotation) {\n    throw new InputError(\n      `No location annotation provided in entity: ${entity.metadata.name}`,\n    );\n  }\n\n  const { type, target } = parseLocationRef(annotation);\n  return {\n    type: type as RemoteProtocol,\n    target,\n  };\n};\n\n/**\n * TechDocs references of type `dir` are relative the source location of the entity.\n * This function transforms relative references to absolute ones, based on the\n * location the entity was ingested from. If the entity was registered by a `url`\n * location, it returns a `url` location with a resolved target that points to the\n * targeted subfolder. If the entity was registered by a `file` location, it returns\n * an absolute `dir` location.\n * @public\n * @param entity - the entity with annotations\n * @param dirAnnotation - the parsed techdocs-ref annotation of type 'dir'\n * @param scmIntegrations - access to the scmIntegration to do url transformations\n * @throws if the entity doesn't specify a `dir` location or is ingested from an unsupported location.\n * @returns the transformed location with an absolute target.\n */\nexport const transformDirLocation = (\n  entity: Entity,\n  dirAnnotation: ParsedLocationAnnotation,\n  scmIntegrations: ScmIntegrationRegistry,\n): { type: 'dir' | 'url'; target: string } => {\n  const location = getEntitySourceLocation(entity);\n\n  switch (location.type) {\n    case 'url': {\n      const target = scmIntegrations.resolveUrl({\n        url: dirAnnotation.target,\n        base: location.target,\n      });\n\n      return {\n        type: 'url',\n        target,\n      };\n    }\n\n    case 'file': {\n      // only permit targets in the same folder as the target of the `file` location!\n      const target = resolveSafeChildPath(\n        path.dirname(location.target),\n        dirAnnotation.target,\n      );\n\n      return {\n        type: 'dir',\n        target,\n      };\n    }\n\n    default:\n      throw new InputError(`Unable to resolve location type ${location.type}`);\n  }\n};\n\n/**\n * Returns a entity reference based on the TechDocs annotation type\n * @public\n * @param entity - A TechDocs instance\n * @param scmIntegration - An implementation for  SCM integration API\n */\nexport const getLocationForEntity = (\n  entity: Entity,\n  scmIntegration: ScmIntegrationRegistry,\n): ParsedLocationAnnotation => {\n  const annotation = parseReferenceAnnotation(\n    'backstage.io/techdocs-ref',\n    entity,\n  );\n\n  switch (annotation.type) {\n    case 'url':\n      return annotation;\n    case 'dir':\n      return transformDirLocation(entity, annotation, scmIntegration);\n    default:\n      throw new Error(`Invalid reference annotation ${annotation.type}`);\n  }\n};\n\n/**\n * Returns a preparer response {@link PreparerResponse}\n * @public\n * @param reader - Read a tree of files from a repository\n * @param entity - A TechDocs entity instance\n * @param opts - Options for configuring the reader, e.g. logger, etag, etc.\n */\nexport const getDocFilesFromRepository = async (\n  reader: UrlReader,\n  entity: Entity,\n  opts?: { etag?: string; logger?: Logger },\n): Promise<PreparerResponse> => {\n  const { target } = parseReferenceAnnotation(\n    'backstage.io/techdocs-ref',\n    entity,\n  );\n\n  opts?.logger?.debug(`Reading files from ${target}`);\n  // readTree will throw NotModifiedError if etag has not changed.\n  const readTreeResponse = await reader.readTree(target, { etag: opts?.etag });\n  const preparedDir = await readTreeResponse.dir();\n\n  opts?.logger?.debug(`Tree downloaded and stored at ${preparedDir}`);\n\n  return {\n    preparedDir,\n    etag: readTreeResponse.etag,\n  };\n};\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UrlReader } from '@backstage/backend-common';\nimport { Entity } from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport { InputError } from '@backstage/errors';\nimport {\n  ScmIntegrationRegistry,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport { Logger } from 'winston';\nimport { parseReferenceAnnotation, transformDirLocation } from '../../helpers';\nimport {\n  PreparerBase,\n  PreparerConfig,\n  PreparerOptions,\n  PreparerResponse,\n} from './types';\n\n/**\n * Preparer used to retrieve documentation files from a local directory\n * @public\n */\nexport class DirectoryPreparer implements PreparerBase {\n  private readonly scmIntegrations: ScmIntegrationRegistry;\n  private readonly reader: UrlReader;\n\n  /**\n   * Returns a directory preparer instance\n   * @param config - A backstage config\n   * @param options - A directory preparer options containing a logger and reader\n   */\n  static fromConfig(\n    config: Config,\n    { logger, reader }: PreparerConfig,\n  ): DirectoryPreparer {\n    return new DirectoryPreparer(config, logger, reader);\n  }\n\n  private constructor(\n    config: Config,\n    _logger: Logger | null,\n    reader: UrlReader,\n  ) {\n    this.reader = reader;\n    this.scmIntegrations = ScmIntegrations.fromConfig(config);\n  }\n\n  /** {@inheritDoc PreparerBase.prepare} */\n  async prepare(\n    entity: Entity,\n    options?: PreparerOptions,\n  ): Promise<PreparerResponse> {\n    const annotation = parseReferenceAnnotation(\n      'backstage.io/techdocs-ref',\n      entity,\n    );\n    const { type, target } = transformDirLocation(\n      entity,\n      annotation,\n      this.scmIntegrations,\n    );\n\n    switch (type) {\n      case 'url': {\n        options?.logger?.debug(`Reading files from ${target}`);\n        // the target is an absolute url since it has already been transformed\n        const response = await this.reader.readTree(target, {\n          etag: options?.etag,\n        });\n        const preparedDir = await response.dir();\n\n        options?.logger?.debug(`Tree downloaded and stored at ${preparedDir}`);\n\n        return {\n          preparedDir,\n          etag: response.etag,\n        };\n      }\n\n      case 'dir': {\n        return {\n          // the transformation already validated that the target is in a safe location\n          preparedDir: target,\n          // Instead of supporting caching on local sources, use techdocs-cli for local development and debugging.\n          etag: '',\n        };\n      }\n\n      default:\n        throw new InputError(`Unable to resolve location type ${type}`);\n    }\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assertError } from '@backstage/errors';\nimport { UrlReader } from '@backstage/backend-common';\nimport { Entity } from '@backstage/catalog-model';\nimport { Logger } from 'winston';\nimport { getDocFilesFromRepository } from '../../helpers';\nimport {\n  PreparerBase,\n  PreparerConfig,\n  PreparerOptions,\n  PreparerResponse,\n} from './types';\n\n/**\n * Preparer used to retrieve documentation files from a remote repository\n * @public\n */\nexport class UrlPreparer implements PreparerBase {\n  private readonly logger: Logger;\n  private readonly reader: UrlReader;\n\n  /**\n   * Returns a directory preparer instance\n   * @param config - A URL preparer config containing the a logger and reader\n   */\n  static fromConfig({ reader, logger }: PreparerConfig): UrlPreparer {\n    return new UrlPreparer(reader, logger);\n  }\n\n  private constructor(reader: UrlReader, logger: Logger) {\n    this.logger = logger;\n    this.reader = reader;\n  }\n\n  /** {@inheritDoc PreparerBase.prepare} */\n  async prepare(\n    entity: Entity,\n    options?: PreparerOptions,\n  ): Promise<PreparerResponse> {\n    try {\n      return await getDocFilesFromRepository(this.reader, entity, {\n        etag: options?.etag,\n        logger: this.logger,\n      });\n    } catch (error) {\n      assertError(error);\n      // NotModifiedError means that etag based cache is still valid.\n      if (error.name === 'NotModifiedError') {\n        this.logger.debug(`Cache is valid for etag ${options?.etag}`);\n      } else {\n        this.logger.debug(\n          `Unable to fetch files for building docs ${error.message}`,\n        );\n      }\n\n      throw error;\n    }\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Entity } from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport { parseReferenceAnnotation } from '../../helpers';\nimport { DirectoryPreparer } from './dir';\nimport { UrlPreparer } from './url';\nimport {\n  PreparerBase,\n  PreparerBuilder,\n  PreparerConfig,\n  RemoteProtocol,\n} from './types';\n\n/**\n * Collection of docs preparers (dir and url)\n * @public\n */\nexport class Preparers implements PreparerBuilder {\n  private preparerMap = new Map<RemoteProtocol, PreparerBase>();\n\n  /**\n   * Returns a generators instance containing a generator for TechDocs\n   * @public\n   * @param backstageConfig - A Backstage configuration\n   * @param preparerConfig - Options to configure preparers\n   */\n  static async fromConfig(\n    backstageConfig: Config,\n    { logger, reader }: PreparerConfig,\n  ): Promise<PreparerBuilder> {\n    const preparers = new Preparers();\n\n    const urlPreparer = UrlPreparer.fromConfig({ reader, logger });\n    preparers.register('url', urlPreparer);\n\n    /**\n     * Dir preparer is a syntactic sugar for users to define techdocs-ref annotation.\n     * When using dir preparer, the docs will be fetched using URL Reader.\n     */\n    const directoryPreparer = DirectoryPreparer.fromConfig(backstageConfig, {\n      logger,\n      reader,\n    });\n    preparers.register('dir', directoryPreparer);\n\n    return preparers;\n  }\n\n  /**\n   * Register a preparer in the preparers collection\n   * @param protocol - url or dir to associate with preparer\n   * @param preparer - The preparer instance to set\n   */\n  register(protocol: RemoteProtocol, preparer: PreparerBase) {\n    this.preparerMap.set(protocol, preparer);\n  }\n\n  /**\n   * Returns the preparer for a given TechDocs entity\n   * @param entity - A TechDocs entity instance\n   * @returns\n   */\n  get(entity: Entity): PreparerBase {\n    const { type } = parseReferenceAnnotation(\n      'backstage.io/techdocs-ref',\n      entity,\n    );\n    const preparer = this.preparerMap.get(type);\n\n    if (!preparer) {\n      throw new Error(`No preparer registered for type: \"${type}\"`);\n    }\n\n    return preparer;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Entity, CompoundEntityRef } from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport { assertError, ForwardedError } from '@backstage/errors';\nimport aws, { Credentials } from 'aws-sdk';\nimport { ListObjectsV2Output } from 'aws-sdk/clients/s3';\nimport { CredentialsOptions } from 'aws-sdk/lib/credentials';\nimport express from 'express';\nimport fs from 'fs-extra';\nimport JSON5 from 'json5';\nimport createLimiter from 'p-limit';\nimport path from 'path';\nimport { Readable } from 'stream';\nimport { Logger } from 'winston';\nimport {\n  bulkStorageOperation,\n  getCloudPathForLocalPath,\n  getFileTreeRecursively,\n  getHeadersForFileExtension,\n  getStaleFiles,\n  lowerCaseEntityTriplet,\n  lowerCaseEntityTripletInStoragePath,\n  normalizeExternalStorageRootPath,\n} from './helpers';\nimport {\n  PublisherBase,\n  PublishRequest,\n  PublishResponse,\n  ReadinessResponse,\n  TechDocsMetadata,\n} from './types';\n\nconst streamToBuffer = (stream: Readable): Promise<Buffer> => {\n  return new Promise((resolve, reject) => {\n    try {\n      const chunks: any[] = [];\n      stream.on('data', chunk => chunks.push(chunk));\n      stream.on('error', (e: Error) =>\n        reject(new ForwardedError('Unable to read stream', e)),\n      );\n      stream.on('end', () => resolve(Buffer.concat(chunks)));\n    } catch (e) {\n      throw new ForwardedError('Unable to parse the response data', e);\n    }\n  });\n};\n\nexport class AwsS3Publish implements PublisherBase {\n  private readonly storageClient: aws.S3;\n  private readonly bucketName: string;\n  private readonly legacyPathCasing: boolean;\n  private readonly logger: Logger;\n  private readonly bucketRootPath: string;\n  private readonly sse?: 'aws:kms' | 'AES256';\n\n  constructor(options: {\n    storageClient: aws.S3;\n    bucketName: string;\n    legacyPathCasing: boolean;\n    logger: Logger;\n    bucketRootPath: string;\n    sse?: 'aws:kms' | 'AES256';\n  }) {\n    this.storageClient = options.storageClient;\n    this.bucketName = options.bucketName;\n    this.legacyPathCasing = options.legacyPathCasing;\n    this.logger = options.logger;\n    this.bucketRootPath = options.bucketRootPath;\n    this.sse = options.sse;\n  }\n\n  static fromConfig(config: Config, logger: Logger): PublisherBase {\n    let bucketName = '';\n    try {\n      bucketName = config.getString('techdocs.publisher.awsS3.bucketName');\n    } catch (error) {\n      throw new Error(\n        \"Since techdocs.publisher.type is set to 'awsS3' in your app config, \" +\n          'techdocs.publisher.awsS3.bucketName is required.',\n      );\n    }\n\n    const bucketRootPath = normalizeExternalStorageRootPath(\n      config.getOptionalString('techdocs.publisher.awsS3.bucketRootPath') || '',\n    );\n\n    const sse = config.getOptionalString('techdocs.publisher.awsS3.sse') as\n      | 'aws:kms'\n      | 'AES256'\n      | undefined;\n\n    // Credentials is an optional config. If missing, the default ways of authenticating AWS SDK V2 will be used.\n    // 1. AWS environment variables\n    // https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/loading-node-credentials-environment.html\n    // 2. AWS shared credentials file at ~/.aws/credentials\n    // https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/loading-node-credentials-shared.html\n    // 3. IAM Roles for EC2\n    // https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/loading-node-credentials-iam.html\n    const credentialsConfig = config.getOptionalConfig(\n      'techdocs.publisher.awsS3.credentials',\n    );\n    const credentials = AwsS3Publish.buildCredentials(credentialsConfig);\n\n    // AWS Region is an optional config. If missing, default AWS env variable AWS_REGION\n    // or AWS shared credentials file at ~/.aws/credentials will be used.\n    const region = config.getOptionalString('techdocs.publisher.awsS3.region');\n\n    // AWS endpoint is an optional config. If missing, the default endpoint is built from\n    // the configured region.\n    const endpoint = config.getOptionalString(\n      'techdocs.publisher.awsS3.endpoint',\n    );\n\n    // AWS forcePathStyle is an optional config. If missing, it defaults to false. Needs to be enabled for cases\n    // where endpoint url points to locally hosted S3 compatible storage like Localstack\n    const s3ForcePathStyle = config.getOptionalBoolean(\n      'techdocs.publisher.awsS3.s3ForcePathStyle',\n    );\n\n    const storageClient = new aws.S3({\n      credentials,\n      ...(region && { region }),\n      ...(endpoint && { endpoint }),\n      ...(s3ForcePathStyle && { s3ForcePathStyle }),\n    });\n\n    const legacyPathCasing =\n      config.getOptionalBoolean(\n        'techdocs.legacyUseCaseSensitiveTripletPaths',\n      ) || false;\n\n    return new AwsS3Publish({\n      storageClient,\n      bucketName,\n      bucketRootPath,\n      legacyPathCasing,\n      logger,\n      sse,\n    });\n  }\n\n  private static buildCredentials(\n    config?: Config,\n  ): Credentials | CredentialsOptions | undefined {\n    if (!config) {\n      return undefined;\n    }\n\n    const accessKeyId = config.getOptionalString('accessKeyId');\n    const secretAccessKey = config.getOptionalString('secretAccessKey');\n    let explicitCredentials: Credentials | undefined;\n    if (accessKeyId && secretAccessKey) {\n      explicitCredentials = new Credentials({\n        accessKeyId,\n        secretAccessKey,\n      });\n    }\n\n    const roleArn = config.getOptionalString('roleArn');\n    if (roleArn) {\n      return new aws.ChainableTemporaryCredentials({\n        masterCredentials: explicitCredentials,\n        params: {\n          RoleSessionName: 'backstage-aws-techdocs-s3-publisher',\n          RoleArn: roleArn,\n        },\n      });\n    }\n\n    return explicitCredentials;\n  }\n\n  /**\n   * Check if the defined bucket exists. Being able to connect means the configuration is good\n   * and the storage client will work.\n   */\n  async getReadiness(): Promise<ReadinessResponse> {\n    try {\n      await this.storageClient\n        .headBucket({ Bucket: this.bucketName })\n        .promise();\n\n      this.logger.info(\n        `Successfully connected to the AWS S3 bucket ${this.bucketName}.`,\n      );\n\n      return { isAvailable: true };\n    } catch (error) {\n      this.logger.error(\n        `Could not retrieve metadata about the AWS S3 bucket ${this.bucketName}. ` +\n          'Make sure the bucket exists. Also make sure that authentication is setup either by ' +\n          'explicitly defining credentials and region in techdocs.publisher.awsS3 in app config or ' +\n          'by using environment variables. Refer to https://backstage.io/docs/features/techdocs/using-cloud-storage',\n      );\n      this.logger.error(`from AWS client library`, error);\n      return {\n        isAvailable: false,\n      };\n    }\n  }\n\n  /**\n   * Upload all the files from the generated `directory` to the S3 bucket.\n   * Directory structure used in the bucket is - entityNamespace/entityKind/entityName/index.html\n   */\n  async publish({\n    entity,\n    directory,\n  }: PublishRequest): Promise<PublishResponse> {\n    const objects: string[] = [];\n    const useLegacyPathCasing = this.legacyPathCasing;\n    const bucketRootPath = this.bucketRootPath;\n    const sse = this.sse;\n\n    // First, try to retrieve a list of all individual files currently existing\n    let existingFiles: string[] = [];\n    try {\n      const remoteFolder = getCloudPathForLocalPath(\n        entity,\n        undefined,\n        useLegacyPathCasing,\n        bucketRootPath,\n      );\n      existingFiles = await this.getAllObjectsFromBucket({\n        prefix: remoteFolder,\n      });\n    } catch (e) {\n      assertError(e);\n      this.logger.error(\n        `Unable to list files for Entity ${entity.metadata.name}: ${e.message}`,\n      );\n    }\n\n    // Then, merge new files into the same folder\n    let absoluteFilesToUpload;\n    try {\n      // Remove the absolute path prefix of the source directory\n      // Path of all files to upload, relative to the root of the source directory\n      // e.g. ['index.html', 'sub-page/index.html', 'assets/images/favicon.png']\n      absoluteFilesToUpload = await getFileTreeRecursively(directory);\n\n      await bulkStorageOperation(\n        async absoluteFilePath => {\n          const relativeFilePath = path.relative(directory, absoluteFilePath);\n          const fileStream = fs.createReadStream(absoluteFilePath);\n\n          const params = {\n            Bucket: this.bucketName,\n            Key: getCloudPathForLocalPath(\n              entity,\n              relativeFilePath,\n              useLegacyPathCasing,\n              bucketRootPath,\n            ),\n            Body: fileStream,\n            ...(sse && { ServerSideEncryption: sse }),\n          } as aws.S3.PutObjectRequest;\n\n          objects.push(params.Key);\n          return this.storageClient.upload(params).promise();\n        },\n        absoluteFilesToUpload,\n        { concurrencyLimit: 10 },\n      );\n\n      this.logger.info(\n        `Successfully uploaded all the generated files for Entity ${entity.metadata.name}. Total number of files: ${absoluteFilesToUpload.length}`,\n      );\n    } catch (e) {\n      const errorMessage = `Unable to upload file(s) to AWS S3. ${e}`;\n      this.logger.error(errorMessage);\n      throw new Error(errorMessage);\n    }\n\n    // Last, try to remove the files that were *only* present previously\n    try {\n      const relativeFilesToUpload = absoluteFilesToUpload.map(\n        absoluteFilePath =>\n          getCloudPathForLocalPath(\n            entity,\n            path.relative(directory, absoluteFilePath),\n            useLegacyPathCasing,\n            bucketRootPath,\n          ),\n      );\n      const staleFiles = getStaleFiles(relativeFilesToUpload, existingFiles);\n\n      await bulkStorageOperation(\n        async relativeFilePath => {\n          return await this.storageClient\n            .deleteObject({\n              Bucket: this.bucketName,\n              Key: relativeFilePath,\n            })\n            .promise();\n        },\n        staleFiles,\n        { concurrencyLimit: 10 },\n      );\n\n      this.logger.info(\n        `Successfully deleted stale files for Entity ${entity.metadata.name}. Total number of files: ${staleFiles.length}`,\n      );\n    } catch (error) {\n      const errorMessage = `Unable to delete file(s) from AWS S3. ${error}`;\n      this.logger.error(errorMessage);\n    }\n    return { objects };\n  }\n\n  async fetchTechDocsMetadata(\n    entityName: CompoundEntityRef,\n  ): Promise<TechDocsMetadata> {\n    try {\n      return await new Promise<TechDocsMetadata>(async (resolve, reject) => {\n        const entityTriplet = `${entityName.namespace}/${entityName.kind}/${entityName.name}`;\n        const entityDir = this.legacyPathCasing\n          ? entityTriplet\n          : lowerCaseEntityTriplet(entityTriplet);\n\n        const entityRootDir = path.posix.join(this.bucketRootPath, entityDir);\n\n        const stream = this.storageClient\n          .getObject({\n            Bucket: this.bucketName,\n            Key: `${entityRootDir}/techdocs_metadata.json`,\n          })\n          .createReadStream();\n\n        try {\n          const techdocsMetadataJson = await streamToBuffer(stream);\n          if (!techdocsMetadataJson) {\n            throw new Error(\n              `Unable to parse the techdocs metadata file ${entityRootDir}/techdocs_metadata.json.`,\n            );\n          }\n\n          const techdocsMetadata = JSON5.parse(\n            techdocsMetadataJson.toString('utf-8'),\n          );\n\n          resolve(techdocsMetadata);\n        } catch (err) {\n          assertError(err);\n          this.logger.error(err.message);\n          reject(new Error(err.message));\n        }\n      });\n    } catch (e) {\n      throw new ForwardedError('TechDocs metadata fetch failed', e);\n    }\n  }\n\n  /**\n   * Express route middleware to serve static files on a route in techdocs-backend.\n   */\n  docsRouter(): express.Handler {\n    return async (req, res) => {\n      const decodedUri = decodeURI(req.path.replace(/^\\//, ''));\n\n      // filePath example - /default/component/documented-component/index.html\n      const filePathNoRoot = this.legacyPathCasing\n        ? decodedUri\n        : lowerCaseEntityTripletInStoragePath(decodedUri);\n\n      // Prepend the root path to the relative file path\n      const filePath = path.posix.join(this.bucketRootPath, filePathNoRoot);\n\n      // Files with different extensions (CSS, HTML) need to be served with different headers\n      const fileExtension = path.extname(filePath);\n      const responseHeaders = getHeadersForFileExtension(fileExtension);\n\n      const stream = this.storageClient\n        .getObject({ Bucket: this.bucketName, Key: filePath })\n        .createReadStream();\n      try {\n        // Inject response headers\n        for (const [headerKey, headerValue] of Object.entries(\n          responseHeaders,\n        )) {\n          res.setHeader(headerKey, headerValue);\n        }\n\n        res.send(await streamToBuffer(stream));\n      } catch (err) {\n        assertError(err);\n        this.logger.warn(\n          `TechDocs S3 router failed to serve static files from bucket ${this.bucketName} at key ${filePath}: ${err.message}`,\n        );\n        res.status(404).send('File Not Found');\n      }\n    };\n  }\n\n  /**\n   * A helper function which checks if index.html of an Entity's docs site is available. This\n   * can be used to verify if there are any pre-generated docs available to serve.\n   */\n  async hasDocsBeenGenerated(entity: Entity): Promise<boolean> {\n    try {\n      const entityTriplet = `${entity.metadata.namespace}/${entity.kind}/${entity.metadata.name}`;\n      const entityDir = this.legacyPathCasing\n        ? entityTriplet\n        : lowerCaseEntityTriplet(entityTriplet);\n\n      const entityRootDir = path.posix.join(this.bucketRootPath, entityDir);\n\n      await this.storageClient\n        .headObject({\n          Bucket: this.bucketName,\n          Key: `${entityRootDir}/index.html`,\n        })\n        .promise();\n      return Promise.resolve(true);\n    } catch (e) {\n      return Promise.resolve(false);\n    }\n  }\n\n  async migrateDocsCase({\n    removeOriginal = false,\n    concurrency = 25,\n  }): Promise<void> {\n    // Iterate through every file in the root of the publisher.\n    const allObjects = await this.getAllObjectsFromBucket();\n    const limiter = createLimiter(concurrency);\n    await Promise.all(\n      allObjects.map(f =>\n        limiter(async file => {\n          let newPath;\n          try {\n            newPath = lowerCaseEntityTripletInStoragePath(file);\n          } catch (e) {\n            assertError(e);\n            this.logger.warn(e.message);\n            return;\n          }\n\n          // If all parts are already lowercase, ignore.\n          if (file === newPath) {\n            return;\n          }\n\n          try {\n            this.logger.verbose(`Migrating ${file}`);\n            await this.storageClient\n              .copyObject({\n                Bucket: this.bucketName,\n                CopySource: [this.bucketName, file].join('/'),\n                Key: newPath,\n              })\n              .promise();\n\n            if (removeOriginal) {\n              await this.storageClient\n                .deleteObject({\n                  Bucket: this.bucketName,\n                  Key: file,\n                })\n                .promise();\n            }\n          } catch (e) {\n            assertError(e);\n            this.logger.warn(`Unable to migrate ${file}: ${e.message}`);\n          }\n        }, f),\n      ),\n    );\n  }\n\n  /**\n   * Returns a list of all object keys from the configured bucket.\n   */\n  protected async getAllObjectsFromBucket(\n    { prefix } = { prefix: '' },\n  ): Promise<string[]> {\n    const objects: string[] = [];\n    let nextContinuation: string | undefined;\n    let allObjects: ListObjectsV2Output;\n    // Iterate through every file in the root of the publisher.\n    do {\n      allObjects = await this.storageClient\n        .listObjectsV2({\n          Bucket: this.bucketName,\n          ContinuationToken: nextContinuation,\n          ...(prefix ? { Prefix: prefix } : {}),\n        })\n        .promise();\n      objects.push(\n        ...(allObjects.Contents || []).map(f => f.Key || '').filter(f => !!f),\n      );\n      nextContinuation = allObjects.NextContinuationToken;\n    } while (nextContinuation);\n\n    return objects;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DefaultAzureCredential } from '@azure/identity';\nimport {\n  BlobServiceClient,\n  ContainerClient,\n  StorageSharedKeyCredential,\n} from '@azure/storage-blob';\nimport { Entity, CompoundEntityRef } from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport { assertError, ForwardedError } from '@backstage/errors';\nimport express from 'express';\nimport JSON5 from 'json5';\nimport limiterFactory from 'p-limit';\nimport { default as path, default as platformPath } from 'path';\nimport { Logger } from 'winston';\nimport {\n  bulkStorageOperation,\n  getCloudPathForLocalPath,\n  getFileTreeRecursively,\n  getHeadersForFileExtension,\n  lowerCaseEntityTriplet,\n  getStaleFiles,\n  lowerCaseEntityTripletInStoragePath,\n} from './helpers';\nimport {\n  PublisherBase,\n  PublishRequest,\n  PublishResponse,\n  ReadinessResponse,\n  TechDocsMetadata,\n} from './types';\n\n// The number of batches that may be ongoing at the same time.\nconst BATCH_CONCURRENCY = 3;\n\nexport class AzureBlobStoragePublish implements PublisherBase {\n  private readonly storageClient: BlobServiceClient;\n  private readonly containerName: string;\n  private readonly legacyPathCasing: boolean;\n  private readonly logger: Logger;\n\n  constructor(options: {\n    storageClient: BlobServiceClient;\n    containerName: string;\n    legacyPathCasing: boolean;\n    logger: Logger;\n  }) {\n    this.storageClient = options.storageClient;\n    this.containerName = options.containerName;\n    this.legacyPathCasing = options.legacyPathCasing;\n    this.logger = options.logger;\n  }\n\n  static fromConfig(config: Config, logger: Logger): PublisherBase {\n    let containerName = '';\n    try {\n      containerName = config.getString(\n        'techdocs.publisher.azureBlobStorage.containerName',\n      );\n    } catch (error) {\n      throw new Error(\n        \"Since techdocs.publisher.type is set to 'azureBlobStorage' in your app config, \" +\n          'techdocs.publisher.azureBlobStorage.containerName is required.',\n      );\n    }\n\n    let accountName = '';\n    try {\n      accountName = config.getString(\n        'techdocs.publisher.azureBlobStorage.credentials.accountName',\n      );\n    } catch (error) {\n      throw new Error(\n        \"Since techdocs.publisher.type is set to 'azureBlobStorage' in your app config, \" +\n          'techdocs.publisher.azureBlobStorage.credentials.accountName is required.',\n      );\n    }\n\n    // Credentials is an optional config. If missing, default Azure Blob Storage environment variables will be used.\n    // https://docs.microsoft.com/en-us/azure/storage/common/storage-auth-aad-app\n    const accountKey = config.getOptionalString(\n      'techdocs.publisher.azureBlobStorage.credentials.accountKey',\n    );\n\n    let credential;\n    if (accountKey) {\n      credential = new StorageSharedKeyCredential(accountName, accountKey);\n    } else {\n      credential = new DefaultAzureCredential();\n    }\n\n    const storageClient = new BlobServiceClient(\n      `https://${accountName}.blob.core.windows.net`,\n      credential,\n    );\n\n    const legacyPathCasing =\n      config.getOptionalBoolean(\n        'techdocs.legacyUseCaseSensitiveTripletPaths',\n      ) || false;\n\n    return new AzureBlobStoragePublish({\n      storageClient: storageClient,\n      containerName: containerName,\n      legacyPathCasing: legacyPathCasing,\n      logger: logger,\n    });\n  }\n\n  async getReadiness(): Promise<ReadinessResponse> {\n    try {\n      const response = await this.storageClient\n        .getContainerClient(this.containerName)\n        .getProperties();\n\n      if (response._response.status === 200) {\n        return {\n          isAvailable: true,\n        };\n      }\n\n      if (response._response.status >= 400) {\n        this.logger.error(\n          `Failed to retrieve metadata from ${response._response.request.url} with status code ${response._response.status}.`,\n        );\n      }\n    } catch (e) {\n      assertError(e);\n      this.logger.error(`from Azure Blob Storage client library: ${e.message}`);\n    }\n\n    this.logger.error(\n      `Could not retrieve metadata about the Azure Blob Storage container ${this.containerName}. ` +\n        'Make sure that the Azure project and container exist and the access key is setup correctly ' +\n        'techdocs.publisher.azureBlobStorage.credentials defined in app config has correct permissions. ' +\n        'Refer to https://backstage.io/docs/features/techdocs/using-cloud-storage',\n    );\n\n    return { isAvailable: false };\n  }\n\n  /**\n   * Upload all the files from the generated `directory` to the Azure Blob Storage container.\n   * Directory structure used in the container is - entityNamespace/entityKind/entityName/index.html\n   */\n  async publish({\n    entity,\n    directory,\n  }: PublishRequest): Promise<PublishResponse> {\n    const objects: string[] = [];\n    const useLegacyPathCasing = this.legacyPathCasing;\n\n    // First, try to retrieve a list of all individual files currently existing\n    const remoteFolder = getCloudPathForLocalPath(\n      entity,\n      undefined,\n      useLegacyPathCasing,\n    );\n    let existingFiles: string[] = [];\n    try {\n      existingFiles = await this.getAllBlobsFromContainer({\n        prefix: remoteFolder,\n        maxPageSize: BATCH_CONCURRENCY,\n      });\n    } catch (e) {\n      assertError(e);\n      this.logger.error(\n        `Unable to list files for Entity ${entity.metadata.name}: ${e.message}`,\n      );\n    }\n\n    // Then, merge new files into the same folder\n    let absoluteFilesToUpload;\n    let container: ContainerClient;\n    try {\n      // Remove the absolute path prefix of the source directory\n      // Path of all files to upload, relative to the root of the source directory\n      // e.g. ['index.html', 'sub-page/index.html', 'assets/images/favicon.png']\n      absoluteFilesToUpload = await getFileTreeRecursively(directory);\n\n      container = this.storageClient.getContainerClient(this.containerName);\n      const failedOperations: Error[] = [];\n      await bulkStorageOperation(\n        async absoluteFilePath => {\n          const relativeFilePath = path.normalize(\n            path.relative(directory, absoluteFilePath),\n          );\n          const remotePath = getCloudPathForLocalPath(\n            entity,\n            relativeFilePath,\n            useLegacyPathCasing,\n          );\n          objects.push(remotePath);\n          const response = await container\n            .getBlockBlobClient(remotePath)\n            .uploadFile(absoluteFilePath);\n\n          if (response._response.status >= 400) {\n            failedOperations.push(\n              new Error(\n                `Upload failed for ${absoluteFilePath} with status code ${response._response.status}`,\n              ),\n            );\n          }\n\n          return response;\n        },\n        absoluteFilesToUpload,\n        { concurrencyLimit: BATCH_CONCURRENCY },\n      );\n\n      if (failedOperations.length > 0) {\n        throw new Error(\n          failedOperations\n            .map(r => r.message)\n            .filter(Boolean)\n            .join(' '),\n        );\n      }\n\n      this.logger.info(\n        `Successfully uploaded all the generated files for Entity ${entity.metadata.name}. Total number of files: ${absoluteFilesToUpload.length}`,\n      );\n    } catch (e) {\n      const errorMessage = `Unable to upload file(s) to Azure. ${e}`;\n      this.logger.error(errorMessage);\n      throw new Error(errorMessage);\n    }\n\n    // Last, try to remove the files that were *only* present previously\n    try {\n      const relativeFilesToUpload = absoluteFilesToUpload.map(\n        absoluteFilePath =>\n          getCloudPathForLocalPath(\n            entity,\n            path.relative(directory, absoluteFilePath),\n            useLegacyPathCasing,\n          ),\n      );\n\n      const staleFiles = getStaleFiles(relativeFilesToUpload, existingFiles);\n\n      await bulkStorageOperation(\n        async relativeFilePath => {\n          return await container.deleteBlob(relativeFilePath);\n        },\n        staleFiles,\n        { concurrencyLimit: BATCH_CONCURRENCY },\n      );\n\n      this.logger.info(\n        `Successfully deleted stale files for Entity ${entity.metadata.name}. Total number of files: ${staleFiles.length}`,\n      );\n    } catch (error) {\n      const errorMessage = `Unable to delete file(s) from Azure. ${error}`;\n      this.logger.error(errorMessage);\n    }\n\n    return { objects };\n  }\n\n  private download(containerName: string, blobPath: string): Promise<Buffer> {\n    return new Promise((resolve, reject) => {\n      const fileStreamChunks: Array<any> = [];\n      this.storageClient\n        .getContainerClient(containerName)\n        .getBlockBlobClient(blobPath)\n        .download()\n        .then(res => {\n          const body = res.readableStreamBody;\n          if (!body) {\n            reject(new Error(`Unable to parse the response data`));\n            return;\n          }\n          body\n            .on('error', reject)\n            .on('data', chunk => {\n              fileStreamChunks.push(chunk);\n            })\n            .on('end', () => {\n              resolve(Buffer.concat(fileStreamChunks));\n            });\n        })\n        .catch(reject);\n    });\n  }\n\n  async fetchTechDocsMetadata(\n    entityName: CompoundEntityRef,\n  ): Promise<TechDocsMetadata> {\n    const entityTriplet = `${entityName.namespace}/${entityName.kind}/${entityName.name}`;\n    const entityRootDir = this.legacyPathCasing\n      ? entityTriplet\n      : lowerCaseEntityTriplet(entityTriplet);\n\n    try {\n      const techdocsMetadataJson = await this.download(\n        this.containerName,\n        `${entityRootDir}/techdocs_metadata.json`,\n      );\n      if (!techdocsMetadataJson) {\n        throw new Error(\n          `Unable to parse the techdocs metadata file ${entityRootDir}/techdocs_metadata.json.`,\n        );\n      }\n      const techdocsMetadata = JSON5.parse(\n        techdocsMetadataJson.toString('utf-8'),\n      );\n      return techdocsMetadata;\n    } catch (e) {\n      throw new ForwardedError('TechDocs metadata fetch failed', e);\n    }\n  }\n\n  /**\n   * Express route middleware to serve static files on a route in techdocs-backend.\n   */\n  docsRouter(): express.Handler {\n    return (req, res) => {\n      // Decode and trim the leading forward slash\n      const decodedUri = decodeURI(req.path.replace(/^\\//, ''));\n\n      // filePath example - /default/Component/documented-component/index.html\n      const filePath = this.legacyPathCasing\n        ? decodedUri\n        : lowerCaseEntityTripletInStoragePath(decodedUri);\n\n      // Files with different extensions (CSS, HTML) need to be served with different headers\n      const fileExtension = platformPath.extname(filePath);\n      const responseHeaders = getHeadersForFileExtension(fileExtension);\n\n      this.download(this.containerName, filePath)\n        .then(fileContent => {\n          // Inject response headers\n          for (const [headerKey, headerValue] of Object.entries(\n            responseHeaders,\n          )) {\n            res.setHeader(headerKey, headerValue);\n          }\n          res.send(fileContent);\n        })\n        .catch(e => {\n          this.logger.warn(\n            `TechDocs Azure router failed to serve content from container ${this.containerName} at path ${filePath}: ${e.message}`,\n          );\n          res.status(404).send('File Not Found');\n        });\n    };\n  }\n\n  /**\n   * A helper function which checks if index.html of an Entity's docs site is available. This\n   * can be used to verify if there are any pre-generated docs available to serve.\n   */\n  hasDocsBeenGenerated(entity: Entity): Promise<boolean> {\n    const entityTriplet = `${entity.metadata.namespace}/${entity.kind}/${entity.metadata.name}`;\n    const entityRootDir = this.legacyPathCasing\n      ? entityTriplet\n      : lowerCaseEntityTriplet(entityTriplet);\n\n    return this.storageClient\n      .getContainerClient(this.containerName)\n      .getBlockBlobClient(`${entityRootDir}/index.html`)\n      .exists();\n  }\n\n  protected async renameBlob(\n    originalName: string,\n    newName: string,\n    removeOriginal = false,\n  ): Promise<void> {\n    const container = this.storageClient.getContainerClient(this.containerName);\n    const blob = container.getBlobClient(newName);\n    const { url } = container.getBlobClient(originalName);\n    const response = await blob.beginCopyFromURL(url);\n    await response.pollUntilDone();\n    if (removeOriginal) {\n      await container.deleteBlob(originalName);\n    }\n  }\n\n  protected async renameBlobToLowerCase(\n    originalPath: string,\n    removeOriginal: boolean,\n  ) {\n    let newPath;\n    try {\n      newPath = lowerCaseEntityTripletInStoragePath(originalPath);\n    } catch (e) {\n      assertError(e);\n      this.logger.warn(e.message);\n      return;\n    }\n\n    if (originalPath === newPath) return;\n    try {\n      this.logger.verbose(`Migrating ${originalPath}`);\n      await this.renameBlob(originalPath, newPath, removeOriginal);\n    } catch (e) {\n      assertError(e);\n      this.logger.warn(`Unable to migrate ${originalPath}: ${e.message}`);\n    }\n  }\n\n  async migrateDocsCase({\n    removeOriginal = false,\n    concurrency = 25,\n  }): Promise<void> {\n    const promises = [];\n    const limiter = limiterFactory(concurrency);\n    const container = this.storageClient.getContainerClient(this.containerName);\n\n    for await (const blob of container.listBlobsFlat()) {\n      promises.push(\n        limiter(\n          this.renameBlobToLowerCase.bind(this),\n          blob.name,\n          removeOriginal,\n        ),\n      );\n    }\n\n    await Promise.all(promises);\n  }\n\n  protected async getAllBlobsFromContainer({\n    prefix,\n    maxPageSize,\n  }: {\n    prefix: string;\n    maxPageSize: number;\n  }): Promise<string[]> {\n    const blobs: string[] = [];\n    const container = this.storageClient.getContainerClient(this.containerName);\n\n    let iterator = container.listBlobsFlat({ prefix }).byPage({ maxPageSize });\n    let response = (await iterator.next()).value;\n\n    do {\n      for (const blob of response?.segment?.blobItems ?? []) {\n        blobs.push(blob.name);\n      }\n      iterator = container\n        .listBlobsFlat({ prefix })\n        .byPage({ continuationToken: response.continuationToken, maxPageSize });\n      response = (await iterator.next()).value;\n    } while (response && response.continuationToken);\n\n    return blobs;\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assertError } from '@backstage/errors';\nimport { File } from '@google-cloud/storage';\nimport { Writable } from 'stream';\nimport { Logger } from 'winston';\nimport { lowerCaseEntityTripletInStoragePath } from '../helpers';\n\n/**\n * Writable stream to handle object copy/move operations. This implementation\n * ensures we don't read in files from GCS faster than GCS can copy/move them.\n */\nexport class MigrateWriteStream extends Writable {\n  protected logger: Logger;\n  protected removeOriginal: boolean;\n  protected maxConcurrency: number;\n  protected inFlight = 0;\n\n  constructor(logger: Logger, removeOriginal: boolean, concurrency: number) {\n    super({ objectMode: true });\n    this.logger = logger;\n    this.removeOriginal = removeOriginal;\n    this.maxConcurrency = concurrency;\n  }\n\n  _write(file: File, _encoding: BufferEncoding, next: Function) {\n    let shouldCallNext = true;\n    let newFile;\n    try {\n      newFile = lowerCaseEntityTripletInStoragePath(file.name);\n    } catch (e) {\n      assertError(e);\n      this.logger.warn(e.message);\n      next();\n      return;\n    }\n\n    // If all parts are already lowercase, ignore.\n    if (newFile === file.name) {\n      next();\n      return;\n    }\n\n    // Allow up to n-many files to be migrated at a time.\n    this.inFlight++;\n    if (this.inFlight < this.maxConcurrency) {\n      next();\n      shouldCallNext = false;\n    }\n\n    // Otherwise, copy or move the file.\n    const migrate = this.removeOriginal\n      ? file.move.bind(file)\n      : file.copy.bind(file);\n    this.logger.verbose(`Migrating ${file.name}`);\n    migrate(newFile)\n      .catch(e =>\n        this.logger.warn(`Unable to migrate ${file.name}: ${e.message}`),\n      )\n      .finally(() => {\n        this.inFlight--;\n        if (shouldCallNext) {\n          next();\n        }\n      });\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Entity, CompoundEntityRef } from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport { assertError } from '@backstage/errors';\nimport {\n  File,\n  FileExistsResponse,\n  Storage,\n  StorageOptions,\n} from '@google-cloud/storage';\nimport express from 'express';\nimport JSON5 from 'json5';\nimport path from 'path';\nimport { Readable } from 'stream';\nimport { Logger } from 'winston';\nimport {\n  getFileTreeRecursively,\n  getHeadersForFileExtension,\n  lowerCaseEntityTriplet,\n  lowerCaseEntityTripletInStoragePath,\n  bulkStorageOperation,\n  getCloudPathForLocalPath,\n  getStaleFiles,\n  normalizeExternalStorageRootPath,\n} from './helpers';\nimport { MigrateWriteStream } from './migrations';\nimport {\n  PublisherBase,\n  PublishRequest,\n  PublishResponse,\n  ReadinessResponse,\n  TechDocsMetadata,\n} from './types';\n\nexport class GoogleGCSPublish implements PublisherBase {\n  private readonly storageClient: Storage;\n  private readonly bucketName: string;\n  private readonly legacyPathCasing: boolean;\n  private readonly logger: Logger;\n  private readonly bucketRootPath: string;\n\n  constructor(options: {\n    storageClient: Storage;\n    bucketName: string;\n    legacyPathCasing: boolean;\n    logger: Logger;\n    bucketRootPath: string;\n  }) {\n    this.storageClient = options.storageClient;\n    this.bucketName = options.bucketName;\n    this.legacyPathCasing = options.legacyPathCasing;\n    this.logger = options.logger;\n    this.bucketRootPath = options.bucketRootPath;\n  }\n\n  static fromConfig(config: Config, logger: Logger): PublisherBase {\n    let bucketName = '';\n    try {\n      bucketName = config.getString('techdocs.publisher.googleGcs.bucketName');\n    } catch (error) {\n      throw new Error(\n        \"Since techdocs.publisher.type is set to 'googleGcs' in your app config, \" +\n          'techdocs.publisher.googleGcs.bucketName is required.',\n      );\n    }\n\n    const bucketRootPath = normalizeExternalStorageRootPath(\n      config.getOptionalString('techdocs.publisher.googleGcs.bucketRootPath') ||\n        '',\n    );\n\n    // Credentials is an optional config. If missing, default GCS environment variables will be used.\n    // Read more here https://cloud.google.com/docs/authentication/production\n    const credentials = config.getOptionalString(\n      'techdocs.publisher.googleGcs.credentials',\n    );\n    const projectId = config.getOptionalString(\n      'techdocs.publisher.googleGcs.projectId',\n    );\n    let credentialsJson: any = {};\n    if (credentials) {\n      try {\n        credentialsJson = JSON.parse(credentials);\n      } catch (err) {\n        throw new Error(\n          'Error in parsing techdocs.publisher.googleGcs.credentials config to JSON.',\n        );\n      }\n    }\n\n    const clientOpts: StorageOptions = {};\n    if (projectId) {\n      clientOpts.projectId = projectId;\n    }\n\n    const storageClient = new Storage({\n      ...(credentials && {\n        projectId: credentialsJson.project_id,\n        credentials: credentialsJson,\n      }),\n      ...clientOpts,\n    });\n\n    const legacyPathCasing =\n      config.getOptionalBoolean(\n        'techdocs.legacyUseCaseSensitiveTripletPaths',\n      ) || false;\n\n    return new GoogleGCSPublish({\n      storageClient,\n      bucketName,\n      legacyPathCasing,\n      logger,\n      bucketRootPath,\n    });\n  }\n\n  /**\n   * Check if the defined bucket exists. Being able to connect means the configuration is good\n   * and the storage client will work.\n   */\n  async getReadiness(): Promise<ReadinessResponse> {\n    try {\n      await this.storageClient.bucket(this.bucketName).getMetadata();\n      this.logger.info(\n        `Successfully connected to the GCS bucket ${this.bucketName}.`,\n      );\n\n      return {\n        isAvailable: true,\n      };\n    } catch (err) {\n      assertError(err);\n      this.logger.error(\n        `Could not retrieve metadata about the GCS bucket ${this.bucketName}. ` +\n          'Make sure the bucket exists. Also make sure that authentication is setup either by explicitly defining ' +\n          'techdocs.publisher.googleGcs.credentials in app config or by using environment variables. ' +\n          'Refer to https://backstage.io/docs/features/techdocs/using-cloud-storage',\n      );\n      this.logger.error(`from GCS client library: ${err.message}`);\n\n      return { isAvailable: false };\n    }\n  }\n\n  /**\n   * Upload all the files from the generated `directory` to the GCS bucket.\n   * Directory structure used in the bucket is - entityNamespace/entityKind/entityName/index.html\n   */\n  async publish({\n    entity,\n    directory,\n  }: PublishRequest): Promise<PublishResponse> {\n    const objects: string[] = [];\n    const useLegacyPathCasing = this.legacyPathCasing;\n    const bucket = this.storageClient.bucket(this.bucketName);\n    const bucketRootPath = this.bucketRootPath;\n\n    // First, try to retrieve a list of all individual files currently existing\n    let existingFiles: string[] = [];\n    try {\n      const remoteFolder = getCloudPathForLocalPath(\n        entity,\n        undefined,\n        useLegacyPathCasing,\n        bucketRootPath,\n      );\n      existingFiles = await this.getFilesForFolder(remoteFolder);\n    } catch (e) {\n      assertError(e);\n      this.logger.error(\n        `Unable to list files for Entity ${entity.metadata.name}: ${e.message}`,\n      );\n    }\n\n    // Then, merge new files into the same folder\n    let absoluteFilesToUpload;\n    try {\n      // Remove the absolute path prefix of the source directory\n      // Path of all files to upload, relative to the root of the source directory\n      // e.g. ['index.html', 'sub-page/index.html', 'assets/images/favicon.png']\n      absoluteFilesToUpload = await getFileTreeRecursively(directory);\n\n      await bulkStorageOperation(\n        async absoluteFilePath => {\n          const relativeFilePath = path.relative(directory, absoluteFilePath);\n          const destination = getCloudPathForLocalPath(\n            entity,\n            relativeFilePath,\n            useLegacyPathCasing,\n            bucketRootPath,\n          );\n          objects.push(destination);\n          return await bucket.upload(absoluteFilePath, { destination });\n        },\n        absoluteFilesToUpload,\n        { concurrencyLimit: 10 },\n      );\n\n      this.logger.info(\n        `Successfully uploaded all the generated files for Entity ${entity.metadata.name}. Total number of files: ${absoluteFilesToUpload.length}`,\n      );\n    } catch (e) {\n      const errorMessage = `Unable to upload file(s) to Google Cloud Storage. ${e}`;\n      this.logger.error(errorMessage);\n      throw new Error(errorMessage);\n    }\n\n    // Last, try to remove the files that were *only* present previously\n    try {\n      const relativeFilesToUpload = absoluteFilesToUpload.map(\n        absoluteFilePath =>\n          getCloudPathForLocalPath(\n            entity,\n            path.relative(directory, absoluteFilePath),\n            useLegacyPathCasing,\n            bucketRootPath,\n          ),\n      );\n      const staleFiles = getStaleFiles(relativeFilesToUpload, existingFiles);\n\n      await bulkStorageOperation(\n        async relativeFilePath => {\n          return await bucket.file(relativeFilePath).delete();\n        },\n        staleFiles,\n        { concurrencyLimit: 10 },\n      );\n\n      this.logger.info(\n        `Successfully deleted stale files for Entity ${entity.metadata.name}. Total number of files: ${staleFiles.length}`,\n      );\n    } catch (error) {\n      const errorMessage = `Unable to delete file(s) from Google Cloud Storage. ${error}`;\n      this.logger.error(errorMessage);\n    }\n\n    return { objects };\n  }\n\n  fetchTechDocsMetadata(\n    entityName: CompoundEntityRef,\n  ): Promise<TechDocsMetadata> {\n    return new Promise((resolve, reject) => {\n      const entityTriplet = `${entityName.namespace}/${entityName.kind}/${entityName.name}`;\n      const entityDir = this.legacyPathCasing\n        ? entityTriplet\n        : lowerCaseEntityTriplet(entityTriplet);\n\n      const entityRootDir = path.posix.join(this.bucketRootPath, entityDir);\n\n      const fileStreamChunks: Array<any> = [];\n      this.storageClient\n        .bucket(this.bucketName)\n        .file(`${entityRootDir}/techdocs_metadata.json`)\n        .createReadStream()\n        .on('error', err => {\n          this.logger.error(err.message);\n          reject(err);\n        })\n        .on('data', chunk => {\n          fileStreamChunks.push(chunk);\n        })\n        .on('end', () => {\n          const techdocsMetadataJson =\n            Buffer.concat(fileStreamChunks).toString('utf-8');\n          resolve(JSON5.parse(techdocsMetadataJson));\n        });\n    });\n  }\n\n  /**\n   * Express route middleware to serve static files on a route in techdocs-backend.\n   */\n  docsRouter(): express.Handler {\n    return (req, res) => {\n      const decodedUri = decodeURI(req.path.replace(/^\\//, ''));\n\n      // filePath example - /default/component/documented-component/index.html\n      const filePathNoRoot = this.legacyPathCasing\n        ? decodedUri\n        : lowerCaseEntityTripletInStoragePath(decodedUri);\n\n      // Prepend the root path to the relative file path\n      const filePath = path.posix.join(this.bucketRootPath, filePathNoRoot);\n\n      // Files with different extensions (CSS, HTML) need to be served with different headers\n      const fileExtension = path.extname(filePath);\n      const responseHeaders = getHeadersForFileExtension(fileExtension);\n\n      // Pipe file chunks directly from storage to client.\n      this.storageClient\n        .bucket(this.bucketName)\n        .file(filePath)\n        .createReadStream()\n        .on('pipe', () => {\n          res.writeHead(200, responseHeaders);\n        })\n        .on('error', err => {\n          this.logger.warn(\n            `TechDocs Google GCS router failed to serve content from bucket ${this.bucketName} at path ${filePath}: ${err.message}`,\n          );\n          // Send a 404 with a meaningful message if possible.\n          if (!res.headersSent) {\n            res.status(404).send('File Not Found');\n          } else {\n            res.destroy();\n          }\n        })\n        .pipe(res);\n    };\n  }\n\n  /**\n   * A helper function which checks if index.html of an Entity's docs site is available. This\n   * can be used to verify if there are any pre-generated docs available to serve.\n   */\n  async hasDocsBeenGenerated(entity: Entity): Promise<boolean> {\n    return new Promise(resolve => {\n      const entityTriplet = `${entity.metadata.namespace}/${entity.kind}/${entity.metadata.name}`;\n      const entityDir = this.legacyPathCasing\n        ? entityTriplet\n        : lowerCaseEntityTriplet(entityTriplet);\n\n      const entityRootDir = path.posix.join(this.bucketRootPath, entityDir);\n\n      this.storageClient\n        .bucket(this.bucketName)\n        .file(`${entityRootDir}/index.html`)\n        .exists()\n        .then((response: FileExistsResponse) => {\n          resolve(response[0]);\n        })\n        .catch(() => {\n          resolve(false);\n        });\n    });\n  }\n\n  migrateDocsCase({ removeOriginal = false, concurrency = 25 }): Promise<void> {\n    return new Promise((resolve, reject) => {\n      // Iterate through every file in the root of the publisher.\n      const allFileMetadata: Readable = this.storageClient\n        .bucket(this.bucketName)\n        .getFilesStream();\n      const migrateFiles = new MigrateWriteStream(\n        this.logger,\n        removeOriginal,\n        concurrency,\n      );\n      migrateFiles.on('finish', resolve).on('error', reject);\n      allFileMetadata.pipe(migrateFiles).on('error', error => {\n        migrateFiles.destroy();\n        reject(error);\n      });\n    });\n  }\n\n  private getFilesForFolder(folder: string): Promise<string[]> {\n    const fileMetadataStream: Readable = this.storageClient\n      .bucket(this.bucketName)\n      .getFilesStream({ prefix: folder });\n\n    return new Promise((resolve, reject) => {\n      const files: string[] = [];\n\n      fileMetadataStream.on('error', error => {\n        // push file to file array\n        reject(error);\n      });\n\n      fileMetadataStream.on('data', (file: File) => {\n        // push file to file array\n        files.push(file.name);\n      });\n\n      fileMetadataStream.on('end', () => {\n        // resolve promise\n        resolve(files);\n      });\n    });\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  PluginEndpointDiscovery,\n  resolvePackagePath,\n  resolveSafeChildPath,\n} from '@backstage/backend-common';\nimport {\n  Entity,\n  CompoundEntityRef,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport express from 'express';\nimport fs from 'fs-extra';\nimport os from 'os';\nimport createLimiter from 'p-limit';\nimport path from 'path';\nimport { Logger } from 'winston';\nimport {\n  PublisherBase,\n  PublishRequest,\n  PublishResponse,\n  ReadinessResponse,\n  TechDocsMetadata,\n} from './types';\nimport {\n  getFileTreeRecursively,\n  getHeadersForFileExtension,\n  lowerCaseEntityTripletInStoragePath,\n} from './helpers';\nimport { ForwardedError } from '@backstage/errors';\n\n/**\n * Local publisher which uses the local filesystem to store the generated static files. It uses by default a\n * directory called \"static\" at the root of techdocs-backend plugin unless a directory has been configured by\n * \"techdocs.publisher.local.publishDirectory\".\n */\nexport class LocalPublish implements PublisherBase {\n  private readonly legacyPathCasing: boolean;\n  private readonly logger: Logger;\n  private readonly discovery: PluginEndpointDiscovery;\n  private readonly staticDocsDir: string;\n\n  constructor(options: {\n    logger: Logger;\n    discovery: PluginEndpointDiscovery;\n    legacyPathCasing: boolean;\n    staticDocsDir: string;\n  }) {\n    this.logger = options.logger;\n    this.discovery = options.discovery;\n    this.legacyPathCasing = options.legacyPathCasing;\n    this.staticDocsDir = options.staticDocsDir;\n  }\n\n  static fromConfig(\n    config: Config,\n    logger: Logger,\n    discovery: PluginEndpointDiscovery,\n  ): PublisherBase {\n    const legacyPathCasing =\n      config.getOptionalBoolean(\n        'techdocs.legacyUseCaseSensitiveTripletPaths',\n      ) || false;\n\n    let staticDocsDir = config.getOptionalString(\n      'techdocs.publisher.local.publishDirectory',\n    );\n    if (!staticDocsDir) {\n      try {\n        staticDocsDir = resolvePackagePath(\n          '@backstage/plugin-techdocs-backend',\n          'static/docs',\n        );\n      } catch (err) {\n        // This will most probably never be used.\n        // The try/catch is introduced so that techdocs-cli can import @backstage/plugin-techdocs-node\n        // on CI/CD without installing techdocs backend plugin.\n        staticDocsDir = os.tmpdir();\n      }\n    }\n\n    return new LocalPublish({\n      logger,\n      discovery,\n      legacyPathCasing,\n      staticDocsDir,\n    });\n  }\n\n  async getReadiness(): Promise<ReadinessResponse> {\n    return {\n      isAvailable: true,\n    };\n  }\n\n  async publish({\n    entity,\n    directory,\n  }: PublishRequest): Promise<PublishResponse> {\n    const entityNamespace = entity.metadata.namespace ?? 'default';\n    let publishDir: string;\n\n    try {\n      publishDir = this.staticEntityPathJoin(\n        entityNamespace,\n        entity.kind,\n        entity.metadata.name,\n      );\n    } catch (error) {\n      throw new ForwardedError(\n        `Unable to publish TechDocs site for entity: ${stringifyEntityRef(\n          entity,\n        )}`,\n        error,\n      );\n    }\n\n    if (!fs.existsSync(publishDir)) {\n      this.logger.info(`Could not find ${publishDir}, creating the directory.`);\n      fs.mkdirSync(publishDir, { recursive: true });\n    }\n\n    try {\n      await fs.copy(directory, publishDir);\n      this.logger.info(`Published site stored at ${publishDir}`);\n    } catch (error) {\n      this.logger.debug(\n        `Failed to copy docs from ${directory} to ${publishDir}`,\n      );\n      throw error;\n    }\n\n    // Generate publish response.\n    const techdocsApiUrl = await this.discovery.getBaseUrl('techdocs');\n    const publishedFilePaths = (await getFileTreeRecursively(publishDir)).map(\n      abs => {\n        return abs.split(`${this.staticDocsDir}/`)[1];\n      },\n    );\n\n    return {\n      remoteUrl: `${techdocsApiUrl}/static/docs/${encodeURIComponent(\n        entity.metadata.name,\n      )}`,\n      objects: publishedFilePaths,\n    };\n  }\n\n  async fetchTechDocsMetadata(\n    entityName: CompoundEntityRef,\n  ): Promise<TechDocsMetadata> {\n    let metadataPath: string;\n\n    try {\n      metadataPath = this.staticEntityPathJoin(\n        entityName.namespace,\n        entityName.kind,\n        entityName.name,\n        'techdocs_metadata.json',\n      );\n    } catch (err) {\n      throw new ForwardedError(\n        `Unexpected entity when fetching metadata: ${stringifyEntityRef(\n          entityName,\n        )}`,\n        err,\n      );\n    }\n\n    try {\n      return await fs.readJson(metadataPath);\n    } catch (err) {\n      throw new ForwardedError(\n        `Unable to read techdocs_metadata.json at ${metadataPath}. Error: ${err}`,\n        err,\n      );\n    }\n  }\n\n  docsRouter(): express.Handler {\n    const router = express.Router();\n\n    // Redirect middleware ensuring that requests to case-sensitive entity\n    // triplet paths are always sent to lower-case versions.\n    router.use((req, res, next) => {\n      // If legacy path casing is on, let the request immediately continue.\n      if (this.legacyPathCasing) {\n        return next();\n      }\n\n      // Generate a lower-case entity triplet path.\n      const [_, namespace, kind, name, ...rest] = req.path.split('/');\n\n      // Ignore non-triplet objects.\n      if (!namespace || !kind || !name) {\n        return next();\n      }\n\n      const newPath = [\n        _,\n        namespace.toLowerCase(),\n        kind.toLowerCase(),\n        name.toLowerCase(),\n        ...rest,\n      ].join('/');\n\n      // If there was no change, then let express.static() handle the request.\n      if (newPath === req.path) {\n        return next();\n      }\n\n      // Otherwise, redirect to the new path.\n      return res.redirect(301, req.baseUrl + newPath);\n    });\n    router.use(\n      express.static(this.staticDocsDir, {\n        // Handle content-type header the same as all other publishers.\n        setHeaders: (res, filePath) => {\n          const fileExtension = path.extname(filePath);\n          const headers = getHeadersForFileExtension(fileExtension);\n          for (const [header, value] of Object.entries(headers)) {\n            res.setHeader(header, value);\n          }\n        },\n      }),\n    );\n\n    return router;\n  }\n\n  async hasDocsBeenGenerated(entity: Entity): Promise<boolean> {\n    const namespace = entity.metadata.namespace ?? 'default';\n\n    // Check if the file exists\n    try {\n      const indexHtmlPath = this.staticEntityPathJoin(\n        namespace,\n        entity.kind,\n        entity.metadata.name,\n        'index.html',\n      );\n\n      await fs.access(indexHtmlPath, fs.constants.F_OK);\n\n      return true;\n    } catch (err) {\n      if (err.name === 'NotAllowedError') {\n        this.logger.error(\n          `Unexpected entity when checking if generated: ${stringifyEntityRef(\n            entity,\n          )}`,\n        );\n      }\n      return false;\n    }\n  }\n\n  /**\n   * This code will never run in practice. It is merely here to illustrate how\n   * to implement this method for other storage providers.\n   */\n  async migrateDocsCase({\n    removeOriginal = false,\n    concurrency = 25,\n  }): Promise<void> {\n    // Iterate through every file in the root of the publisher.\n    const files = await getFileTreeRecursively(this.staticDocsDir);\n    const limit = createLimiter(concurrency);\n\n    await Promise.all(\n      files.map(f =>\n        limit(async file => {\n          const relativeFile = file.replace(\n            `${this.staticDocsDir}${path.sep}`,\n            '',\n          );\n          const newFile = lowerCaseEntityTripletInStoragePath(relativeFile);\n\n          // If all parts are already lowercase, ignore.\n          if (relativeFile === newFile) {\n            return;\n          }\n\n          // Otherwise, copy or move the file.\n          await new Promise<void>(resolve => {\n            const migrate = removeOriginal ? fs.move : fs.copyFile;\n            this.logger.verbose(`Migrating ${relativeFile}`);\n            migrate(file, newFile, err => {\n              if (err) {\n                this.logger.warn(\n                  `Unable to migrate ${relativeFile}: ${err.message}`,\n                );\n              }\n              resolve();\n            });\n          });\n        }, f),\n      ),\n    );\n  }\n\n  /**\n   * Utility wrapper around path.join(), used to control legacy case logic.\n   */\n  protected staticEntityPathJoin(...allParts: string[]): string {\n    let staticEntityPath = this.staticDocsDir;\n\n    allParts\n      .map(part => part.split(path.sep))\n      .flat()\n      .forEach((part, index) => {\n        // Respect legacy path casing when operating on namespace, kind, or name.\n        if (index < 3) {\n          staticEntityPath = resolveSafeChildPath(\n            staticEntityPath,\n            this.legacyPathCasing ? part : part.toLowerCase(),\n          );\n          return;\n        }\n\n        // Otherwise, respect the provided case.\n        staticEntityPath = resolveSafeChildPath(staticEntityPath, part);\n      });\n\n    return staticEntityPath;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Entity, CompoundEntityRef } from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport express from 'express';\nimport fs from 'fs-extra';\nimport JSON5 from 'json5';\nimport createLimiter from 'p-limit';\nimport path from 'path';\nimport { SwiftClient } from '@trendyol-js/openstack-swift-sdk';\nimport { NotFound } from '@trendyol-js/openstack-swift-sdk/lib/types';\nimport { Stream, Readable } from 'stream';\nimport { Logger } from 'winston';\nimport {\n  getFileTreeRecursively,\n  getHeadersForFileExtension,\n  lowerCaseEntityTripletInStoragePath,\n} from './helpers';\nimport {\n  PublisherBase,\n  PublishRequest,\n  PublishResponse,\n  ReadinessResponse,\n  TechDocsMetadata,\n} from './types';\nimport { assertError, ForwardedError } from '@backstage/errors';\n\nconst streamToBuffer = (stream: Stream | Readable): Promise<Buffer> => {\n  return new Promise((resolve, reject) => {\n    try {\n      const chunks: any[] = [];\n      stream.on('data', chunk => chunks.push(chunk));\n      stream.on('error', reject);\n      stream.on('end', () => resolve(Buffer.concat(chunks)));\n    } catch (e) {\n      throw new ForwardedError('Unable to parse the response data', e);\n    }\n  });\n};\n\nconst bufferToStream = (buffer: Buffer): Readable => {\n  const stream = new Readable();\n  stream.push(buffer);\n  stream.push(null);\n  return stream;\n};\n\nexport class OpenStackSwiftPublish implements PublisherBase {\n  private readonly storageClient: SwiftClient;\n  private readonly containerName: string;\n  private readonly logger: Logger;\n\n  constructor(options: {\n    storageClient: SwiftClient;\n    containerName: string;\n    logger: Logger;\n  }) {\n    this.storageClient = options.storageClient;\n    this.containerName = options.containerName;\n    this.logger = options.logger;\n  }\n\n  static fromConfig(config: Config, logger: Logger): PublisherBase {\n    let containerName = '';\n    try {\n      containerName = config.getString(\n        'techdocs.publisher.openStackSwift.containerName',\n      );\n    } catch (error) {\n      throw new Error(\n        \"Since techdocs.publisher.type is set to 'openStackSwift' in your app config, \" +\n          'techdocs.publisher.openStackSwift.containerName is required.',\n      );\n    }\n\n    const openStackSwiftConfig = config.getConfig(\n      'techdocs.publisher.openStackSwift',\n    );\n\n    const storageClient = new SwiftClient({\n      authEndpoint: openStackSwiftConfig.getString('authUrl'),\n      swiftEndpoint: openStackSwiftConfig.getString('swiftUrl'),\n      credentialId: openStackSwiftConfig.getString('credentials.id'),\n      secret: openStackSwiftConfig.getString('credentials.secret'),\n    });\n\n    return new OpenStackSwiftPublish({ storageClient, containerName, logger });\n  }\n\n  /*\n   * Check if the defined container exists. Being able to connect means the configuration is good\n   * and the storage client will work.\n   */\n  async getReadiness(): Promise<ReadinessResponse> {\n    try {\n      const container = await this.storageClient.getContainerMetadata(\n        this.containerName,\n      );\n\n      if (!(container instanceof NotFound)) {\n        this.logger.info(\n          `Successfully connected to the OpenStack Swift container ${this.containerName}.`,\n        );\n        return {\n          isAvailable: true,\n        };\n      }\n      this.logger.error(\n        `Could not retrieve metadata about the OpenStack Swift container ${this.containerName}. ` +\n          'Make sure the container exists. Also make sure that authentication is setup either by ' +\n          'explicitly defining credentials and region in techdocs.publisher.openStackSwift in app config or ' +\n          'by using environment variables. Refer to https://backstage.io/docs/features/techdocs/using-cloud-storage',\n      );\n      return {\n        isAvailable: false,\n      };\n    } catch (err) {\n      assertError(err);\n      this.logger.error(`from OpenStack client library: ${err.message}`);\n      return {\n        isAvailable: false,\n      };\n    }\n  }\n\n  /**\n   * Upload all the files from the generated `directory` to the OpenStack Swift container.\n   * Directory structure used in the bucket is - entityNamespace/entityKind/entityName/index.html\n   */\n  async publish({\n    entity,\n    directory,\n  }: PublishRequest): Promise<PublishResponse> {\n    try {\n      const objects: string[] = [];\n\n      // Note: OpenStack Swift manages creation of parent directories if they do not exist.\n      // So collecting path of only the files is good enough.\n      const allFilesToUpload = await getFileTreeRecursively(directory);\n      const limiter = createLimiter(10);\n      const uploadPromises: Array<Promise<unknown>> = [];\n      for (const filePath of allFilesToUpload) {\n        // Remove the absolute path prefix of the source directory\n        // Path of all files to upload, relative to the root of the source directory\n        // e.g. ['index.html', 'sub-page/index.html', 'assets/images/favicon.png']\n        const relativeFilePath = path.relative(directory, filePath);\n        // Convert destination file path to a POSIX path for uploading.\n        // Swift expects / as path separator and relativeFilePath will contain \\\\ on Windows.\n        // https://docs.openstack.org/python-openstackclient/pike/cli/man/openstack.html\n        const relativeFilePathPosix = relativeFilePath\n          .split(path.sep)\n          .join(path.posix.sep);\n\n        // The / delimiter is intentional since it represents the cloud storage and not the local file system.\n        const entityRootDir = `${entity.metadata.namespace}/${entity.kind}/${entity.metadata.name}`;\n        const destination = `${entityRootDir}/${relativeFilePathPosix}`; // Swift container file relative path\n        objects.push(destination);\n\n        // Rate limit the concurrent execution of file uploads to batches of 10 (per publish)\n        const uploadFile = limiter(async () => {\n          const fileBuffer = await fs.readFile(filePath);\n          const stream = bufferToStream(fileBuffer);\n          return this.storageClient.upload(\n            this.containerName,\n            destination,\n            stream,\n          );\n        });\n        uploadPromises.push(uploadFile);\n      }\n      await Promise.all(uploadPromises);\n      this.logger.info(\n        `Successfully uploaded all the generated files for Entity ${entity.metadata.name}. Total number of files: ${allFilesToUpload.length}`,\n      );\n      return { objects };\n    } catch (e) {\n      const errorMessage = `Unable to upload file(s) to OpenStack Swift. ${e}`;\n      this.logger.error(errorMessage);\n      throw new Error(errorMessage);\n    }\n  }\n\n  async fetchTechDocsMetadata(\n    entityName: CompoundEntityRef,\n  ): Promise<TechDocsMetadata> {\n    return await new Promise<TechDocsMetadata>(async (resolve, reject) => {\n      const entityRootDir = `${entityName.namespace}/${entityName.kind}/${entityName.name}`;\n\n      const downloadResponse = await this.storageClient.download(\n        this.containerName,\n        `${entityRootDir}/techdocs_metadata.json`,\n      );\n\n      if (!(downloadResponse instanceof NotFound)) {\n        const stream = downloadResponse.data;\n        try {\n          const techdocsMetadataJson = await streamToBuffer(stream);\n          if (!techdocsMetadataJson) {\n            throw new Error(\n              `Unable to parse the techdocs metadata file ${entityRootDir}/techdocs_metadata.json.`,\n            );\n          }\n\n          const techdocsMetadata = JSON5.parse(\n            techdocsMetadataJson.toString('utf-8'),\n          );\n\n          resolve(techdocsMetadata);\n        } catch (err) {\n          assertError(err);\n          this.logger.error(err.message);\n          reject(new Error(err.message));\n        }\n      } else {\n        reject({\n          message: `TechDocs metadata fetch failed, The file /rootDir/${entityRootDir}/techdocs_metadata.json does not exist !`,\n        });\n      }\n    });\n  }\n\n  /**\n   * Express route middleware to serve static files on a route in techdocs-backend.\n   */\n  docsRouter(): express.Handler {\n    return async (req, res) => {\n      // Decode and trim the leading forward slash\n      // filePath example - /default/Component/documented-component/index.html\n      const filePath = decodeURI(req.path.replace(/^\\//, ''));\n\n      // Files with different extensions (CSS, HTML) need to be served with different headers\n      const fileExtension = path.extname(filePath);\n      const responseHeaders = getHeadersForFileExtension(fileExtension);\n\n      const downloadResponse = await this.storageClient.download(\n        this.containerName,\n        filePath,\n      );\n\n      if (!(downloadResponse instanceof NotFound)) {\n        const stream = downloadResponse.data;\n\n        try {\n          // Inject response headers\n          for (const [headerKey, headerValue] of Object.entries(\n            responseHeaders,\n          )) {\n            res.setHeader(headerKey, headerValue);\n          }\n\n          res.send(await streamToBuffer(stream));\n        } catch (err) {\n          assertError(err);\n          this.logger.warn(\n            `TechDocs OpenStack swift router failed to serve content from container ${this.containerName} at path ${filePath}: ${err.message}`,\n          );\n          res.status(404).send('File Not Found');\n        }\n      } else {\n        this.logger.warn(\n          `TechDocs OpenStack swift router failed to serve content from container ${this.containerName} at path ${filePath}: Not found`,\n        );\n        res.status(404).send('File Not Found');\n      }\n    };\n  }\n\n  /**\n   * A helper function which checks if index.html of an Entity's docs site is available. This\n   * can be used to verify if there are any pre-generated docs available to serve.\n   */\n  async hasDocsBeenGenerated(entity: Entity): Promise<boolean> {\n    const entityRootDir = `${entity.metadata.namespace}/${entity.kind}/${entity.metadata.name}`;\n    try {\n      const fileResponse = await this.storageClient.getMetadata(\n        this.containerName,\n        `${entityRootDir}/index.html`,\n      );\n\n      if (!(fileResponse instanceof NotFound)) {\n        return true;\n      }\n      return false;\n    } catch (err) {\n      assertError(err);\n      this.logger.warn(err.message);\n      return false;\n    }\n  }\n\n  async migrateDocsCase({\n    removeOriginal = false,\n    concurrency = 25,\n  }): Promise<void> {\n    // Iterate through every file in the root of the publisher.\n    const allObjects = await this.getAllObjectsFromContainer();\n    const limiter = createLimiter(concurrency);\n    await Promise.all(\n      allObjects.map(f =>\n        limiter(async file => {\n          let newPath;\n          try {\n            newPath = lowerCaseEntityTripletInStoragePath(file);\n          } catch (e) {\n            assertError(e);\n            this.logger.warn(e.message);\n            return;\n          }\n\n          // If all parts are already lowercase, ignore.\n          if (file === newPath) {\n            return;\n          }\n\n          try {\n            this.logger.verbose(`Migrating ${file} to ${newPath}`);\n            await this.storageClient.copy(\n              this.containerName,\n              file,\n              this.containerName,\n              newPath,\n            );\n            if (removeOriginal) {\n              await this.storageClient.delete(this.containerName, file);\n            }\n          } catch (e) {\n            assertError(e);\n            this.logger.warn(`Unable to migrate ${file}: ${e.message}`);\n          }\n        }, f),\n      ),\n    );\n  }\n\n  /**\n   * Returns a list of all object keys from the configured container.\n   */\n  protected async getAllObjectsFromContainer(\n    { prefix } = { prefix: '' },\n  ): Promise<string[]> {\n    let objects: string[] = [];\n    const OSS_MAX_LIMIT = Math.pow(2, 31) - 1;\n\n    const allObjects = await this.storageClient.list(\n      this.containerName,\n      prefix,\n      OSS_MAX_LIMIT,\n    );\n    objects = allObjects.map((object: any) => object.name);\n\n    return objects;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { AwsS3Publish } from './awsS3';\nimport { AzureBlobStoragePublish } from './azureBlobStorage';\nimport { GoogleGCSPublish } from './googleStorage';\nimport { LocalPublish } from './local';\nimport { OpenStackSwiftPublish } from './openStackSwift';\nimport { PublisherFactory, PublisherBase, PublisherType } from './types';\n\n/**\n * Factory class to create a TechDocs publisher based on defined publisher type in app config.\n * Uses `techdocs.publisher.type`.\n * @public\n */\nexport class Publisher {\n  /**\n   * Returns a instance of TechDocs publisher\n   * @param config - A Backstage configuration\n   * @param options - Options for configuring the publisher factory\n   */\n  static async fromConfig(\n    config: Config,\n    { logger, discovery }: PublisherFactory,\n  ): Promise<PublisherBase> {\n    const publisherType = (config.getOptionalString(\n      'techdocs.publisher.type',\n    ) ?? 'local') as PublisherType;\n\n    switch (publisherType) {\n      case 'googleGcs':\n        logger.info('Creating Google Storage Bucket publisher for TechDocs');\n        return GoogleGCSPublish.fromConfig(config, logger);\n      case 'awsS3':\n        logger.info('Creating AWS S3 Bucket publisher for TechDocs');\n        return AwsS3Publish.fromConfig(config, logger);\n      case 'azureBlobStorage':\n        logger.info(\n          'Creating Azure Blob Storage Container publisher for TechDocs',\n        );\n        return AzureBlobStoragePublish.fromConfig(config, logger);\n      case 'openStackSwift':\n        logger.info(\n          'Creating OpenStack Swift Container publisher for TechDocs',\n        );\n        return OpenStackSwiftPublish.fromConfig(config, logger);\n      case 'local':\n        logger.info('Creating Local publisher for TechDocs');\n        return LocalPublish.fromConfig(config, logger, discovery);\n      default:\n        logger.info('Creating Local publisher for TechDocs');\n        return LocalPublish.fromConfig(config, logger, discovery);\n    }\n  }\n}\n"],"names":["mime","recursiveReadDir","path","DEFAULT_NAMESPACE","createLimiter","PassThrough","spawn","gitUrlParse","DEFAULT_SCHEMA","Type","fs","ForwardedError","yaml","isChildPath","resolvePath","assertError","ScmIntegrations","InputError","parseLocationRef","getEntitySourceLocation","resolveSafeChildPath","streamToBuffer","aws","Credentials","JSON5","StorageSharedKeyCredential","DefaultAzureCredential","BlobServiceClient","platformPath","limiterFactory","Writable","Storage","resolvePackagePath","os","stringifyEntityRef","express","stream","Readable","SwiftClient","NotFound"],"mappings":"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"}