{"version":3,"file":"index.cjs.js","sources":["../src/logging/formats.ts","../src/util/escapeRegExp.ts","../src/logging/rootLogger.ts","../src/logging/voidLogger.ts","../src/cache/CacheClient.ts","../src/cache/NoStore.ts","../src/cache/CacheManager.ts","../src/urls.ts","../src/config.ts","../src/context/AbortContext.ts","../src/context/RootContext.ts","../src/context/ValueContext.ts","../src/context/Contexts.ts","../src/database/config.ts","../src/database/connectors/defaultNameOverride.ts","../src/database/connectors/mysql.ts","../src/database/connectors/defaultSchemaOverride.ts","../src/database/connectors/postgres.ts","../src/database/connectors/sqlite3.ts","../src/database/connection.ts","../src/database/DatabaseManager.ts","../src/database/util.ts","../src/service/lib/config.ts","../src/hot.ts","../src/middleware/errorHandler.ts","../src/middleware/notFoundHandler.ts","../src/middleware/requestLoggingHandler.ts","../src/middleware/statusCheckHandler.ts","../src/service/lib/hostFactory.ts","../src/service/lib/ServiceBuilderImpl.ts","../src/discovery/SingleHostDiscovery.ts","../src/paths.ts","../src/reading/ReadUrlResponseFactory.ts","../src/reading/AzureUrlReader.ts","../src/reading/BitbucketCloudUrlReader.ts","../src/reading/BitbucketUrlReader.ts","../src/reading/BitbucketServerUrlReader.ts","../src/scm/git.ts","../src/reading/GerritUrlReader.ts","../src/reading/GithubUrlReader.ts","../src/reading/tree/util.ts","../src/reading/GitlabUrlReader.ts","../src/reading/AwsS3UrlReader.ts","../src/reading/FetchUrlReader.ts","../src/reading/UrlReaderPredicateMux.ts","../src/reading/tree/TarArchiveResponse.ts","../src/reading/tree/ZipArchiveResponse.ts","../src/reading/tree/ReadableArrayResponse.ts","../src/reading/tree/ReadTreeResponseFactory.ts","../src/reading/GoogleGcsUrlReader.ts","../src/reading/UrlReaders.ts","../src/service/createServiceBuilder.ts","../src/service/createStatusCheckRouter.ts","../src/tokens/ServerTokenManager.ts","../src/util/DockerContainerRunner.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as winston from 'winston';\nimport { TransformableInfo } from 'logform';\n\nconst coloredTemplate = (info: TransformableInfo) => {\n  const { timestamp, level, message, plugin, service, ...fields } = info;\n  const colorizer = winston.format.colorize();\n  const prefix = plugin || service;\n  const timestampColor = colorizer.colorize('timestamp', timestamp);\n  const prefixColor = colorizer.colorize('prefix', prefix);\n\n  const extraFields = Object.entries(fields)\n    .map(([key, value]) => `${colorizer.colorize('field', `${key}`)}=${value}`)\n    .join(' ');\n\n  return `${timestampColor} ${prefixColor} ${level} ${message} ${extraFields}`;\n};\n\n/**\n * A logging format that adds coloring to console output.\n *\n * @public\n */\nexport const coloredFormat = winston.format.combine(\n  winston.format.timestamp(),\n  winston.format.colorize({\n    colors: { timestamp: 'dim', prefix: 'blue', field: 'cyan', debug: 'grey' },\n  }),\n  winston.format.printf(coloredTemplate),\n);\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Escapes a given string to be used inside a RegExp.\n *\n * Taken from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\n */\nexport const escapeRegExp = (text: string) => {\n  return text.replace(/[.*+?^${}(\\)|[\\]\\\\]/g, '\\\\$&');\n};\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { merge } from 'lodash';\nimport * as winston from 'winston';\nimport { LoggerOptions } from 'winston';\nimport { coloredFormat } from './formats';\nimport { escapeRegExp } from '../util/escapeRegExp';\n\nlet rootLogger: winston.Logger;\nlet redactionRegExp: RegExp | undefined;\n\n/**\n * Gets the current root logger.\n *\n * @public\n */\nexport function getRootLogger(): winston.Logger {\n  return rootLogger;\n}\n\n/**\n * Sets a completely custom default \"root\" logger.\n *\n * @remarks\n *\n * This is the logger instance that will be the foundation for all other logger\n * instances passed to plugins etc, in a given backend.\n *\n * Only use this if you absolutely need to make a completely custom logger.\n * Normally if you want to make light adaptations to the default logger\n * behavior, you would instead call {@link createRootLogger}.\n *\n * @public\n */\nexport function setRootLogger(newLogger: winston.Logger) {\n  rootLogger = newLogger;\n}\n\nexport function setRootLoggerRedactionList(redactionList: string[]) {\n  // Exclude secrets that are empty or just one character in length. These\n  // typically mean that you are running local dev or tests, or using the\n  // --lax flag which sets things to just 'x'. So exclude those.\n  const filtered = redactionList.filter(r => r.length > 1);\n\n  if (filtered.length) {\n    redactionRegExp = new RegExp(\n      `(${filtered.map(escapeRegExp).join('|')})`,\n      'g',\n    );\n  } else {\n    redactionRegExp = undefined;\n  }\n}\n\n/**\n * A winston formatting function that finds occurrences of filteredKeys\n * and replaces them with the corresponding identifier.\n *\n * @public\n */\nexport function redactWinstonLogLine(info: winston.Logform.TransformableInfo) {\n  // TODO(hhogg): The logger is created before the config is loaded, because the\n  // logger is needed in the config loader. There is a risk of a secret being\n  // logged out during the config loading stage.\n  // TODO(freben): Added a check that info.message actually was a string,\n  // because it turned out that this was not necessarily guaranteed.\n  // https://github.com/backstage/backstage/issues/8306\n  if (redactionRegExp && typeof info.message === 'string') {\n    info.message = info.message.replace(redactionRegExp, '[REDACTED]');\n  }\n\n  return info;\n}\n\n/**\n * Creates a default \"root\" logger. This also calls {@link setRootLogger} under\n * the hood.\n *\n * @remarks\n *\n * This is the logger instance that will be the foundation for all other logger\n * instances passed to plugins etc, in a given backend.\n *\n * @public\n */\nexport function createRootLogger(\n  options: winston.LoggerOptions = {},\n  env = process.env,\n): winston.Logger {\n  const logger = winston.createLogger(\n    merge<LoggerOptions, LoggerOptions>(\n      {\n        level: env.LOG_LEVEL || 'info',\n        format: winston.format.combine(\n          winston.format(redactWinstonLogLine)(),\n          env.NODE_ENV === 'production' ? winston.format.json() : coloredFormat,\n        ),\n        defaultMeta: {\n          service: 'backstage',\n        },\n        transports: [\n          new winston.transports.Console({\n            silent: env.JEST_WORKER_ID !== undefined && !env.LOG_LEVEL,\n          }),\n        ],\n      },\n      options,\n    ),\n  );\n\n  setRootLogger(logger);\n\n  return logger;\n}\n\nrootLogger = createRootLogger();\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as winston from 'winston';\n\n/**\n * A logger that just throws away all messages.\n *\n * @public\n */\nexport function getVoidLogger(): winston.Logger {\n  return winston.createLogger({\n    transports: [new winston.transports.Console({ silent: true })],\n  });\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { JsonValue } from '@backstage/types';\nimport { createHash } from 'crypto';\nimport Keyv from 'keyv';\n\ntype CacheClientArgs = {\n  client: Keyv;\n};\n\n/**\n * Options passed to {@link CacheClient.set}.\n *\n * @public\n */\nexport type CacheClientSetOptions = {\n  /**\n   * Optional TTL in milliseconds. Defaults to the TTL provided when the client\n   * was set up (or no TTL if none are provided).\n   */\n  ttl?: number;\n};\n\n/**\n * A pre-configured, storage agnostic cache client suitable for use by\n * Backstage plugins.\n *\n * @public\n */\nexport interface CacheClient {\n  /**\n   * Reads data from a cache store for the given key. If no data was found,\n   * returns undefined.\n   */\n  get(key: string): Promise<JsonValue | undefined>;\n\n  /**\n   * Writes the given data to a cache store, associated with the given key. An\n   * optional TTL may also be provided, otherwise it defaults to the TTL that\n   * was provided when the client was instantiated.\n   */\n  set(\n    key: string,\n    value: JsonValue,\n    options?: CacheClientSetOptions,\n  ): Promise<void>;\n\n  /**\n   * Removes the given key from the cache store.\n   */\n  delete(key: string): Promise<void>;\n}\n\n/**\n * A basic, concrete implementation of the CacheClient, suitable for almost\n * all uses in Backstage.\n */\nexport class DefaultCacheClient implements CacheClient {\n  private readonly client: Keyv;\n\n  constructor({ client }: CacheClientArgs) {\n    this.client = client;\n  }\n\n  async get(key: string): Promise<JsonValue | undefined> {\n    const k = this.getNormalizedKey(key);\n    return await this.client.get(k);\n  }\n\n  async set(\n    key: string,\n    value: JsonValue,\n    opts: CacheClientSetOptions = {},\n  ): Promise<void> {\n    const k = this.getNormalizedKey(key);\n    await this.client.set(k, value, opts.ttl);\n  }\n\n  async delete(key: string): Promise<void> {\n    const k = this.getNormalizedKey(key);\n    await this.client.delete(k);\n  }\n\n  /**\n   * Ensures keys are well-formed for any/all cache stores.\n   */\n  private getNormalizedKey(candidateKey: string): string {\n    // Remove potentially invalid characters.\n    const wellFormedKey = Buffer.from(candidateKey).toString('base64');\n\n    // Memcache in particular doesn't do well with keys > 250 bytes.\n    // Padded because a plugin ID is also prepended to the key.\n    if (wellFormedKey.length < 200) {\n      return wellFormedKey;\n    }\n\n    return createHash('md5').update(candidateKey).digest('base64');\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Storage class compatible with Keyv which always results in a no-op. This is\n * used when no cache store is configured in a Backstage backend instance.\n */\nexport class NoStore extends Map<string, any> {\n  clear(): void {\n    return;\n  }\n\n  delete(_key: string): boolean {\n    return false;\n  }\n\n  get(_key: string) {\n    return;\n  }\n\n  has(_key: string): boolean {\n    return false;\n  }\n\n  set(_key: string, _value: any): this {\n    return this;\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport Keyv from 'keyv';\n// @ts-expect-error\nimport KeyvMemcache from 'keyv-memcache';\nimport KeyvRedis from '@keyv/redis';\nimport { Logger } from 'winston';\nimport { getRootLogger } from '../logging';\nimport { DefaultCacheClient, CacheClient } from './CacheClient';\nimport { NoStore } from './NoStore';\nimport { CacheManagerOptions, PluginCacheManager } from './types';\n\n/**\n * Implements a Cache Manager which will automatically create new cache clients\n * for plugins when requested. All requested cache clients are created with the\n * connection details provided.\n *\n * @public\n */\nexport class CacheManager {\n  /**\n   * Keys represent supported `backend.cache.store` values, mapped to factories\n   * that return Keyv instances appropriate to the store.\n   */\n  private readonly storeFactories = {\n    redis: this.getRedisClient,\n    memcache: this.getMemcacheClient,\n    memory: this.getMemoryClient,\n    none: this.getNoneClient,\n  };\n\n  /**\n   * Shared memory store for the in-memory cache client. Sharing the same Map\n   * instance ensures get/set/delete operations hit the same store, regardless\n   * of where/when a client is instantiated.\n   */\n  private readonly memoryStore = new Map();\n\n  private readonly logger: Logger;\n  private readonly store: keyof CacheManager['storeFactories'];\n  private readonly connection: string;\n  private readonly errorHandler: CacheManagerOptions['onError'];\n\n  /**\n   * Creates a new {@link CacheManager} instance by reading from the `backend`\n   * config section, specifically the `.cache` key.\n   *\n   * @param config - The loaded application configuration.\n   */\n  static fromConfig(\n    config: Config,\n    options: CacheManagerOptions = {},\n  ): CacheManager {\n    // If no `backend.cache` config is provided, instantiate the CacheManager\n    // with a \"NoStore\" cache client.\n    const store = config.getOptionalString('backend.cache.store') || 'none';\n    const connectionString =\n      config.getOptionalString('backend.cache.connection') || '';\n    const logger = (options.logger || getRootLogger()).child({\n      type: 'cacheManager',\n    });\n    return new CacheManager(store, connectionString, logger, options.onError);\n  }\n\n  private constructor(\n    store: string,\n    connectionString: string,\n    logger: Logger,\n    errorHandler: CacheManagerOptions['onError'],\n  ) {\n    if (!this.storeFactories.hasOwnProperty(store)) {\n      throw new Error(`Unknown cache store: ${store}`);\n    }\n    this.logger = logger;\n    this.store = store as keyof CacheManager['storeFactories'];\n    this.connection = connectionString;\n    this.errorHandler = errorHandler;\n  }\n\n  /**\n   * Generates a PluginCacheManager for consumption by plugins.\n   *\n   * @param pluginId - The plugin that the cache manager should be created for.\n   *        Plugin names should be unique.\n   */\n  forPlugin(pluginId: string): PluginCacheManager {\n    return {\n      getClient: (opts = {}): CacheClient => {\n        const concreteClient = this.getClientWithTtl(pluginId, opts.defaultTtl);\n\n        // Always provide an error handler to avoid killing the process.\n        concreteClient.on('error', (err: Error) => {\n          // In all cases, just log the error.\n          this.logger.error(err);\n\n          // Invoke any custom error handler if provided.\n          if (typeof this.errorHandler === 'function') {\n            this.errorHandler(err);\n          }\n        });\n\n        return new DefaultCacheClient({\n          client: concreteClient,\n        });\n      },\n    };\n  }\n\n  private getClientWithTtl(pluginId: string, ttl: number | undefined): Keyv {\n    return this.storeFactories[this.store].call(this, pluginId, ttl);\n  }\n\n  private getRedisClient(\n    pluginId: string,\n    defaultTtl: number | undefined,\n  ): Keyv {\n    return new Keyv({\n      namespace: pluginId,\n      ttl: defaultTtl,\n      store: new KeyvRedis(this.connection),\n    });\n  }\n\n  private getMemcacheClient(\n    pluginId: string,\n    defaultTtl: number | undefined,\n  ): Keyv {\n    return new Keyv({\n      namespace: pluginId,\n      ttl: defaultTtl,\n      store: new KeyvMemcache(this.connection),\n    });\n  }\n\n  private getMemoryClient(\n    pluginId: string,\n    defaultTtl: number | undefined,\n  ): Keyv {\n    return new Keyv({\n      namespace: pluginId,\n      ttl: defaultTtl,\n      store: this.memoryStore,\n    });\n  }\n\n  private getNoneClient(pluginId: string): Keyv {\n    return new Keyv({\n      namespace: pluginId,\n      store: new NoStore(),\n    });\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function isValidUrl(url: string): boolean {\n  try {\n    // eslint-disable-next-line no-new\n    new URL(url);\n    return true;\n  } catch {\n    return false;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { resolve as resolvePath } from 'path';\nimport parseArgs from 'minimist';\nimport { Logger } from 'winston';\nimport { findPaths } from '@backstage/cli-common';\nimport {\n  loadConfigSchema,\n  loadConfig,\n  ConfigSchema,\n  ConfigTarget,\n  LoadConfigOptionsRemote,\n} from '@backstage/config-loader';\nimport { AppConfig, Config, ConfigReader } from '@backstage/config';\nimport { JsonValue } from '@backstage/types';\nimport { getPackages } from '@manypkg/get-packages';\n\nimport { isValidUrl } from './urls';\n\nimport { setRootLoggerRedactionList } from './logging/rootLogger';\n\n// Fetch the schema and get all the secrets to pass to the rootLogger for redaction\nconst updateRedactionList = (\n  schema: ConfigSchema,\n  configs: AppConfig[],\n  logger: Logger,\n) => {\n  const secretAppConfigs = schema.process(configs, {\n    visibility: ['secret'],\n    ignoreSchemaErrors: true,\n  });\n  const secretConfig = ConfigReader.fromConfigs(secretAppConfigs);\n  const values = new Set<string>();\n  const data = secretConfig.get();\n\n  JSON.parse(\n    JSON.stringify(data),\n    (_, v) => typeof v === 'string' && values.add(v),\n  );\n\n  logger.info(\n    `${values.size} secret${\n      values.size > 1 ? 's' : ''\n    } found in the config which will be redacted`,\n  );\n\n  setRootLoggerRedactionList(Array.from(values));\n};\n\nexport class ObservableConfigProxy implements Config {\n  private config: Config = new ConfigReader({});\n\n  private readonly subscribers: (() => void)[] = [];\n\n  constructor(\n    private readonly logger: Logger,\n    private readonly parent?: ObservableConfigProxy,\n    private parentKey?: string,\n  ) {\n    if (parent && !parentKey) {\n      throw new Error('parentKey is required if parent is set');\n    }\n  }\n\n  setConfig(config: Config) {\n    if (this.parent) {\n      throw new Error('immutable');\n    }\n    this.config = config;\n    for (const subscriber of this.subscribers) {\n      try {\n        subscriber();\n      } catch (error) {\n        this.logger.error(`Config subscriber threw error, ${error}`);\n      }\n    }\n  }\n\n  subscribe(onChange: () => void): { unsubscribe: () => void } {\n    if (this.parent) {\n      return this.parent.subscribe(onChange);\n    }\n\n    this.subscribers.push(onChange);\n    return {\n      unsubscribe: () => {\n        const index = this.subscribers.indexOf(onChange);\n        if (index >= 0) {\n          this.subscribers.splice(index, 1);\n        }\n      },\n    };\n  }\n\n  private select(required: true): Config;\n  private select(required: false): Config | undefined;\n  private select(required: boolean): Config | undefined {\n    if (this.parent && this.parentKey) {\n      if (required) {\n        return this.parent.select(true).getConfig(this.parentKey);\n      }\n      return this.parent.select(false)?.getOptionalConfig(this.parentKey);\n    }\n\n    return this.config;\n  }\n\n  has(key: string): boolean {\n    return this.select(false)?.has(key) ?? false;\n  }\n  keys(): string[] {\n    return this.select(false)?.keys() ?? [];\n  }\n  get<T = JsonValue>(key?: string): T {\n    return this.select(true).get(key);\n  }\n  getOptional<T = JsonValue>(key?: string): T | undefined {\n    return this.select(false)?.getOptional(key);\n  }\n  getConfig(key: string): Config {\n    return new ObservableConfigProxy(this.logger, this, key);\n  }\n  getOptionalConfig(key: string): Config | undefined {\n    if (this.select(false)?.has(key)) {\n      return new ObservableConfigProxy(this.logger, this, key);\n    }\n    return undefined;\n  }\n  getConfigArray(key: string): Config[] {\n    return this.select(true).getConfigArray(key);\n  }\n  getOptionalConfigArray(key: string): Config[] | undefined {\n    return this.select(false)?.getOptionalConfigArray(key);\n  }\n  getNumber(key: string): number {\n    return this.select(true).getNumber(key);\n  }\n  getOptionalNumber(key: string): number | undefined {\n    return this.select(false)?.getOptionalNumber(key);\n  }\n  getBoolean(key: string): boolean {\n    return this.select(true).getBoolean(key);\n  }\n  getOptionalBoolean(key: string): boolean | undefined {\n    return this.select(false)?.getOptionalBoolean(key);\n  }\n  getString(key: string): string {\n    return this.select(true).getString(key);\n  }\n  getOptionalString(key: string): string | undefined {\n    return this.select(false)?.getOptionalString(key);\n  }\n  getStringArray(key: string): string[] {\n    return this.select(true).getStringArray(key);\n  }\n  getOptionalStringArray(key: string): string[] | undefined {\n    return this.select(false)?.getOptionalStringArray(key);\n  }\n}\n\n// A global used to ensure that only a single file watcher is active at a time.\nlet currentCancelFunc: () => void;\n\n/**\n * Load configuration for a Backend.\n *\n * This function should only be called once, during the initialization of the backend.\n *\n * @public\n */\nexport async function loadBackendConfig(options: {\n  logger: Logger;\n  // process.argv or any other overrides\n  remote?: LoadConfigOptionsRemote;\n  argv: string[];\n}): Promise<Config> {\n  const args = parseArgs(options.argv);\n\n  const configTargets: ConfigTarget[] = [args.config ?? []]\n    .flat()\n    .map(arg => (isValidUrl(arg) ? { url: arg } : { path: resolvePath(arg) }));\n\n  /* eslint-disable-next-line no-restricted-syntax */\n  const paths = findPaths(__dirname);\n\n  // TODO(hhogg): This is fetching _all_ of the packages of the monorepo\n  // in order to find the secrets for redactions, however we only care about\n  // the backend ones, we need to find a way to exclude the frontend packages.\n  const { packages } = await getPackages(paths.targetDir);\n  const schema = await loadConfigSchema({\n    dependencies: packages.map(p => p.packageJson.name),\n  });\n\n  const config = new ObservableConfigProxy(options.logger);\n  const { appConfigs } = await loadConfig({\n    configRoot: paths.targetRoot,\n    configTargets: configTargets,\n    remote: options.remote,\n    watch: {\n      onChange(newConfigs) {\n        options.logger.info(\n          `Reloaded config from ${newConfigs.map(c => c.context).join(', ')}`,\n        );\n\n        config.setConfig(ConfigReader.fromConfigs(newConfigs));\n      },\n      stopSignal: new Promise(resolve => {\n        if (currentCancelFunc) {\n          currentCancelFunc();\n        }\n        currentCancelFunc = resolve;\n\n        // For reloads of this module we need to use a dispose handler rather than the global.\n        if (module.hot) {\n          module.hot.addDisposeHandler(resolve);\n        }\n      }),\n    },\n  });\n\n  options.logger.info(\n    `Loaded config from ${appConfigs.map(c => c.context).join(', ')}`,\n  );\n\n  config.setConfig(ConfigReader.fromConfigs(appConfigs));\n\n  // Subscribe to config changes and update the redaction list for logging\n  updateRedactionList(schema, appConfigs, options.logger);\n  config.subscribe(() =>\n    updateRedactionList(schema, appConfigs, options.logger),\n  );\n\n  return config;\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AbortController, AbortSignal } from 'node-abort-controller';\nimport { Context } from './types';\n\n/**\n * A context that implements various abort related functionality.\n */\nexport class AbortContext implements Context {\n  /**\n   * Abort either when the parent aborts, or after the given timeout has\n   * expired.\n   *\n   * @param ctx - The parent context\n   * @param timeout - A timeout value, in milliseconds\n   * @returns A new context\n   */\n  static forTimeoutMillis(ctx: Context, timeout: number): Context {\n    const desiredDeadline = new Date(Date.now() + timeout);\n    const actualDeadline =\n      ctx.deadline && ctx.deadline < desiredDeadline\n        ? ctx.deadline\n        : desiredDeadline;\n\n    if (ctx.abortSignal.aborted) {\n      if (ctx.deadline && desiredDeadline === actualDeadline) {\n        return ctx;\n      }\n      return new AbortContext(ctx, ctx.abortSignal, actualDeadline);\n    }\n\n    const controller = new AbortController();\n    const timeoutHandle = setTimeout(abort, timeout);\n    ctx.abortSignal.addEventListener('abort', abort);\n\n    function abort() {\n      ctx.abortSignal.removeEventListener('abort', abort);\n      clearTimeout(timeoutHandle!);\n      controller.abort();\n    }\n\n    return new AbortContext(ctx, controller.signal, actualDeadline);\n  }\n\n  /**\n   * Abort either when the parent aborts, or when the given controller is\n   * triggered.\n   *\n   * @remarks\n   *\n   * If you have access to the controller, this function is more efficient than\n   * {@link AbortContext#forSignal}.\n   *\n   * @param ctx - The parent context\n   * @param controller - An abort controller\n   * @returns A new context\n   */\n  static forController(ctx: Context, controller: AbortController): Context {\n    // Already aborted context / signal are fine to reuse as-is\n    if (ctx.abortSignal.aborted) {\n      return ctx;\n    } else if (controller.signal.aborted) {\n      return new AbortContext(ctx, controller.signal, ctx.deadline);\n    }\n\n    function abort() {\n      ctx.abortSignal.removeEventListener('abort', abort);\n      controller.abort();\n    }\n\n    ctx.abortSignal.addEventListener('abort', abort);\n\n    return new AbortContext(ctx, controller.signal, ctx.deadline);\n  }\n\n  /**\n   * Abort either when the parent aborts, or when the given signal is triggered.\n   *\n   * @remarks\n   *\n   * If you have access to the controller and not just the signal,\n   * {@link AbortContext#forController} is slightly more efficient to use.\n   *\n   * @param ctx - The parent context\n   * @param signal - An abort signal\n   * @returns A new context\n   */\n  static forSignal(ctx: Context, signal: AbortSignal): Context {\n    // Already aborted context / signal are fine to reuse as-is\n    if (ctx.abortSignal.aborted) {\n      return ctx;\n    } else if (signal.aborted) {\n      return new AbortContext(ctx, signal, ctx.deadline);\n    }\n\n    const controller = new AbortController();\n\n    function abort() {\n      ctx.abortSignal.removeEventListener('abort', abort);\n      signal.removeEventListener('abort', abort);\n      controller.abort();\n    }\n\n    ctx.abortSignal.addEventListener('abort', abort);\n    signal.addEventListener('abort', abort);\n\n    return new AbortContext(ctx, controller.signal, ctx.deadline);\n  }\n\n  private constructor(\n    private readonly parent: Context,\n    readonly abortSignal: AbortSignal,\n    readonly deadline: Date | undefined,\n  ) {}\n\n  value<T = unknown>(key: string): T | undefined {\n    return this.parent.value(key);\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AbortSignal } from 'node-abort-controller';\nimport { Context } from './types';\n\n/**\n * Since the root context can never abort, and since nobody is every meant to\n * dispatch events through it, we can use a static dummy instance for\n * efficiency.\n */\nconst dummyAbortSignal: AbortSignal = Object.freeze({\n  aborted: false,\n  addEventListener() {},\n  removeEventListener() {},\n  dispatchEvent() {\n    return true;\n  },\n  onabort: null,\n});\n\n/**\n * An empty root context.\n */\nexport class RootContext implements Context {\n  readonly abortSignal = dummyAbortSignal;\n  readonly deadline = undefined;\n\n  value<T = unknown>(_key: string): T | undefined {\n    return undefined;\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AbortSignal } from 'node-abort-controller';\nimport { Context } from './types';\n\n/**\n * A context that just holds a single value, and delegates the rest to its\n * parent.\n */\nexport class ValueContext implements Context {\n  static forConstantValue(ctx: Context, key: string, value: unknown): Context {\n    return new ValueContext(ctx, key, value);\n  }\n\n  constructor(\n    private readonly _parent: Context,\n    private readonly _key: string,\n    private readonly _value: unknown,\n  ) {}\n\n  get abortSignal(): AbortSignal {\n    return this._parent.abortSignal;\n  }\n\n  get deadline(): Date | undefined {\n    return this._parent.deadline;\n  }\n\n  value<T = unknown>(key: string): T | undefined {\n    return key === this._key ? (this._value as T) : this._parent.value(key);\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Duration } from 'luxon';\nimport { AbortController, AbortSignal } from 'node-abort-controller';\nimport { AbortContext } from './AbortContext';\nimport { RootContext } from './RootContext';\nimport { Context } from './types';\nimport { ValueContext } from './ValueContext';\n\n/**\n * Common context decorators.\n *\n * @alpha\n */\nexport class Contexts {\n  /**\n   * Creates a root context.\n   *\n   * @remarks\n   *\n   * This should normally only be called near the root of an application. The\n   * created context is meant to be passed down into deeper levels, which may or\n   * may not make derived contexts out of it.\n   */\n  static root(): Context {\n    return new RootContext();\n  }\n\n  /**\n   * Creates a derived context, which signals to abort operations either when\n   * any parent context signals, or when the given source is aborted.\n   *\n   * @remarks\n   *\n   * If the parent context was already aborted, then it is returned as-is.\n   *\n   * If the given source was already aborted, then a new already-aborted context\n   * is returned.\n   *\n   * @param parentCtx - A parent context that shall be used as a base\n   * @param source - An abort controller or signal that you intend to perhaps\n   *                 trigger at some later point in time.\n   * @returns A new {@link Context}\n   */\n  static withAbort(\n    parentCtx: Context,\n    source: AbortController | AbortSignal,\n  ): Context {\n    return 'aborted' in source\n      ? AbortContext.forSignal(parentCtx, source)\n      : AbortContext.forController(parentCtx, source);\n  }\n\n  /**\n   * Creates a derived context, which signals to abort operations either when\n   * any parent context signals, or when the given amount of time has passed.\n   * This may affect the deadline.\n   *\n   * @param parentCtx - A parent context that shall be used as a base\n   * @param timeout - The duration of time, after which the derived context will\n   *                  signal to abort.\n   * @returns A new {@link Context}\n   */\n  static withTimeoutDuration(parentCtx: Context, timeout: Duration): Context {\n    return AbortContext.forTimeoutMillis(parentCtx, timeout.as('milliseconds'));\n  }\n\n  /**\n   * Creates a derived context, which signals to abort operations either when\n   * any parent context signals, or when the given amount of time has passed.\n   * This may affect the deadline.\n   *\n   * @param parentCtx - A parent context that shall be used as a base\n   * @param timeout - The number of milliseconds, after which the derived\n   *                  context will signal to abort.\n   * @returns A new {@link Context}\n   */\n  static withTimeoutMillis(parentCtx: Context, timeout: number): Context {\n    return AbortContext.forTimeoutMillis(parentCtx, timeout);\n  }\n\n  /**\n   * Creates a derived context, which has a specific key-value pair set as well\n   * as all key-value pairs that were set in the original context.\n   *\n   * @param parentCtx - A parent context that shall be used as a base\n   * @param key - The key of the value to set\n   * @param value - The value, or a function that accepts the previous value (or\n   *                undefined if not set yet) and computes the new value\n   * @returns A new {@link Context}\n   */\n  static withValue(\n    parentCtx: Context,\n    key: string,\n    value: unknown | ((previous: unknown | undefined) => unknown),\n  ): Context {\n    const v = typeof value === 'function' ? value(parentCtx.value(key)) : value;\n    return ValueContext.forConstantValue(parentCtx, key, v);\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { merge } from 'lodash';\n\n/**\n * Merges database objects together\n *\n * @public\n * @param config - The base config. The input is not modified\n * @param overrides - Any additional overrides\n */\nexport function mergeDatabaseConfig(config: any, ...overrides: any[]) {\n  return merge({}, config, ...overrides);\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Knex } from 'knex';\n\n/**\n * Provides a partial knex config with database name override.\n *\n * Default override for knex database drivers which accept ConnectionConfig\n * with `connection.database` as the database name field.\n *\n * @param name - database name to get config override for\n */\nexport default function defaultNameOverride(\n  name: string,\n): Partial<Knex.Config> {\n  return {\n    connection: {\n      database: name,\n    },\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport knexFactory, { Knex } from 'knex';\nimport yn from 'yn';\n\nimport { Config } from '@backstage/config';\nimport { InputError } from '@backstage/errors';\nimport { mergeDatabaseConfig } from '../config';\nimport { DatabaseConnector } from '../types';\nimport defaultNameOverride from './defaultNameOverride';\n\n/**\n * Creates a knex mysql database connection\n *\n * @param dbConfig - The database config\n * @param overrides - Additional options to merge with the config\n */\nexport function createMysqlDatabaseClient(\n  dbConfig: Config,\n  overrides?: Knex.Config,\n) {\n  const knexConfig = buildMysqlDatabaseConfig(dbConfig, overrides);\n  const database = knexFactory(knexConfig);\n  return database;\n}\n\n/**\n * Builds a knex mysql database connection\n *\n * @param dbConfig - The database config\n * @param overrides - Additional options to merge with the config\n */\nexport function buildMysqlDatabaseConfig(\n  dbConfig: Config,\n  overrides?: Knex.Config,\n) {\n  return mergeDatabaseConfig(\n    dbConfig.get(),\n    {\n      connection: getMysqlConnectionConfig(dbConfig, !!overrides),\n      useNullAsDefault: true,\n    },\n    overrides,\n  );\n}\n\n/**\n * Gets the mysql connection config\n *\n * @param dbConfig - The database config\n * @param parseConnectionString - Flag to explicitly control connection string parsing\n */\nexport function getMysqlConnectionConfig(\n  dbConfig: Config,\n  parseConnectionString?: boolean,\n): Knex.MySqlConnectionConfig | string {\n  const connection = dbConfig.get('connection') as any;\n  const isConnectionString =\n    typeof connection === 'string' || connection instanceof String;\n  const autoParse = typeof parseConnectionString !== 'boolean';\n\n  const shouldParseConnectionString = autoParse\n    ? isConnectionString\n    : parseConnectionString && isConnectionString;\n\n  return shouldParseConnectionString\n    ? parseMysqlConnectionString(connection as string)\n    : connection;\n}\n\n/**\n * Parses a mysql connection string.\n *\n * e.g. mysql://examplename:somepassword@examplehost:3306/dbname\n * @param connectionString - The mysql connection string\n */\nexport function parseMysqlConnectionString(\n  connectionString: string,\n): Knex.MySqlConnectionConfig {\n  try {\n    const {\n      protocol,\n      username,\n      password,\n      port,\n      hostname,\n      pathname,\n      searchParams,\n    } = new URL(connectionString);\n\n    if (protocol !== 'mysql:') {\n      throw new Error(`Unknown protocol ${protocol}`);\n    } else if (!username || !password) {\n      throw new Error(`Missing username/password`);\n    } else if (!pathname.match(/^\\/[^/]+$/)) {\n      throw new Error(`Expected single path segment`);\n    }\n\n    const result: Knex.MySqlConnectionConfig = {\n      user: username,\n      password,\n      host: hostname,\n      port: Number(port || 3306),\n      database: decodeURIComponent(pathname.substr(1)),\n    };\n\n    const ssl = searchParams.get('ssl');\n    if (ssl) {\n      result.ssl = ssl;\n    }\n\n    const debug = searchParams.get('debug');\n    if (debug) {\n      result.debug = yn(debug);\n    }\n\n    return result;\n  } catch (e) {\n    throw new InputError(\n      `Error while parsing MySQL connection string, ${e}`,\n      e,\n    );\n  }\n}\n\n/**\n * Creates the missing mysql database if it does not exist\n *\n * @param dbConfig - The database config\n * @param databases - The names of the databases to create\n */\nexport async function ensureMysqlDatabaseExists(\n  dbConfig: Config,\n  ...databases: Array<string>\n) {\n  const admin = createMysqlDatabaseClient(dbConfig, {\n    connection: {\n      database: null as unknown as string,\n    },\n  });\n\n  try {\n    const ensureDatabase = async (database: string) => {\n      await admin.raw(`CREATE DATABASE IF NOT EXISTS ??`, [database]);\n    };\n    await Promise.all(databases.map(ensureDatabase));\n  } finally {\n    await admin.destroy();\n  }\n}\n\n/**\n * MySQL database connector.\n *\n * Exposes database connector functionality via an immutable object.\n */\nexport const mysqlConnector: DatabaseConnector = Object.freeze({\n  createClient: createMysqlDatabaseClient,\n  ensureDatabaseExists: ensureMysqlDatabaseExists,\n  createNameOverride: defaultNameOverride,\n  parseConnectionString: parseMysqlConnectionString,\n});\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Knex } from 'knex';\n\n/**\n * Provides a partial knex config with schema name override.\n *\n * @param name - schema name to get config override for\n */\nexport default function defaultSchemaOverride(\n  name: string,\n): Partial<Knex.Config> {\n  return {\n    searchPath: [name],\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport knexFactory, { Knex } from 'knex';\n\nimport { Config } from '@backstage/config';\nimport { ForwardedError } from '@backstage/errors';\nimport { mergeDatabaseConfig } from '../config';\nimport { DatabaseConnector } from '../types';\nimport defaultNameOverride from './defaultNameOverride';\nimport defaultSchemaOverride from './defaultSchemaOverride';\n\n/**\n * Creates a knex postgres database connection\n *\n * @param dbConfig - The database config\n * @param overrides - Additional options to merge with the config\n */\nexport function createPgDatabaseClient(\n  dbConfig: Config,\n  overrides?: Knex.Config,\n) {\n  const knexConfig = buildPgDatabaseConfig(dbConfig, overrides);\n  const database = knexFactory(knexConfig);\n  return database;\n}\n\n/**\n * Builds a knex postgres database connection\n *\n * @param dbConfig - The database config\n * @param overrides - Additional options to merge with the config\n */\nexport function buildPgDatabaseConfig(\n  dbConfig: Config,\n  overrides?: Knex.Config,\n) {\n  return mergeDatabaseConfig(\n    dbConfig.get(),\n    {\n      connection: getPgConnectionConfig(dbConfig, !!overrides),\n      useNullAsDefault: true,\n    },\n    overrides,\n  );\n}\n\n/**\n * Gets the postgres connection config\n *\n * @param dbConfig - The database config\n * @param parseConnectionString - Flag to explicitly control connection string parsing\n */\nexport function getPgConnectionConfig(\n  dbConfig: Config,\n  parseConnectionString?: boolean,\n): Knex.PgConnectionConfig | string {\n  const connection = dbConfig.get('connection') as any;\n  const isConnectionString =\n    typeof connection === 'string' || connection instanceof String;\n  const autoParse = typeof parseConnectionString !== 'boolean';\n\n  const shouldParseConnectionString = autoParse\n    ? isConnectionString\n    : parseConnectionString && isConnectionString;\n\n  return shouldParseConnectionString\n    ? parsePgConnectionString(connection as string)\n    : connection;\n}\n\n/**\n * Parses a connection string using pg-connection-string\n *\n * @param connectionString - The postgres connection string\n */\nexport function parsePgConnectionString(connectionString: string) {\n  const parse = requirePgConnectionString();\n  return parse(connectionString);\n}\n\nfunction requirePgConnectionString() {\n  try {\n    return require('pg-connection-string').parse;\n  } catch (e) {\n    throw new ForwardedError(\"Postgres: Install 'pg-connection-string'\", e);\n  }\n}\n\n/**\n * Creates the missing Postgres database if it does not exist\n *\n * @param dbConfig - The database config\n * @param databases - The name of the databases to create\n */\nexport async function ensurePgDatabaseExists(\n  dbConfig: Config,\n  ...databases: Array<string>\n) {\n  const admin = createPgDatabaseClient(dbConfig, {\n    connection: {\n      database: 'postgres',\n    },\n  });\n\n  try {\n    const ensureDatabase = async (database: string) => {\n      const result = await admin\n        .from('pg_database')\n        .where('datname', database)\n        .count<Record<string, { count: string }>>();\n\n      if (parseInt(result[0].count, 10) > 0) {\n        return;\n      }\n\n      await admin.raw(`CREATE DATABASE ??`, [database]);\n    };\n\n    await Promise.all(databases.map(ensureDatabase));\n  } finally {\n    await admin.destroy();\n  }\n}\n\n/**\n * Creates the missing Postgres schema if it does not exist\n *\n * @param dbConfig - The database config\n * @param schemas - The name of the schemas to create\n */\nexport async function ensurePgSchemaExists(\n  dbConfig: Config,\n  ...schemas: Array<string>\n): Promise<void> {\n  const admin = createPgDatabaseClient(dbConfig);\n\n  try {\n    const ensureSchema = async (database: string) => {\n      await admin.raw(`CREATE SCHEMA IF NOT EXISTS ??`, [database]);\n    };\n\n    await Promise.all(schemas.map(ensureSchema));\n  } finally {\n    await admin.destroy();\n  }\n}\n\n/**\n * PostgreSQL database connector.\n *\n * Exposes database connector functionality via an immutable object.\n */\nexport const pgConnector: DatabaseConnector = Object.freeze({\n  createClient: createPgDatabaseClient,\n  ensureDatabaseExists: ensurePgDatabaseExists,\n  ensureSchemaExists: ensurePgSchemaExists,\n  createNameOverride: defaultNameOverride,\n  createSchemaOverride: defaultSchemaOverride,\n  parseConnectionString: parsePgConnectionString,\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { ensureDirSync } from 'fs-extra';\nimport knexFactory, { Knex } from 'knex';\nimport path from 'path';\nimport { mergeDatabaseConfig } from '../config';\nimport { DatabaseConnector } from '../types';\n\n/**\n * Creates a knex SQLite3 database connection\n *\n * @param dbConfig - The database config\n * @param overrides - Additional options to merge with the config\n */\nexport function createSqliteDatabaseClient(\n  dbConfig: Config,\n  overrides?: Knex.Config,\n) {\n  const knexConfig = buildSqliteDatabaseConfig(dbConfig, overrides);\n\n  // If storage on disk is used, ensure that the directory exists\n  if (\n    (knexConfig.connection as Knex.Sqlite3ConnectionConfig).filename &&\n    (knexConfig.connection as Knex.Sqlite3ConnectionConfig).filename !==\n      ':memory:'\n  ) {\n    const { filename } = knexConfig.connection as Knex.Sqlite3ConnectionConfig;\n    const directory = path.dirname(filename);\n\n    ensureDirSync(directory);\n  }\n\n  const database = knexFactory(knexConfig);\n\n  database.client.pool.on('createSuccess', (_eventId: any, resource: any) => {\n    resource.run('PRAGMA foreign_keys = ON', () => {});\n  });\n\n  return database;\n}\n\n/**\n * Builds a knex SQLite3 connection config\n *\n * @param dbConfig - The database config\n * @param overrides - Additional options to merge with the config\n */\nexport function buildSqliteDatabaseConfig(\n  dbConfig: Config,\n  overrides?: Knex.Config,\n): Knex.Config {\n  const baseConfig = dbConfig.get<Knex.Config>();\n\n  // Normalize config to always contain a connection object\n  if (typeof baseConfig.connection === 'string') {\n    baseConfig.connection = { filename: baseConfig.connection };\n  }\n  if (overrides && typeof overrides.connection === 'string') {\n    overrides.connection = { filename: overrides.connection };\n  }\n\n  const config: Knex.Config = mergeDatabaseConfig(\n    {\n      connection: {},\n    },\n    baseConfig,\n    {\n      useNullAsDefault: true,\n    },\n    overrides,\n  );\n\n  return config;\n}\n\n/**\n * Provides a partial knex SQLite3 config to override database name.\n */\nexport function createSqliteNameOverride(name: string): Partial<Knex.Config> {\n  return {\n    connection: parseSqliteConnectionString(name),\n  };\n}\n\n/**\n * Produces a partial knex SQLite3 connection config with database name.\n */\nexport function parseSqliteConnectionString(\n  name: string,\n): Knex.Sqlite3ConnectionConfig {\n  return {\n    filename: name,\n  };\n}\n\n/**\n * SQLite3 database connector.\n *\n * Exposes database connector functionality via an immutable object.\n */\nexport const sqlite3Connector: DatabaseConnector = Object.freeze({\n  createClient: createSqliteDatabaseClient,\n  createNameOverride: createSqliteNameOverride,\n  parseConnectionString: parseSqliteConnectionString,\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { JsonObject } from '@backstage/types';\nimport { InputError } from '@backstage/errors';\nimport knexFactory, { Knex } from 'knex';\nimport { mergeDatabaseConfig } from './config';\nimport { DatabaseConnector } from './types';\n\nimport { mysqlConnector, pgConnector, sqlite3Connector } from './connectors';\n\ntype DatabaseClient =\n  | 'pg'\n  | 'better-sqlite3'\n  | 'sqlite3'\n  | 'mysql'\n  | 'mysql2'\n  | string;\n\n/**\n * Mapping of client type to supported database connectors\n *\n * Database connectors can be aliased here, for example mysql2 uses\n * the same connector as mysql.\n */\nconst ConnectorMapping: Record<DatabaseClient, DatabaseConnector> = {\n  pg: pgConnector,\n  'better-sqlite3': sqlite3Connector,\n  sqlite3: sqlite3Connector,\n  mysql: mysqlConnector,\n  mysql2: mysqlConnector,\n};\n\n/**\n * Creates a knex database connection\n *\n * @public\n * @param dbConfig - The database config\n * @param overrides - Additional options to merge with the config\n */\nexport function createDatabaseClient(\n  dbConfig: Config,\n  overrides?: Partial<Knex.Config>,\n) {\n  const client: DatabaseClient = dbConfig.getString('client');\n\n  return (\n    ConnectorMapping[client]?.createClient(dbConfig, overrides) ??\n    knexFactory(mergeDatabaseConfig(dbConfig.get(), overrides))\n  );\n}\n\n/**\n * Ensures that the given databases all exist, creating them if they do not.\n *\n * @public\n */\nexport async function ensureDatabaseExists(\n  dbConfig: Config,\n  ...databases: Array<string>\n): Promise<void> {\n  const client: DatabaseClient = dbConfig.getString('client');\n\n  return ConnectorMapping[client]?.ensureDatabaseExists?.(\n    dbConfig,\n    ...databases,\n  );\n}\n\n/**\n * Ensures that the given schemas all exist, creating them if they do not.\n *\n * @public\n */\nexport async function ensureSchemaExists(\n  dbConfig: Config,\n  ...schemas: Array<string>\n): Promise<void> {\n  const client: DatabaseClient = dbConfig.getString('client');\n\n  return await ConnectorMapping[client]?.ensureSchemaExists?.(\n    dbConfig,\n    ...schemas,\n  );\n}\n\n/**\n * Provides a `Knex.Config` object with the provided database name for a given\n * client.\n */\nexport function createNameOverride(\n  client: string,\n  name: string,\n): Partial<Knex.Config> {\n  try {\n    return ConnectorMapping[client].createNameOverride(name);\n  } catch (e) {\n    throw new InputError(\n      `Unable to create database name override for '${client}' connector`,\n      e,\n    );\n  }\n}\n\n/**\n * Provides a `Knex.Config` object with the provided database schema for a given\n * client. Currently only supported by `pg`.\n */\nexport function createSchemaOverride(\n  client: string,\n  name: string,\n): Partial<Knex.Config | undefined> {\n  try {\n    return ConnectorMapping[client]?.createSchemaOverride?.(name);\n  } catch (e) {\n    throw new InputError(\n      `Unable to create database schema override for '${client}' connector`,\n      e,\n    );\n  }\n}\n\n/**\n * Parses a connection string for a given client and provides a connection config.\n */\nexport function parseConnectionString(\n  connectionString: string,\n  client?: string,\n): Knex.StaticConnectionConfig {\n  if (typeof client === 'undefined' || client === null) {\n    throw new InputError(\n      'Database connection string client type auto-detection is not yet supported.',\n    );\n  }\n\n  try {\n    return ConnectorMapping[client].parseConnectionString(connectionString);\n  } catch (e) {\n    throw new InputError(\n      `Unable to parse connection string for '${client}' connector`,\n    );\n  }\n}\n\n/**\n * Normalizes a connection config or string into an object which can be passed\n * to Knex.\n */\nexport function normalizeConnection(\n  connection: Knex.StaticConnectionConfig | JsonObject | string | undefined,\n  client: string,\n): Partial<Knex.StaticConnectionConfig> {\n  if (typeof connection === 'undefined' || connection === null) {\n    return {};\n  }\n\n  return typeof connection === 'string' || connection instanceof String\n    ? parseConnectionString(connection as string, client)\n    : connection;\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config, ConfigReader } from '@backstage/config';\nimport { JsonObject } from '@backstage/types';\nimport { Knex } from 'knex';\nimport { merge, omit } from 'lodash';\nimport { mergeDatabaseConfig } from './config';\nimport {\n  createDatabaseClient,\n  createNameOverride,\n  createSchemaOverride,\n  ensureDatabaseExists,\n  ensureSchemaExists,\n  normalizeConnection,\n} from './connection';\nimport { PluginDatabaseManager } from './types';\nimport path from 'path';\nimport { Logger } from 'winston';\nimport { stringifyError } from '@backstage/errors';\n\n/**\n * Provides a config lookup path for a plugin's config block.\n */\nfunction pluginPath(pluginId: string): string {\n  return `plugin.${pluginId}`;\n}\n\n/**\n * Creation options for {@link DatabaseManager}.\n *\n * @public\n */\nexport type DatabaseManagerOptions = {\n  migrations?: PluginDatabaseManager['migrations'];\n  logger?: Logger;\n};\n\n/**\n * Manages database connections for Backstage backend plugins.\n *\n * The database manager allows the user to set connection and client settings on\n * a per pluginId basis by defining a database config block under\n * `plugin.<pluginId>` in addition to top level defaults. Optionally, a user may\n * set `prefix` which is used to prefix generated database names if config is\n * not provided.\n *\n * @public\n */\nexport class DatabaseManager {\n  /**\n   * Creates a {@link DatabaseManager} from `backend.database` config.\n   *\n   * @param config - The loaded application configuration.\n   * @param options - An optional configuration object.\n   */\n  static fromConfig(\n    config: Config,\n    options?: DatabaseManagerOptions,\n  ): DatabaseManager {\n    const databaseConfig = config.getConfig('backend.database');\n\n    return new DatabaseManager(\n      databaseConfig,\n      databaseConfig.getOptionalString('prefix'),\n      options,\n    );\n  }\n\n  private constructor(\n    private readonly config: Config,\n    private readonly prefix: string = 'backstage_plugin_',\n    private readonly options?: DatabaseManagerOptions,\n    private readonly databaseCache: Map<string, Promise<Knex>> = new Map(),\n  ) {}\n\n  /**\n   * Generates a PluginDatabaseManager for consumption by plugins.\n   *\n   * @param pluginId - The plugin that the database manager should be created for. Plugin names\n   * should be unique as they are used to look up database config overrides under\n   * `backend.database.plugin`.\n   */\n  forPlugin(pluginId: string): PluginDatabaseManager {\n    const _this = this;\n\n    return {\n      getClient(): Promise<Knex> {\n        return _this.getDatabase(pluginId);\n      },\n      migrations: {\n        skip: false,\n        ..._this.options?.migrations,\n      },\n    };\n  }\n\n  /**\n   * Provides the canonical database name for a given plugin.\n   *\n   * This method provides the effective database name which is determined using global\n   * and plugin specific database config. If no explicit database name is configured\n   * and `pluginDivisionMode` is not `schema`, this method will provide a generated name\n   * which is the pluginId prefixed with 'backstage_plugin_'. If `pluginDivisionMode` is\n   * `schema`, it will fallback to using the default database for the knex instance.\n   *\n   * @param pluginId - Lookup the database name for given plugin\n   * @returns String representing the plugin's database name\n   */\n  private getDatabaseName(pluginId: string): string | undefined {\n    const connection = this.getConnectionConfig(pluginId);\n\n    if (this.getClientType(pluginId).client.includes('sqlite3')) {\n      const sqliteFilename: string | undefined = (\n        connection as Knex.Sqlite3ConnectionConfig\n      ).filename;\n\n      if (sqliteFilename === ':memory:') {\n        return sqliteFilename;\n      }\n\n      const sqliteDirectory =\n        (connection as { directory?: string }).directory ?? '.';\n\n      return path.join(sqliteDirectory, sqliteFilename ?? `${pluginId}.sqlite`);\n    }\n\n    const databaseName = (connection as Knex.ConnectionConfig)?.database;\n\n    // `pluginDivisionMode` as `schema` should use overridden databaseName if supplied or fallback to default knex database\n    if (this.getPluginDivisionModeConfig() === 'schema') {\n      return databaseName;\n    }\n\n    // all other supported databases should fallback to an auto-prefixed name\n    return databaseName ?? `${this.prefix}${pluginId}`;\n  }\n\n  /**\n   * Provides the client type which should be used for a given plugin.\n   *\n   * The client type is determined by plugin specific config if present.\n   * Otherwise the base client is used as the fallback.\n   *\n   * @param pluginId - Plugin to get the client type for\n   * @returns Object with client type returned as `client` and boolean\n   *          representing whether or not the client was overridden as\n   *          `overridden`\n   */\n  private getClientType(pluginId: string): {\n    client: string;\n    overridden: boolean;\n  } {\n    const pluginClient = this.config.getOptionalString(\n      `${pluginPath(pluginId)}.client`,\n    );\n\n    const baseClient = this.config.getString('client');\n    const client = pluginClient ?? baseClient;\n    return {\n      client,\n      overridden: client !== baseClient,\n    };\n  }\n\n  /**\n   * Provides the knexConfig which should be used for a given plugin.\n   *\n   * @param pluginId - Plugin to get the knexConfig for\n   * @returns The merged knexConfig value or undefined if it isn't specified\n   */\n  private getAdditionalKnexConfig(pluginId: string): JsonObject | undefined {\n    const pluginConfig = this.config\n      .getOptionalConfig(`${pluginPath(pluginId)}.knexConfig`)\n      ?.get<JsonObject>();\n\n    const baseConfig = this.config\n      .getOptionalConfig('knexConfig')\n      ?.get<JsonObject>();\n\n    return merge(baseConfig, pluginConfig);\n  }\n\n  private getEnsureExistsConfig(pluginId: string): boolean {\n    const baseConfig = this.config.getOptionalBoolean('ensureExists') ?? true;\n    return (\n      this.config.getOptionalBoolean(`${pluginPath(pluginId)}.ensureExists`) ??\n      baseConfig\n    );\n  }\n\n  private getPluginDivisionModeConfig(): string {\n    return this.config.getOptionalString('pluginDivisionMode') ?? 'database';\n  }\n\n  /**\n   * Provides a Knex connection plugin config by combining base and plugin\n   * config.\n   *\n   * This method provides a baseConfig for a plugin database connector. If the\n   * client type has not been overridden, the global connection config will be\n   * included with plugin specific config as the base. Values from the plugin\n   * connection take precedence over the base. Base database name is omitted for\n   * all supported databases excluding SQLite unless `pluginDivisionMode` is set\n   * to `schema`.\n   */\n  private getConnectionConfig(\n    pluginId: string,\n  ): Partial<Knex.StaticConnectionConfig> {\n    const { client, overridden } = this.getClientType(pluginId);\n\n    let baseConnection = normalizeConnection(\n      this.config.get('connection'),\n      this.config.getString('client'),\n    );\n\n    if (\n      client.includes('sqlite3') &&\n      'filename' in baseConnection &&\n      baseConnection.filename !== ':memory:'\n    ) {\n      throw new Error(\n        '`connection.filename` is not supported for the base sqlite connection. Prefer `connection.directory` or provide a filename for the plugin connection instead.',\n      );\n    }\n\n    // Databases cannot be shared unless the `pluginDivisionMode` is set to `schema`. The\n    // `database` property from the base connection is omitted unless `pluginDivisionMode`\n    // is set to `schema`. SQLite3's `filename` property is an exception as this is used as a\n    // directory elsewhere so we preserve `filename`.\n    if (this.getPluginDivisionModeConfig() !== 'schema') {\n      baseConnection = omit(baseConnection, 'database');\n    }\n\n    // get and normalize optional plugin specific database connection\n    const connection = normalizeConnection(\n      this.config.getOptional(`${pluginPath(pluginId)}.connection`),\n      client,\n    );\n\n    return {\n      // include base connection if client type has not been overridden\n      ...(overridden ? {} : baseConnection),\n      ...connection,\n    } as Partial<Knex.StaticConnectionConfig>;\n  }\n\n  /**\n   * Provides a Knex database config for a given plugin.\n   *\n   * This method provides a Knex configuration object along with the plugin's\n   * client type.\n   *\n   * @param pluginId - The plugin that the database config should correspond with\n   */\n  private getConfigForPlugin(pluginId: string): Knex.Config {\n    const { client } = this.getClientType(pluginId);\n\n    return {\n      ...this.getAdditionalKnexConfig(pluginId),\n      client,\n      connection: this.getConnectionConfig(pluginId),\n    };\n  }\n\n  /**\n   * Provides a partial `Knex.Config` database schema override for a given\n   * plugin.\n   *\n   * @param pluginId - Target plugin to get database schema override\n   * @returns Partial `Knex.Config` with database schema override\n   */\n  private getSchemaOverrides(pluginId: string): Knex.Config | undefined {\n    return createSchemaOverride(this.getClientType(pluginId).client, pluginId);\n  }\n\n  /**\n   * Provides a partial `Knex.Config`• database name override for a given plugin.\n   *\n   * @param pluginId - Target plugin to get database name override\n   * @returns Partial `Knex.Config` with database name override\n   */\n  private getDatabaseOverrides(pluginId: string): Knex.Config {\n    const databaseName = this.getDatabaseName(pluginId);\n    return databaseName\n      ? createNameOverride(this.getClientType(pluginId).client, databaseName)\n      : {};\n  }\n\n  /**\n   * Provides a scoped Knex client for a plugin as per application config.\n   *\n   * @param pluginId - Plugin to get a Knex client for\n   * @returns Promise which resolves to a scoped Knex database client for a\n   *          plugin\n   */\n  private async getDatabase(pluginId: string): Promise<Knex> {\n    if (this.databaseCache.has(pluginId)) {\n      return this.databaseCache.get(pluginId)!;\n    }\n\n    const clientPromise = Promise.resolve().then(async () => {\n      const pluginConfig = new ConfigReader(\n        this.getConfigForPlugin(pluginId) as JsonObject,\n      );\n\n      const databaseName = this.getDatabaseName(pluginId);\n      if (databaseName && this.getEnsureExistsConfig(pluginId)) {\n        try {\n          await ensureDatabaseExists(pluginConfig, databaseName);\n        } catch (error) {\n          throw new Error(\n            `Failed to connect to the database to make sure that '${databaseName}' exists, ${error}`,\n          );\n        }\n      }\n\n      let schemaOverrides;\n      if (this.getPluginDivisionModeConfig() === 'schema') {\n        schemaOverrides = this.getSchemaOverrides(pluginId);\n        if (this.getEnsureExistsConfig(pluginId)) {\n          try {\n            await ensureSchemaExists(pluginConfig, pluginId);\n          } catch (error) {\n            throw new Error(\n              `Failed to connect to the database to make sure that schema for plugin '${pluginId}' exists, ${error}`,\n            );\n          }\n        }\n      }\n\n      const databaseClientOverrides = mergeDatabaseConfig(\n        {},\n        this.getDatabaseOverrides(pluginId),\n        schemaOverrides,\n      );\n\n      const client = createDatabaseClient(\n        pluginConfig,\n        databaseClientOverrides,\n      );\n      this.startKeepaliveLoop(pluginId, client);\n      return client;\n    });\n\n    this.databaseCache.set(pluginId, clientPromise);\n\n    return clientPromise;\n  }\n\n  private startKeepaliveLoop(pluginId: string, client: Knex): void {\n    let lastKeepaliveFailed = false;\n\n    setInterval(() => {\n      // During testing it can happen that the environment is torn down and\n      // this client is `undefined`, but this interval is still run.\n      client?.raw('select 1').then(\n        () => {\n          lastKeepaliveFailed = false;\n        },\n        (error: unknown) => {\n          if (!lastKeepaliveFailed) {\n            lastKeepaliveFailed = true;\n            this.options?.logger?.warn(\n              `Database keepalive failed for plugin ${pluginId}, ${stringifyError(\n                error,\n              )}`,\n            );\n          }\n        },\n      );\n    }, 60 * 1000);\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Tries to deduce whether a thrown error is a database conflict.\n *\n * @public\n * @param e - A thrown error\n * @returns True if the error looks like it was a conflict error thrown by a\n *          known database engine\n */\nexport function isDatabaseConflictError(e: unknown) {\n  const message = (e as any)?.message;\n\n  return (\n    typeof message === 'string' &&\n    (/SQLITE_CONSTRAINT(?:_UNIQUE)?: UNIQUE/.test(message) ||\n      /UNIQUE constraint failed:/.test(message) ||\n      /unique constraint/.test(message))\n  );\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { CorsOptions } from 'cors';\nimport { Minimatch } from 'minimatch';\n\nexport type BaseOptions = {\n  listenPort?: string | number;\n  listenHost?: string;\n};\n\nexport type HttpsSettings = {\n  certificate: CertificateGenerationOptions | CertificateReferenceOptions;\n};\n\nexport type CertificateReferenceOptions = {\n  key: string;\n  cert: string;\n};\n\nexport type CertificateGenerationOptions = {\n  hostname: string;\n};\n\nexport type CertificateAttributes = {\n  commonName: string;\n};\n\n/**\n * A map from CSP directive names to their values.\n */\nexport type CspOptions = Record<string, string[]>;\n\ntype StaticOrigin = boolean | string | RegExp | (boolean | string | RegExp)[];\n\ntype CustomOrigin = (\n  requestOrigin: string | undefined,\n  callback: (err: Error | null, origin?: StaticOrigin) => void,\n) => void;\n\n/**\n * Reads some base options out of a config object.\n *\n * @param config - The root of a backend config object\n * @returns A base options object\n *\n * @example\n * ```json\n * {\n *   baseUrl: \"http://localhost:7007\",\n *   listen: \"0.0.0.0:7007\"\n * }\n * ```\n */\nexport function readBaseOptions(config: Config): BaseOptions {\n  if (typeof config.get('listen') === 'string') {\n    // TODO(freben): Expand this to support more addresses and perhaps optional\n    const { host, port } = parseListenAddress(config.getString('listen'));\n\n    return removeUnknown({\n      listenPort: port,\n      listenHost: host,\n    });\n  }\n\n  const port = config.getOptional('listen.port');\n  if (\n    typeof port !== 'undefined' &&\n    typeof port !== 'number' &&\n    typeof port !== 'string'\n  ) {\n    throw new Error(\n      `Invalid type in config for key 'backend.listen.port', got ${typeof port}, wanted string or number`,\n    );\n  }\n\n  return removeUnknown({\n    listenPort: port,\n    listenHost: config.getOptionalString('listen.host'),\n    baseUrl: config.getOptionalString('baseUrl'),\n  });\n}\n\n/**\n * Attempts to read a CORS options object from the root of a config object.\n *\n * @param config - The root of a backend config object\n * @returns A CORS options object, or undefined if not specified\n *\n * @example\n * ```json\n * {\n *   cors: {\n *    origin: \"http://localhost:3000\",\n *    credentials: true\n *   }\n * }\n * ```\n */\nexport function readCorsOptions(config: Config): CorsOptions | undefined {\n  const cc = config.getOptionalConfig('cors');\n  if (!cc) {\n    return undefined;\n  }\n\n  return removeUnknown({\n    origin: createCorsOriginMatcher(getOptionalStringOrStrings(cc, 'origin')),\n    methods: getOptionalStringOrStrings(cc, 'methods'),\n    allowedHeaders: getOptionalStringOrStrings(cc, 'allowedHeaders'),\n    exposedHeaders: getOptionalStringOrStrings(cc, 'exposedHeaders'),\n    credentials: cc.getOptionalBoolean('credentials'),\n    maxAge: cc.getOptionalNumber('maxAge'),\n    preflightContinue: cc.getOptionalBoolean('preflightContinue'),\n    optionsSuccessStatus: cc.getOptionalNumber('optionsSuccessStatus'),\n  });\n}\n\n/**\n * Attempts to read a CSP options object from the root of a config object.\n *\n * @param config - The root of a backend config object\n * @returns A CSP options object, or undefined if not specified. Values can be\n *          false as well, which means to remove the default behavior for that\n *          key.\n *\n * @example\n * ```yaml\n * backend:\n *   csp:\n *     connect-src: [\"'self'\", 'http:', 'https:']\n *     upgrade-insecure-requests: false\n * ```\n */\nexport function readCspOptions(\n  config: Config,\n): Record<string, string[] | false> | undefined {\n  const cc = config.getOptionalConfig('csp');\n  if (!cc) {\n    return undefined;\n  }\n\n  const result: Record<string, string[] | false> = {};\n  for (const key of cc.keys()) {\n    if (cc.get(key) === false) {\n      result[key] = false;\n    } else {\n      result[key] = cc.getStringArray(key);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Attempts to read a https settings object from the root of a config object.\n *\n * @param config - The root of a backend config object\n * @returns A https settings object, or undefined if not specified\n *\n * @example\n * ```json\n * {\n *   https: {\n *    certificate: ...\n *   }\n * }\n * ```\n */\nexport function readHttpsSettings(config: Config): HttpsSettings | undefined {\n  const https = config.getOptional('https');\n  if (https === true) {\n    const baseUrl = config.getString('baseUrl');\n    let hostname;\n    try {\n      hostname = new URL(baseUrl).hostname;\n    } catch (error) {\n      throw new Error(`Invalid backend.baseUrl \"${baseUrl}\"`);\n    }\n\n    return { certificate: { hostname } };\n  }\n\n  const cc = config.getOptionalConfig('https');\n  if (!cc) {\n    return undefined;\n  }\n\n  const certificateConfig = cc.get('certificate');\n\n  const cfg = {\n    certificate: certificateConfig,\n  };\n\n  return removeUnknown(cfg as HttpsSettings);\n}\n\nfunction getOptionalStringOrStrings(\n  config: Config,\n  key: string,\n): string | string[] | undefined {\n  const value = config.getOptional(key);\n  if (value === undefined || isStringOrStrings(value)) {\n    return value;\n  }\n  throw new Error(`Expected string or array of strings, got ${typeof value}`);\n}\n\nfunction createCorsOriginMatcher(\n  originValue: string | string[] | undefined,\n): CustomOrigin | undefined {\n  if (originValue === undefined) {\n    return originValue;\n  }\n\n  if (!isStringOrStrings(originValue)) {\n    throw new Error(\n      `Expected string or array of strings, got ${typeof originValue}`,\n    );\n  }\n\n  const allowedOrigin =\n    typeof originValue === 'string' ? [originValue] : originValue;\n\n  const allowedOriginPatterns =\n    allowedOrigin?.map(\n      pattern => new Minimatch(pattern, { nocase: true, noglobstar: true }),\n    ) ?? [];\n\n  return (origin, callback) => {\n    return callback(\n      null,\n      allowedOriginPatterns.some(pattern => pattern.match(origin ?? '')),\n    );\n  };\n}\n\nfunction isStringOrStrings(value: any): value is string | string[] {\n  return typeof value === 'string' || isStringArray(value);\n}\n\nfunction isStringArray(value: any): value is string[] {\n  if (!Array.isArray(value)) {\n    return false;\n  }\n  for (const v of value) {\n    if (typeof v !== 'string') {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction removeUnknown<T extends object>(obj: T): T {\n  return Object.fromEntries(\n    Object.entries(obj).filter(([, v]) => v !== undefined),\n  ) as T;\n}\n\nfunction parseListenAddress(value: string): { host?: string; port?: number } {\n  const parts = value.split(':');\n  if (parts.length === 1) {\n    return { port: parseInt(parts[0], 10) };\n  }\n  if (parts.length === 2) {\n    return { host: parts[0], port: parseInt(parts[1], 10) };\n  }\n  throw new Error(\n    `Unable to parse listen address ${value}, expected <port> or <host>:<port>`,\n  );\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Find all active hot module APIs of all ancestors of a module, including the module itself\nfunction findAllAncestors(_module: NodeModule): NodeModule[] {\n  const ancestors = new Array<NodeModule>();\n  const parentIds = new Set<string | number>();\n\n  function add(id: string | number, m: NodeModule) {\n    if (parentIds.has(id)) {\n      return;\n    }\n    parentIds.add(id);\n    ancestors.push(m);\n\n    for (const parentId of (m as any).parents) {\n      const parent = require.cache[parentId];\n      if (parent) {\n        add(parentId, parent);\n      }\n    }\n  }\n\n  add(_module.id, _module);\n\n  return ancestors;\n}\n\n/**\n * useHotCleanup allows cleanup of ongoing effects when a module is\n * hot-reloaded during development. The cleanup function will be called\n * whenever the module itself or any of its parent modules is hot-reloaded.\n *\n * Useful for cleaning intervals, timers, requests etc\n *\n * @public\n * @example\n * ```ts\n * const intervalId = setInterval(doStuff, 1000);\n * useHotCleanup(module, () => clearInterval(intervalId));\n * ```\n * @param _module - Reference to the current module where you invoke the fn\n * @param cancelEffect - Fn that cleans up the ongoing effects\n */\nexport function useHotCleanup(_module: NodeModule, cancelEffect: () => void) {\n  if (_module.hot) {\n    const ancestors = findAllAncestors(_module);\n    let cancelled = false;\n\n    const handler = () => {\n      if (!cancelled) {\n        cancelled = true;\n        cancelEffect();\n      }\n    };\n\n    for (const m of ancestors) {\n      m.hot?.addDisposeHandler(handler);\n    }\n  }\n}\n\nconst CURRENT_HOT_MEMOIZE_INDEX_KEY = 'backstage.io/hmr-memoize-key';\n\n/**\n * Memoizes a generated value across hot-module reloads. This is useful for\n * stateful parts of the backend, e.g. to retain a database.\n *\n * @public\n * @example\n * ```ts\n * const db = useHotMemoize(module, () => createDB(dbParams));\n * ```\n *\n * **NOTE:** Do not use inside conditionals or loops,\n * same rules as for hooks apply (https://reactjs.org/docs/hooks-rules.html)\n *\n * @param _module - Reference to the current module where you invoke the fn\n * @param valueFactory - Fn that returns the value you want to memoize\n */\nexport function useHotMemoize<T>(\n  _module: NodeModule,\n  valueFactory: () => T,\n): T {\n  if (!_module.hot) {\n    return valueFactory();\n  }\n\n  // When starting blank, reset the counter\n  if (!_module.hot.data?.[CURRENT_HOT_MEMOIZE_INDEX_KEY]) {\n    for (const ancestor of findAllAncestors(_module)) {\n      ancestor.hot?.addDisposeHandler(data => {\n        data[CURRENT_HOT_MEMOIZE_INDEX_KEY] = 1;\n      });\n    }\n\n    _module.hot.data = {\n      ..._module.hot.data,\n      [CURRENT_HOT_MEMOIZE_INDEX_KEY]: 1,\n    };\n  }\n\n  // Store data per module, based on the order of the code invocation\n  const index = _module.hot.data[CURRENT_HOT_MEMOIZE_INDEX_KEY]++;\n  const value = _module.hot.data[index] ?? valueFactory();\n\n  // Always add a handler that, upon a HMR event, reinstates the value.\n  _module.hot.addDisposeHandler(data => {\n    data[index] = value;\n  });\n\n  return value;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AuthenticationError,\n  ConflictError,\n  ErrorResponseBody,\n  InputError,\n  NotAllowedError,\n  NotFoundError,\n  NotModifiedError,\n  serializeError,\n} from '@backstage/errors';\nimport { ErrorRequestHandler, NextFunction, Request, Response } from 'express';\nimport { Logger } from 'winston';\nimport { getRootLogger } from '../logging';\n\n/**\n * Options passed to the {@link errorHandler} middleware.\n *\n * @public\n */\nexport type ErrorHandlerOptions = {\n  /**\n   * Whether error response bodies should show error stack traces or not.\n   *\n   * If not specified, by default shows stack traces only in development mode.\n   */\n  showStackTraces?: boolean;\n\n  /**\n   * Logger instance to log errors.\n   *\n   * If not specified, the root logger will be used.\n   */\n  logger?: Logger;\n\n  /**\n   * Whether any 4xx errors should be logged or not.\n   *\n   * If not specified, default to only logging 5xx errors.\n   */\n  logClientErrors?: boolean;\n};\n\n/**\n * Express middleware to handle errors during request processing.\n *\n * This is commonly the very last middleware in the chain.\n *\n * Its primary purpose is not to do translation of business logic exceptions,\n * but rather to be a global catch-all for uncaught \"fatal\" errors that are\n * expected to result in a 500 error. However, it also does handle some common\n * error types (such as http-error exceptions) and returns the enclosed status\n * code accordingly.\n *\n * @public\n * @returns An Express error request handler\n */\nexport function errorHandler(\n  options: ErrorHandlerOptions = {},\n): ErrorRequestHandler {\n  const showStackTraces =\n    options.showStackTraces ?? process.env.NODE_ENV === 'development';\n\n  const logger = (options.logger || getRootLogger()).child({\n    type: 'errorHandler',\n  });\n\n  return (error: Error, req: Request, res: Response, next: NextFunction) => {\n    const statusCode = getStatusCode(error);\n    if (options.logClientErrors || statusCode >= 500) {\n      logger.error(error);\n    }\n\n    if (res.headersSent) {\n      // If the headers have already been sent, do not send the response again\n      // as this will throw an error in the backend.\n      next(error);\n      return;\n    }\n\n    const body: ErrorResponseBody = {\n      error: serializeError(error, { includeStack: showStackTraces }),\n      request: { method: req.method, url: req.url },\n      response: { statusCode },\n    };\n\n    res.status(statusCode).json(body);\n  };\n}\n\nfunction getStatusCode(error: Error): number {\n  // Look for common http library status codes\n  const knownStatusCodeFields = ['statusCode', 'status'];\n  for (const field of knownStatusCodeFields) {\n    const statusCode = (error as any)[field];\n    if (\n      typeof statusCode === 'number' &&\n      (statusCode | 0) === statusCode && // is whole integer\n      statusCode >= 100 &&\n      statusCode <= 599\n    ) {\n      return statusCode;\n    }\n  }\n\n  // Handle well-known error types\n  switch (error.name) {\n    case NotModifiedError.name:\n      return 304;\n    case InputError.name:\n      return 400;\n    case AuthenticationError.name:\n      return 401;\n    case NotAllowedError.name:\n      return 403;\n    case NotFoundError.name:\n      return 404;\n    case ConflictError.name:\n      return 409;\n    default:\n      break;\n  }\n\n  // Fall back to internal server error\n  return 500;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NextFunction, Request, RequestHandler, Response } from 'express';\n\n/**\n * Express middleware to handle requests for missing routes.\n *\n * Should be used as the very last handler in the chain, as it unconditionally\n * returns a 404 status.\n *\n * @public\n * @returns An Express request handler\n */\nexport function notFoundHandler(): RequestHandler {\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  return (_request: Request, response: Response, _next: NextFunction) => {\n    response.status(404).end();\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RequestHandler } from 'express';\nimport { Logger } from 'winston';\nimport morgan from 'morgan';\nimport { getRootLogger } from '../logging';\n\n/**\n * Logs incoming requests.\n *\n * @public\n * @param logger - An optional logger to use. If not specified, the root logger will be used.\n * @returns An Express request handler\n */\nexport function requestLoggingHandler(logger?: Logger): RequestHandler {\n  const actualLogger = (logger || getRootLogger()).child({\n    type: 'incomingRequest',\n  });\n\n  return morgan('combined', {\n    stream: {\n      write(message: string) {\n        actualLogger.info(message.trimEnd());\n      },\n    },\n  });\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NextFunction, Request, Response, RequestHandler } from 'express';\n\n/**\n * A custom status checking function, passed to {@link statusCheckHandler} and\n * {@link createStatusCheckRouter}.\n *\n * @public\n */\nexport type StatusCheck = () => Promise<any>;\n\n/**\n * Options passed to {@link statusCheckHandler}.\n *\n * @public\n */\nexport interface StatusCheckHandlerOptions {\n  /**\n   * Optional status function which returns a message.\n   */\n  statusCheck?: StatusCheck;\n}\n\n/**\n * Express middleware for status checks.\n *\n * This is commonly used to implement healthcheck and readiness routes.\n *\n * @public\n * @param options - An optional configuration object.\n * @returns An Express error request handler\n */\nexport async function statusCheckHandler(\n  options: StatusCheckHandlerOptions = {},\n): Promise<RequestHandler> {\n  const statusCheck: StatusCheck = options.statusCheck\n    ? options.statusCheck\n    : () => Promise.resolve({ status: 'ok' });\n\n  return async (_request: Request, response: Response, next: NextFunction) => {\n    try {\n      const status = await statusCheck();\n      response.status(200).json(status);\n    } catch (err) {\n      next(err);\n    }\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs-extra';\nimport { resolve as resolvePath, dirname } from 'path';\nimport express from 'express';\nimport * as http from 'http';\nimport * as https from 'https';\nimport { Logger } from 'winston';\nimport { HttpsSettings } from './config';\n\nconst ALMOST_MONTH_IN_MS = 25 * 24 * 60 * 60 * 1000;\n\nconst IP_HOSTNAME_REGEX = /:|^\\d+\\.\\d+\\.\\d+\\.\\d+$/;\n\n/**\n * Creates a Http server instance based on an Express application.\n *\n * @param app - The Express application object\n * @param logger - Optional Winston logger object\n * @returns A Http server instance\n *\n */\nexport function createHttpServer(\n  app: express.Express,\n  logger?: Logger,\n): http.Server {\n  logger?.info('Initializing http server');\n\n  return http.createServer(app);\n}\n\n/**\n * Creates a Https server instance based on an Express application.\n *\n * @param app - The Express application object\n * @param httpsSettings - HttpsSettings for self-signed certificate generation\n * @param logger - Optional Winston logger object\n * @returns A Https server instance\n *\n */\nexport async function createHttpsServer(\n  app: express.Express,\n  httpsSettings: HttpsSettings,\n  logger?: Logger,\n): Promise<http.Server> {\n  logger?.info('Initializing https server');\n\n  let credentials: { key: string | Buffer; cert: string | Buffer };\n\n  if ('hostname' in httpsSettings?.certificate) {\n    credentials = await getGeneratedCertificate(\n      httpsSettings.certificate.hostname,\n      logger,\n    );\n  } else {\n    logger?.info('Loading certificate from config');\n\n    credentials = {\n      key: httpsSettings?.certificate?.key,\n      cert: httpsSettings?.certificate?.cert,\n    };\n  }\n\n  if (!credentials.key || !credentials.cert) {\n    throw new Error('Invalid HTTPS credentials');\n  }\n\n  return https.createServer(credentials, app) as http.Server;\n}\n\nasync function getGeneratedCertificate(hostname: string, logger?: Logger) {\n  const hasModules = await fs.pathExists('node_modules');\n  let certPath;\n  if (hasModules) {\n    certPath = resolvePath(\n      'node_modules/.cache/backstage-backend/dev-cert.pem',\n    );\n    await fs.ensureDir(dirname(certPath));\n  } else {\n    certPath = resolvePath('.dev-cert.pem');\n  }\n\n  let cert = undefined;\n  if (await fs.pathExists(certPath)) {\n    const stat = await fs.stat(certPath);\n    const ageMs = Date.now() - stat.ctimeMs;\n    if (stat.isFile() && ageMs < ALMOST_MONTH_IN_MS) {\n      cert = await fs.readFile(certPath);\n    }\n  }\n\n  if (cert) {\n    logger?.info('Using existing self-signed certificate');\n    return {\n      key: cert,\n      cert: cert,\n    };\n  }\n\n  logger?.info('Generating new self-signed certificate');\n  const newCert = await createCertificate(hostname);\n  await fs.writeFile(certPath, newCert.cert + newCert.key, 'utf8');\n  return newCert;\n}\n\nasync function createCertificate(hostname: string) {\n  const attributes = [\n    {\n      name: 'commonName',\n      value: 'dev-cert',\n    },\n  ];\n\n  const sans = [\n    {\n      type: 2, // DNS\n      value: 'localhost',\n    },\n    {\n      type: 2,\n      value: 'localhost.localdomain',\n    },\n    {\n      type: 2,\n      value: '[::1]',\n    },\n    {\n      type: 7, // IP\n      ip: '127.0.0.1',\n    },\n    {\n      type: 7,\n      ip: 'fe80::1',\n    },\n  ];\n\n  // Add hostname from backend.baseUrl if it doesn't already exist in our list of SANs\n  if (!sans.find(({ value, ip }) => value === hostname || ip === hostname)) {\n    sans.push(\n      IP_HOSTNAME_REGEX.test(hostname)\n        ? {\n            type: 7,\n            ip: hostname,\n          }\n        : {\n            type: 2,\n            value: hostname,\n          },\n    );\n  }\n\n  const params = {\n    algorithm: 'sha256',\n    keySize: 2048,\n    days: 30,\n    extensions: [\n      {\n        name: 'keyUsage',\n        keyCertSign: true,\n        digitalSignature: true,\n        nonRepudiation: true,\n        keyEncipherment: true,\n        dataEncipherment: true,\n      },\n      {\n        name: 'extKeyUsage',\n        serverAuth: true,\n        clientAuth: true,\n        codeSigning: true,\n        timeStamping: true,\n      },\n      {\n        name: 'subjectAltName',\n        altNames: sans,\n      },\n    ],\n  };\n\n  return new Promise<{ key: string; cert: string }>((resolve, reject) =>\n    require('selfsigned').generate(\n      attributes,\n      params,\n      (err: Error, bundle: { private: string; cert: string }) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve({ key: bundle.private, cert: bundle.cert });\n        }\n      },\n    ),\n  );\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport compression from 'compression';\nimport cors from 'cors';\nimport express, { Router, ErrorRequestHandler } from 'express';\nimport helmet from 'helmet';\nimport { ContentSecurityPolicyOptions } from 'helmet/dist/types/middlewares/content-security-policy';\nimport * as http from 'http';\nimport stoppable from 'stoppable';\nimport { Logger } from 'winston';\nimport { useHotCleanup } from '../../hot';\nimport { getRootLogger } from '../../logging';\nimport {\n  errorHandler as defaultErrorHandler,\n  notFoundHandler,\n  requestLoggingHandler as defaultRequestLoggingHandler,\n} from '../../middleware';\nimport { RequestLoggingHandlerFactory, ServiceBuilder } from '../types';\nimport {\n  CspOptions,\n  HttpsSettings,\n  readBaseOptions,\n  readCorsOptions,\n  readCspOptions,\n  readHttpsSettings,\n} from './config';\nimport { createHttpServer, createHttpsServer } from './hostFactory';\n\nexport const DEFAULT_PORT = 7007;\n// '' is express default, which listens to all interfaces\nconst DEFAULT_HOST = '';\n\nexport class ServiceBuilderImpl implements ServiceBuilder {\n  private port: number | undefined;\n  private host: string | undefined;\n  private logger: Logger | undefined;\n  private corsOptions: cors.CorsOptions | undefined;\n  private cspOptions: Record<string, string[] | false> | undefined;\n  private httpsSettings: HttpsSettings | undefined;\n  private routers: [string, Router][];\n  private requestLoggingHandler: RequestLoggingHandlerFactory | undefined;\n  private errorHandler: ErrorRequestHandler | undefined;\n  private useDefaultErrorHandler: boolean;\n  // Reference to the module where builder is created - needed for hot module\n  // reloading\n  private module: NodeModule;\n\n  constructor(moduleRef: NodeModule) {\n    this.routers = [];\n    this.module = moduleRef;\n    this.useDefaultErrorHandler = true;\n  }\n\n  loadConfig(config: Config): ServiceBuilder {\n    const backendConfig = config.getOptionalConfig('backend');\n    if (!backendConfig) {\n      return this;\n    }\n\n    const baseOptions = readBaseOptions(backendConfig);\n    if (baseOptions.listenPort) {\n      this.port =\n        typeof baseOptions.listenPort === 'string'\n          ? parseInt(baseOptions.listenPort, 10)\n          : baseOptions.listenPort;\n    }\n    if (baseOptions.listenHost) {\n      this.host = baseOptions.listenHost;\n    }\n\n    const corsOptions = readCorsOptions(backendConfig);\n    if (corsOptions) {\n      this.corsOptions = corsOptions;\n    }\n\n    const cspOptions = readCspOptions(backendConfig);\n    if (cspOptions) {\n      this.cspOptions = cspOptions;\n    }\n\n    const httpsSettings = readHttpsSettings(backendConfig);\n    if (httpsSettings) {\n      this.httpsSettings = httpsSettings;\n    }\n\n    return this;\n  }\n\n  setPort(port: number): ServiceBuilder {\n    this.port = port;\n    return this;\n  }\n\n  setHost(host: string): ServiceBuilder {\n    this.host = host;\n    return this;\n  }\n\n  setLogger(logger: Logger): ServiceBuilder {\n    this.logger = logger;\n    return this;\n  }\n\n  setHttpsSettings(settings: HttpsSettings): ServiceBuilder {\n    this.httpsSettings = settings;\n    return this;\n  }\n\n  enableCors(options: cors.CorsOptions): ServiceBuilder {\n    this.corsOptions = options;\n    return this;\n  }\n\n  setCsp(options: CspOptions): ServiceBuilder {\n    this.cspOptions = options;\n    return this;\n  }\n\n  addRouter(root: string, router: Router): ServiceBuilder {\n    this.routers.push([root, router]);\n    return this;\n  }\n\n  setRequestLoggingHandler(\n    requestLoggingHandler: RequestLoggingHandlerFactory,\n  ) {\n    this.requestLoggingHandler = requestLoggingHandler;\n    return this;\n  }\n\n  setErrorHandler(errorHandler: ErrorRequestHandler) {\n    this.errorHandler = errorHandler;\n    return this;\n  }\n\n  disableDefaultErrorHandler() {\n    this.useDefaultErrorHandler = false;\n    return this;\n  }\n\n  async start(): Promise<http.Server> {\n    const app = express();\n    const { port, host, logger, corsOptions, httpsSettings, helmetOptions } =\n      this.getOptions();\n\n    app.use(helmet(helmetOptions));\n    if (corsOptions) {\n      app.use(cors(corsOptions));\n    }\n    app.use(compression());\n    app.use(\n      (this.requestLoggingHandler ?? defaultRequestLoggingHandler)(logger),\n    );\n    for (const [root, route] of this.routers) {\n      app.use(root, route);\n    }\n    app.use(notFoundHandler());\n\n    if (this.errorHandler) {\n      app.use(this.errorHandler);\n    }\n\n    if (this.useDefaultErrorHandler) {\n      app.use(defaultErrorHandler());\n    }\n\n    const server: http.Server = httpsSettings\n      ? await createHttpsServer(app, httpsSettings, logger)\n      : createHttpServer(app, logger);\n    const stoppableServer = stoppable(server, 0);\n\n    useHotCleanup(this.module, () =>\n      stoppableServer.stop((e: any) => {\n        if (e) console.error(e);\n      }),\n    );\n\n    return new Promise((resolve, reject) => {\n      function handleStartupError(e: unknown) {\n        server.close();\n        reject(e);\n      }\n\n      server.on('error', handleStartupError);\n\n      server.listen(port, host, () => {\n        server.off('error', handleStartupError);\n        logger.info(`Listening on ${host}:${port}`);\n        resolve(stoppableServer);\n      });\n    });\n  }\n\n  private getOptions() {\n    return {\n      port: this.port ?? DEFAULT_PORT,\n      host: this.host ?? DEFAULT_HOST,\n      logger: this.logger ?? getRootLogger(),\n      corsOptions: this.corsOptions,\n      httpsSettings: this.httpsSettings,\n      helmetOptions: {\n        contentSecurityPolicy: {\n          useDefaults: false,\n          directives: applyCspDirectives(this.cspOptions),\n        },\n        // These are all disabled in order to maintain backwards compatibility\n        // when bumping helmet v5. We can't enable these by default because\n        // there is no way for users to configure them.\n        // TODO(Rugvip): We should give control of this setup to consumers\n        crossOriginEmbedderPolicy: false,\n        crossOriginOpenerPolicy: false,\n        crossOriginResourcePolicy: false,\n        originAgentCluster: false,\n      },\n    };\n  }\n}\n\nexport function applyCspDirectives(\n  directives: Record<string, string[] | false> | undefined,\n): ContentSecurityPolicyOptions['directives'] {\n  const result: ContentSecurityPolicyOptions['directives'] =\n    helmet.contentSecurityPolicy.getDefaultDirectives();\n\n  // TODO(Rugvip): We currently use non-precompiled AJV for validation in the frontend, which uses eval.\n  //               It should be replaced by any other solution that doesn't require unsafe-eval.\n  result['script-src'] = [\"'self'\", \"'unsafe-eval'\"];\n\n  // TODO(Rugvip): This is removed so that we maintained backwards compatibility\n  //               when bumping to helmet v5, we could remove this as well as\n  //               skip setting `useDefaults: false` in the future.\n  delete result['form-action'];\n\n  if (directives) {\n    for (const [key, value] of Object.entries(directives)) {\n      if (value === false) {\n        delete result[key];\n      } else {\n        result[key] = value;\n      }\n    }\n  }\n\n  return result;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { PluginEndpointDiscovery } from './types';\nimport { readBaseOptions } from '../service/lib/config';\nimport { DEFAULT_PORT } from '../service/lib/ServiceBuilderImpl';\n\n/**\n * SingleHostDiscovery is a basic PluginEndpointDiscovery implementation\n * that assumes that all plugins are hosted in a single deployment.\n *\n * The deployment may be scaled horizontally, as long as the external URL\n * is the same for all instances. However, internal URLs will always be\n * resolved to the same host, so there won't be any balancing of internal traffic.\n *\n * @public\n */\nexport class SingleHostDiscovery implements PluginEndpointDiscovery {\n  /**\n   * Creates a new SingleHostDiscovery discovery instance by reading\n   * from the `backend` config section, specifically the `.baseUrl` for\n   * discovering the external URL, and the `.listen` and `.https` config\n   * for the internal one.\n   *\n   * The basePath defaults to `/api`, meaning the default full internal\n   * path for the `catalog` plugin will be `http://localhost:7007/api/catalog`.\n   */\n  static fromConfig(config: Config, options?: { basePath?: string }) {\n    const basePath = options?.basePath ?? '/api';\n    const externalBaseUrl = config.getString('backend.baseUrl');\n\n    const { listenHost = '::', listenPort = DEFAULT_PORT } = readBaseOptions(\n      config.getConfig('backend'),\n    );\n    const protocol = config.has('backend.https') ? 'https' : 'http';\n\n    // Translate bind-all to localhost, and support IPv6\n    let host = listenHost;\n    if (host === '::') {\n      // We use localhost instead of ::1, since IPv6-compatible systems should default\n      // to using IPv6 when they see localhost, but if the system doesn't support IPv6\n      // things will still work.\n      host = 'localhost';\n    } else if (host === '0.0.0.0') {\n      host = '127.0.0.1';\n    }\n    if (host.includes(':')) {\n      host = `[${host}]`;\n    }\n\n    const internalBaseUrl = `${protocol}://${host}:${listenPort}`;\n\n    return new SingleHostDiscovery(\n      internalBaseUrl + basePath,\n      externalBaseUrl + basePath,\n    );\n  }\n\n  private constructor(\n    private readonly internalBaseUrl: string,\n    private readonly externalBaseUrl: string,\n  ) {}\n\n  async getBaseUrl(pluginId: string): Promise<string> {\n    return `${this.internalBaseUrl}/${pluginId}`;\n  }\n\n  async getExternalBaseUrl(pluginId: string): Promise<string> {\n    return `${this.externalBaseUrl}/${pluginId}`;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isChildPath } from '@backstage/cli-common';\nimport { NotAllowedError } from '@backstage/errors';\nimport { resolve as resolvePath } from 'path';\n\n/**\n * Resolve a path relative to the root of a package directory.\n * Additional path arguments are resolved relative to the package dir.\n *\n * This is particularly useful when you want to access assets shipped with\n * your backend plugin package. When doing so, do not forget to include the assets\n * in your published package by adding them to `files` in your `package.json`.\n *\n * @public\n */\nexport function resolvePackagePath(name: string, ...paths: string[]) {\n  const req =\n    typeof __non_webpack_require__ === 'undefined'\n      ? require\n      : __non_webpack_require__;\n\n  return resolvePath(req.resolve(`${name}/package.json`), '..', ...paths);\n}\n\n/**\n * Resolves a target path from a base path while guaranteeing that the result is\n * a path that point to or within the base path. This is useful for resolving\n * paths from user input, as it otherwise opens up for vulnerabilities.\n *\n * @public\n * @param base - The base directory to resolve the path from.\n * @param path - The target path, relative or absolute\n * @returns A path that is guaranteed to point to or within the base path.\n */\nexport function resolveSafeChildPath(base: string, path: string): string {\n  const targetPath = resolvePath(base, path);\n\n  if (!isChildPath(base, targetPath)) {\n    throw new NotAllowedError(\n      'Relative path is not allowed to refer to a directory outside its parent',\n    );\n  }\n\n  return targetPath;\n}\n\n// Re-export isChildPath so that backend packages don't need to depend on cli-common\nexport { isChildPath };\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ConflictError } from '@backstage/errors';\nimport getRawBody from 'raw-body';\nimport { Readable } from 'stream';\nimport {\n  ReadUrlResponse,\n  ReadUrlResponseFactoryFromStreamOptions,\n} from './types';\n\n/**\n * Utility class for UrlReader implementations to create valid ReadUrlResponse\n * instances from common response primitives.\n *\n * @public\n */\nexport class ReadUrlResponseFactory {\n  /**\n   * Resolves a ReadUrlResponse from a Readable stream.\n   */\n  static async fromReadable(\n    stream: Readable,\n    options?: ReadUrlResponseFactoryFromStreamOptions,\n  ): Promise<ReadUrlResponse> {\n    // Reference to eventual buffer enables callers to call buffer() multiple\n    // times without consequence.\n    let buffer: Promise<Buffer>;\n\n    // Prevent \"stream is not readable\" errors from bubbling up.\n    const conflictError = new ConflictError(\n      'Cannot use buffer() and stream() from the same ReadUrlResponse',\n    );\n    let hasCalledStream = false;\n    let hasCalledBuffer = false;\n\n    return {\n      buffer: () => {\n        hasCalledBuffer = true;\n        if (hasCalledStream) throw conflictError;\n        if (buffer) return buffer;\n        buffer = getRawBody(stream);\n        return buffer;\n      },\n      stream: () => {\n        hasCalledStream = true;\n        if (hasCalledBuffer) throw conflictError;\n        return stream;\n      },\n      etag: options?.etag,\n    };\n  }\n\n  /**\n   * Resolves a ReadUrlResponse from an old-style NodeJS.ReadableStream.\n   */\n  static async fromNodeJSReadable(\n    oldStyleStream: NodeJS.ReadableStream,\n    options?: ReadUrlResponseFactoryFromStreamOptions,\n  ): Promise<ReadUrlResponse> {\n    const readable = new Readable().wrap(oldStyleStream);\n    return ReadUrlResponseFactory.fromReadable(readable, options);\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AzureIntegration,\n  getAzureCommitsUrl,\n  getAzureDownloadUrl,\n  getAzureFileFetchUrl,\n  getAzureRequestOptions,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport fetch, { Response } from 'node-fetch';\nimport { Minimatch } from 'minimatch';\nimport { Readable } from 'stream';\nimport { NotFoundError, NotModifiedError } from '@backstage/errors';\nimport {\n  ReadTreeResponseFactory,\n  ReaderFactory,\n  ReadTreeOptions,\n  ReadTreeResponse,\n  SearchOptions,\n  SearchResponse,\n  UrlReader,\n  ReadUrlOptions,\n  ReadUrlResponse,\n} from './types';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\n\n/**\n * Implements a {@link UrlReader} for Azure repos.\n *\n * @public\n */\nexport class AzureUrlReader implements UrlReader {\n  static factory: ReaderFactory = ({ config, treeResponseFactory }) => {\n    const integrations = ScmIntegrations.fromConfig(config);\n    return integrations.azure.list().map(integration => {\n      const reader = new AzureUrlReader(integration, { treeResponseFactory });\n      const predicate = (url: URL) => url.host === integration.config.host;\n      return { reader, predicate };\n    });\n  };\n\n  constructor(\n    private readonly integration: AzureIntegration,\n    private readonly deps: { treeResponseFactory: ReadTreeResponseFactory },\n  ) {}\n\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  async readUrl(\n    url: string,\n    options?: ReadUrlOptions,\n  ): Promise<ReadUrlResponse> {\n    // TODO: etag is not implemented yet.\n    const { signal } = options ?? {};\n\n    const builtUrl = getAzureFileFetchUrl(url);\n\n    let response: Response;\n    try {\n      response = await fetch(builtUrl, {\n        ...getAzureRequestOptions(this.integration.config),\n        // TODO(freben): The signal cast is there because pre-3.x versions of\n        // node-fetch have a very slightly deviating AbortSignal type signature.\n        // The difference does not affect us in practice however. The cast can\n        // be removed after we support ESM for CLI dependencies and migrate to\n        // version 3 of node-fetch.\n        // https://github.com/backstage/backstage/issues/8242\n        ...(signal && { signal: signal as any }),\n      });\n    } catch (e) {\n      throw new Error(`Unable to read ${url}, ${e}`);\n    }\n\n    // for private repos when PAT is not valid, Azure API returns a http status code 203 with sign in page html\n    if (response.ok && response.status !== 203) {\n      return ReadUrlResponseFactory.fromNodeJSReadable(response.body);\n    }\n\n    const message = `${url} could not be read as ${builtUrl}, ${response.status} ${response.statusText}`;\n    if (response.status === 404) {\n      throw new NotFoundError(message);\n    }\n    throw new Error(message);\n  }\n\n  async readTree(\n    url: string,\n    options?: ReadTreeOptions,\n  ): Promise<ReadTreeResponse> {\n    const { etag, filter, signal } = options ?? {};\n\n    // TODO: Support filepath based reading tree feature like other providers\n\n    // Get latest commit SHA\n\n    const commitsAzureResponse = await fetch(\n      getAzureCommitsUrl(url),\n      getAzureRequestOptions(this.integration.config),\n    );\n    if (!commitsAzureResponse.ok) {\n      const message = `Failed to read tree from ${url}, ${commitsAzureResponse.status} ${commitsAzureResponse.statusText}`;\n      if (commitsAzureResponse.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    const commitSha = (await commitsAzureResponse.json()).value[0].commitId;\n    if (etag && etag === commitSha) {\n      throw new NotModifiedError();\n    }\n\n    const archiveAzureResponse = await fetch(getAzureDownloadUrl(url), {\n      ...getAzureRequestOptions(this.integration.config, {\n        Accept: 'application/zip',\n      }),\n      // TODO(freben): The signal cast is there because pre-3.x versions of\n      // node-fetch have a very slightly deviating AbortSignal type signature.\n      // The difference does not affect us in practice however. The cast can be\n      // removed after we support ESM for CLI dependencies and migrate to\n      // version 3 of node-fetch.\n      // https://github.com/backstage/backstage/issues/8242\n      ...(signal && { signal: signal as any }),\n    });\n    if (!archiveAzureResponse.ok) {\n      const message = `Failed to read tree from ${url}, ${archiveAzureResponse.status} ${archiveAzureResponse.statusText}`;\n      if (archiveAzureResponse.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    // When downloading a zip archive from azure on a subpath we get an extra directory\n    // layer added at the top. With for example the file /a/b/c.txt and a download of\n    // /a/b, we'll see /b/c.txt in the zip archive. This picks out /b so that we can remove it.\n    let subpath;\n    const path = new URL(url).searchParams.get('path');\n    if (path) {\n      subpath = path.split('/').filter(Boolean).slice(-1)[0];\n    }\n\n    return await this.deps.treeResponseFactory.fromZipArchive({\n      stream: archiveAzureResponse.body as unknown as Readable,\n      etag: commitSha,\n      filter,\n      subpath,\n    });\n  }\n\n  async search(url: string, options?: SearchOptions): Promise<SearchResponse> {\n    const treeUrl = new URL(url);\n\n    const path = treeUrl.searchParams.get('path');\n    const matcher = path && new Minimatch(path.replace(/^\\/+/, ''));\n\n    // TODO(freben): For now, read the entire repo and filter through that. In\n    // a future improvement, we could be smart and try to deduce that non-glob\n    // prefixes (like for filepaths such as some-prefix/**/a.yaml) can be used\n    // to get just that part of the repo.\n    treeUrl.searchParams.delete('path');\n\n    const tree = await this.readTree(treeUrl.toString(), {\n      etag: options?.etag,\n      signal: options?.signal,\n      filter: p => (matcher ? matcher.match(p) : true),\n    });\n    const files = await tree.files();\n\n    return {\n      etag: tree.etag,\n      files: files.map(file => ({\n        url: this.integration.resolveUrl({\n          url: `/${file.path}`,\n          base: url,\n        }),\n        content: file.content,\n      })),\n    };\n  }\n\n  toString() {\n    const { host, token } = this.integration.config;\n    return `azure{host=${host},authed=${Boolean(token)}}`;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NotFoundError, NotModifiedError } from '@backstage/errors';\nimport {\n  BitbucketCloudIntegration,\n  getBitbucketCloudDefaultBranch,\n  getBitbucketCloudDownloadUrl,\n  getBitbucketCloudFileFetchUrl,\n  getBitbucketCloudRequestOptions,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport fetch, { Response } from 'node-fetch';\nimport parseGitUrl from 'git-url-parse';\nimport { trimEnd } from 'lodash';\nimport { Minimatch } from 'minimatch';\nimport { Readable } from 'stream';\nimport {\n  ReaderFactory,\n  ReadTreeOptions,\n  ReadTreeResponse,\n  ReadTreeResponseFactory,\n  ReadUrlOptions,\n  ReadUrlResponse,\n  SearchOptions,\n  SearchResponse,\n  UrlReader,\n} from './types';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\n\n/**\n * Implements a {@link UrlReader} for files from Bitbucket Cloud.\n *\n * @public\n */\nexport class BitbucketCloudUrlReader implements UrlReader {\n  static factory: ReaderFactory = ({ config, treeResponseFactory }) => {\n    const integrations = ScmIntegrations.fromConfig(config);\n    return integrations.bitbucketCloud.list().map(integration => {\n      const reader = new BitbucketCloudUrlReader(integration, {\n        treeResponseFactory,\n      });\n      const predicate = (url: URL) => url.host === integration.config.host;\n      return { reader, predicate };\n    });\n  };\n\n  constructor(\n    private readonly integration: BitbucketCloudIntegration,\n    private readonly deps: { treeResponseFactory: ReadTreeResponseFactory },\n  ) {\n    const { host, username, appPassword } = integration.config;\n\n    if (username && !appPassword) {\n      throw new Error(\n        `Bitbucket Cloud integration for '${host}' has configured a username but is missing a required appPassword.`,\n      );\n    }\n  }\n\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  async readUrl(\n    url: string,\n    options?: ReadUrlOptions,\n  ): Promise<ReadUrlResponse> {\n    const { etag, signal } = options ?? {};\n    const bitbucketUrl = getBitbucketCloudFileFetchUrl(\n      url,\n      this.integration.config,\n    );\n    const requestOptions = getBitbucketCloudRequestOptions(\n      this.integration.config,\n    );\n\n    let response: Response;\n    try {\n      response = await fetch(bitbucketUrl.toString(), {\n        headers: {\n          ...requestOptions.headers,\n          ...(etag && { 'If-None-Match': etag }),\n        },\n        // TODO(freben): The signal cast is there because pre-3.x versions of\n        // node-fetch have a very slightly deviating AbortSignal type signature.\n        // The difference does not affect us in practice however. The cast can be\n        // removed after we support ESM for CLI dependencies and migrate to\n        // version 3 of node-fetch.\n        // https://github.com/backstage/backstage/issues/8242\n        ...(signal && { signal: signal as any }),\n      });\n    } catch (e) {\n      throw new Error(`Unable to read ${url}, ${e}`);\n    }\n\n    if (response.status === 304) {\n      throw new NotModifiedError();\n    }\n\n    if (response.ok) {\n      return ReadUrlResponseFactory.fromNodeJSReadable(response.body, {\n        etag: response.headers.get('ETag') ?? undefined,\n      });\n    }\n\n    const message = `${url} could not be read as ${bitbucketUrl}, ${response.status} ${response.statusText}`;\n    if (response.status === 404) {\n      throw new NotFoundError(message);\n    }\n    throw new Error(message);\n  }\n\n  async readTree(\n    url: string,\n    options?: ReadTreeOptions,\n  ): Promise<ReadTreeResponse> {\n    const { filepath } = parseGitUrl(url);\n\n    const lastCommitShortHash = await this.getLastCommitShortHash(url);\n    if (options?.etag && options.etag === lastCommitShortHash) {\n      throw new NotModifiedError();\n    }\n\n    const downloadUrl = await getBitbucketCloudDownloadUrl(\n      url,\n      this.integration.config,\n    );\n    const archiveResponse = await fetch(\n      downloadUrl,\n      getBitbucketCloudRequestOptions(this.integration.config),\n    );\n    if (!archiveResponse.ok) {\n      const message = `Failed to read tree from ${url}, ${archiveResponse.status} ${archiveResponse.statusText}`;\n      if (archiveResponse.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    return await this.deps.treeResponseFactory.fromTarArchive({\n      stream: archiveResponse.body as unknown as Readable,\n      subpath: filepath,\n      etag: lastCommitShortHash,\n      filter: options?.filter,\n    });\n  }\n\n  async search(url: string, options?: SearchOptions): Promise<SearchResponse> {\n    const { filepath } = parseGitUrl(url);\n    const matcher = new Minimatch(filepath);\n\n    // TODO(freben): For now, read the entire repo and filter through that. In\n    // a future improvement, we could be smart and try to deduce that non-glob\n    // prefixes (like for filepaths such as some-prefix/**/a.yaml) can be used\n    // to get just that part of the repo.\n    const treeUrl = trimEnd(url.replace(filepath, ''), '/');\n\n    const tree = await this.readTree(treeUrl, {\n      etag: options?.etag,\n      filter: path => matcher.match(path),\n    });\n    const files = await tree.files();\n\n    return {\n      etag: tree.etag,\n      files: files.map(file => ({\n        url: this.integration.resolveUrl({\n          url: `/${file.path}`,\n          base: url,\n        }),\n        content: file.content,\n      })),\n    };\n  }\n\n  toString() {\n    const { host, username, appPassword } = this.integration.config;\n    const authed = Boolean(username && appPassword);\n    return `bitbucketCloud{host=${host},authed=${authed}}`;\n  }\n\n  private async getLastCommitShortHash(url: string): Promise<string> {\n    const { name: repoName, owner: project, ref } = parseGitUrl(url);\n\n    let branch = ref;\n    if (!branch) {\n      branch = await getBitbucketCloudDefaultBranch(\n        url,\n        this.integration.config,\n      );\n    }\n\n    const commitsApiUrl = `${this.integration.config.apiBaseUrl}/repositories/${project}/${repoName}/commits/${branch}`;\n\n    const commitsResponse = await fetch(\n      commitsApiUrl,\n      getBitbucketCloudRequestOptions(this.integration.config),\n    );\n    if (!commitsResponse.ok) {\n      const message = `Failed to retrieve commits from ${commitsApiUrl}, ${commitsResponse.status} ${commitsResponse.statusText}`;\n      if (commitsResponse.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    const commits = await commitsResponse.json();\n    if (\n      commits &&\n      commits.values &&\n      commits.values.length > 0 &&\n      commits.values[0].hash\n    ) {\n      return commits.values[0].hash.substring(0, 12);\n    }\n\n    throw new Error(`Failed to read response from ${commitsApiUrl}`);\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NotFoundError, NotModifiedError } from '@backstage/errors';\nimport {\n  BitbucketIntegration,\n  getBitbucketDefaultBranch,\n  getBitbucketDownloadUrl,\n  getBitbucketFileFetchUrl,\n  getBitbucketRequestOptions,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport fetch, { Response } from 'node-fetch';\nimport parseGitUrl from 'git-url-parse';\nimport { trimEnd } from 'lodash';\nimport { Minimatch } from 'minimatch';\nimport { Readable } from 'stream';\nimport { Logger } from 'winston';\nimport {\n  ReaderFactory,\n  ReadTreeOptions,\n  ReadTreeResponse,\n  ReadTreeResponseFactory,\n  ReadUrlOptions,\n  ReadUrlResponse,\n  SearchOptions,\n  SearchResponse,\n  UrlReader,\n} from './types';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\n\n/**\n * Implements a {@link UrlReader} for files from Bitbucket v1 and v2 APIs, such\n * as the one exposed by Bitbucket Cloud itself.\n *\n * @public\n * @deprecated in favor of BitbucketCloudUrlReader and BitbucketServerUrlReader\n */\nexport class BitbucketUrlReader implements UrlReader {\n  static factory: ReaderFactory = ({ config, logger, treeResponseFactory }) => {\n    const integrations = ScmIntegrations.fromConfig(config);\n    return integrations.bitbucket\n      .list()\n      .filter(\n        item =>\n          !integrations.bitbucketCloud.byHost(item.config.host) &&\n          !integrations.bitbucketServer.byHost(item.config.host),\n      )\n      .map(integration => {\n        const reader = new BitbucketUrlReader(integration, logger, {\n          treeResponseFactory,\n        });\n        const predicate = (url: URL) => url.host === integration.config.host;\n        return { reader, predicate };\n      });\n  };\n\n  constructor(\n    private readonly integration: BitbucketIntegration,\n    logger: Logger,\n    private readonly deps: { treeResponseFactory: ReadTreeResponseFactory },\n  ) {\n    const { host, token, username, appPassword } = integration.config;\n    const replacement =\n      host === 'bitbucket.org' ? 'bitbucketCloud' : 'bitbucketServer';\n    logger.warn(\n      `[Deprecated] Please migrate from \"integrations.bitbucket\" to \"integrations.${replacement}\".`,\n    );\n\n    if (!token && username && !appPassword) {\n      throw new Error(\n        `Bitbucket integration for '${host}' has configured a username but is missing a required appPassword.`,\n      );\n    }\n  }\n\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  async readUrl(\n    url: string,\n    options?: ReadUrlOptions,\n  ): Promise<ReadUrlResponse> {\n    const { etag, signal } = options ?? {};\n    const bitbucketUrl = getBitbucketFileFetchUrl(url, this.integration.config);\n    const requestOptions = getBitbucketRequestOptions(this.integration.config);\n\n    let response: Response;\n    try {\n      response = await fetch(bitbucketUrl.toString(), {\n        headers: {\n          ...requestOptions.headers,\n          ...(etag && { 'If-None-Match': etag }),\n        },\n        // TODO(freben): The signal cast is there because pre-3.x versions of\n        // node-fetch have a very slightly deviating AbortSignal type signature.\n        // The difference does not affect us in practice however. The cast can be\n        // removed after we support ESM for CLI dependencies and migrate to\n        // version 3 of node-fetch.\n        // https://github.com/backstage/backstage/issues/8242\n        ...(signal && { signal: signal as any }),\n      });\n    } catch (e) {\n      throw new Error(`Unable to read ${url}, ${e}`);\n    }\n\n    if (response.status === 304) {\n      throw new NotModifiedError();\n    }\n\n    if (response.ok) {\n      return ReadUrlResponseFactory.fromNodeJSReadable(response.body, {\n        etag: response.headers.get('ETag') ?? undefined,\n      });\n    }\n\n    const message = `${url} could not be read as ${bitbucketUrl}, ${response.status} ${response.statusText}`;\n    if (response.status === 404) {\n      throw new NotFoundError(message);\n    }\n    throw new Error(message);\n  }\n\n  async readTree(\n    url: string,\n    options?: ReadTreeOptions,\n  ): Promise<ReadTreeResponse> {\n    const { filepath } = parseGitUrl(url);\n\n    const lastCommitShortHash = await this.getLastCommitShortHash(url);\n    if (options?.etag && options.etag === lastCommitShortHash) {\n      throw new NotModifiedError();\n    }\n\n    const downloadUrl = await getBitbucketDownloadUrl(\n      url,\n      this.integration.config,\n    );\n    const archiveBitbucketResponse = await fetch(\n      downloadUrl,\n      getBitbucketRequestOptions(this.integration.config),\n    );\n    if (!archiveBitbucketResponse.ok) {\n      const message = `Failed to read tree from ${url}, ${archiveBitbucketResponse.status} ${archiveBitbucketResponse.statusText}`;\n      if (archiveBitbucketResponse.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    return await this.deps.treeResponseFactory.fromTarArchive({\n      stream: archiveBitbucketResponse.body as unknown as Readable,\n      subpath: filepath,\n      etag: lastCommitShortHash,\n      filter: options?.filter,\n    });\n  }\n\n  async search(url: string, options?: SearchOptions): Promise<SearchResponse> {\n    const { filepath } = parseGitUrl(url);\n    const matcher = new Minimatch(filepath);\n\n    // TODO(freben): For now, read the entire repo and filter through that. In\n    // a future improvement, we could be smart and try to deduce that non-glob\n    // prefixes (like for filepaths such as some-prefix/**/a.yaml) can be used\n    // to get just that part of the repo.\n    const treeUrl = trimEnd(url.replace(filepath, ''), '/');\n\n    const tree = await this.readTree(treeUrl, {\n      etag: options?.etag,\n      filter: path => matcher.match(path),\n    });\n    const files = await tree.files();\n\n    return {\n      etag: tree.etag,\n      files: files.map(file => ({\n        url: this.integration.resolveUrl({\n          url: `/${file.path}`,\n          base: url,\n        }),\n        content: file.content,\n      })),\n    };\n  }\n\n  toString() {\n    const { host, token, username, appPassword } = this.integration.config;\n    let authed = Boolean(token);\n    if (!authed) {\n      authed = Boolean(username && appPassword);\n    }\n    return `bitbucket{host=${host},authed=${authed}}`;\n  }\n\n  private async getLastCommitShortHash(url: string): Promise<string> {\n    const { resource, name: repoName, owner: project, ref } = parseGitUrl(url);\n\n    let branch = ref;\n    if (!branch) {\n      branch = await getBitbucketDefaultBranch(url, this.integration.config);\n    }\n\n    const isHosted = resource === 'bitbucket.org';\n    // Bitbucket Server https://docs.atlassian.com/bitbucket-server/rest/7.9.0/bitbucket-rest.html#idp222\n    const commitsApiUrl = isHosted\n      ? `${this.integration.config.apiBaseUrl}/repositories/${project}/${repoName}/commits/${branch}`\n      : `${this.integration.config.apiBaseUrl}/projects/${project}/repos/${repoName}/commits`;\n\n    const commitsResponse = await fetch(\n      commitsApiUrl,\n      getBitbucketRequestOptions(this.integration.config),\n    );\n    if (!commitsResponse.ok) {\n      const message = `Failed to retrieve commits from ${commitsApiUrl}, ${commitsResponse.status} ${commitsResponse.statusText}`;\n      if (commitsResponse.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    const commits = await commitsResponse.json();\n    if (isHosted) {\n      if (\n        commits &&\n        commits.values &&\n        commits.values.length > 0 &&\n        commits.values[0].hash\n      ) {\n        return commits.values[0].hash.substring(0, 12);\n      }\n    } else {\n      if (\n        commits &&\n        commits.values &&\n        commits.values.length > 0 &&\n        commits.values[0].id\n      ) {\n        return commits.values[0].id.substring(0, 12);\n      }\n    }\n\n    throw new Error(`Failed to read response from ${commitsApiUrl}`);\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NotFoundError, NotModifiedError } from '@backstage/errors';\nimport {\n  BitbucketServerIntegration,\n  getBitbucketServerDownloadUrl,\n  getBitbucketServerFileFetchUrl,\n  getBitbucketServerRequestOptions,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport fetch, { Response } from 'node-fetch';\nimport parseGitUrl from 'git-url-parse';\nimport { trimEnd } from 'lodash';\nimport { Minimatch } from 'minimatch';\nimport { Readable } from 'stream';\nimport {\n  ReaderFactory,\n  ReadTreeOptions,\n  ReadTreeResponse,\n  ReadTreeResponseFactory,\n  ReadUrlOptions,\n  ReadUrlResponse,\n  SearchOptions,\n  SearchResponse,\n  UrlReader,\n} from './types';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\n\n/**\n * Implements a {@link UrlReader} for files from Bitbucket Server APIs.\n *\n * @public\n */\nexport class BitbucketServerUrlReader implements UrlReader {\n  static factory: ReaderFactory = ({ config, treeResponseFactory }) => {\n    const integrations = ScmIntegrations.fromConfig(config);\n    return integrations.bitbucketServer.list().map(integration => {\n      const reader = new BitbucketServerUrlReader(integration, {\n        treeResponseFactory,\n      });\n      const predicate = (url: URL) => url.host === integration.config.host;\n      return { reader, predicate };\n    });\n  };\n\n  constructor(\n    private readonly integration: BitbucketServerIntegration,\n    private readonly deps: { treeResponseFactory: ReadTreeResponseFactory },\n  ) {}\n\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  async readUrl(\n    url: string,\n    options?: ReadUrlOptions,\n  ): Promise<ReadUrlResponse> {\n    const { etag, signal } = options ?? {};\n    const bitbucketUrl = getBitbucketServerFileFetchUrl(\n      url,\n      this.integration.config,\n    );\n    const requestOptions = getBitbucketServerRequestOptions(\n      this.integration.config,\n    );\n\n    let response: Response;\n    try {\n      response = await fetch(bitbucketUrl.toString(), {\n        headers: {\n          ...requestOptions.headers,\n          ...(etag && { 'If-None-Match': etag }),\n        },\n        // TODO(freben): The signal cast is there because pre-3.x versions of\n        // node-fetch have a very slightly deviating AbortSignal type signature.\n        // The difference does not affect us in practice however. The cast can be\n        // removed after we support ESM for CLI dependencies and migrate to\n        // version 3 of node-fetch.\n        // https://github.com/backstage/backstage/issues/8242\n        ...(signal && { signal: signal as any }),\n      });\n    } catch (e) {\n      throw new Error(`Unable to read ${url}, ${e}`);\n    }\n\n    if (response.status === 304) {\n      throw new NotModifiedError();\n    }\n\n    if (response.ok) {\n      return ReadUrlResponseFactory.fromNodeJSReadable(response.body, {\n        etag: response.headers.get('ETag') ?? undefined,\n      });\n    }\n\n    const message = `${url} could not be read as ${bitbucketUrl}, ${response.status} ${response.statusText}`;\n    if (response.status === 404) {\n      throw new NotFoundError(message);\n    }\n    throw new Error(message);\n  }\n\n  async readTree(\n    url: string,\n    options?: ReadTreeOptions,\n  ): Promise<ReadTreeResponse> {\n    const { filepath } = parseGitUrl(url);\n\n    const lastCommitShortHash = await this.getLastCommitShortHash(url);\n    if (options?.etag && options.etag === lastCommitShortHash) {\n      throw new NotModifiedError();\n    }\n\n    const downloadUrl = await getBitbucketServerDownloadUrl(\n      url,\n      this.integration.config,\n    );\n    const archiveResponse = await fetch(\n      downloadUrl,\n      getBitbucketServerRequestOptions(this.integration.config),\n    );\n    if (!archiveResponse.ok) {\n      const message = `Failed to read tree from ${url}, ${archiveResponse.status} ${archiveResponse.statusText}`;\n      if (archiveResponse.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    return await this.deps.treeResponseFactory.fromTarArchive({\n      stream: archiveResponse.body as unknown as Readable,\n      subpath: filepath,\n      etag: lastCommitShortHash,\n      filter: options?.filter,\n    });\n  }\n\n  async search(url: string, options?: SearchOptions): Promise<SearchResponse> {\n    const { filepath } = parseGitUrl(url);\n    const matcher = new Minimatch(filepath);\n\n    // TODO(freben): For now, read the entire repo and filter through that. In\n    // a future improvement, we could be smart and try to deduce that non-glob\n    // prefixes (like for filepaths such as some-prefix/**/a.yaml) can be used\n    // to get just that part of the repo.\n    const treeUrl = trimEnd(url.replace(filepath, ''), '/');\n\n    const tree = await this.readTree(treeUrl, {\n      etag: options?.etag,\n      filter: path => matcher.match(path),\n    });\n    const files = await tree.files();\n\n    return {\n      etag: tree.etag,\n      files: files.map(file => ({\n        url: this.integration.resolveUrl({\n          url: `/${file.path}`,\n          base: url,\n        }),\n        content: file.content,\n      })),\n    };\n  }\n\n  toString() {\n    const { host, token } = this.integration.config;\n    const authed = Boolean(token);\n    return `bitbucketServer{host=${host},authed=${authed}}`;\n  }\n\n  private async getLastCommitShortHash(url: string): Promise<string> {\n    const { name: repoName, owner: project, ref: branch } = parseGitUrl(url);\n\n    // If a branch is provided use that otherwise fall back to the default branch\n    const branchParameter = branch\n      ? `?filterText=${encodeURIComponent(branch)}`\n      : '/default';\n\n    // https://docs.atlassian.com/bitbucket-server/rest/7.9.0/bitbucket-rest.html#idp211 (branches docs)\n    const branchListUrl = `${this.integration.config.apiBaseUrl}/projects/${project}/repos/${repoName}/branches${branchParameter}`;\n\n    const branchListResponse = await fetch(\n      branchListUrl,\n      getBitbucketServerRequestOptions(this.integration.config),\n    );\n    if (!branchListResponse.ok) {\n      const message = `Failed to retrieve branch list from ${branchListUrl}, ${branchListResponse.status} ${branchListResponse.statusText}`;\n      if (branchListResponse.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    const branchMatches = await branchListResponse.json();\n\n    if (branchMatches && branchMatches.size > 0) {\n      const exactBranchMatch = branchMatches.values.filter(\n        (branchDetails: { displayId: string }) =>\n          branchDetails.displayId === branch,\n      )[0];\n      return exactBranchMatch.latestCommit.substring(0, 12);\n    }\n\n    // Handle when no branch is provided using the default as the fallback\n    if (!branch && branchMatches) {\n      return branchMatches.latestCommit.substring(0, 12);\n    }\n\n    throw new Error(\n      `Failed to find Last Commit using ${\n        branch ? `branch \"${branch}\"` : 'default branch'\n      } in response from ${branchListUrl}`,\n    );\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport git, {\n  ProgressCallback,\n  MergeResult,\n  ReadCommitResult,\n} from 'isomorphic-git';\nimport http from 'isomorphic-git/http/node';\nimport fs from 'fs-extra';\nimport { Logger } from 'winston';\n\n/*\nprovider          username         password\nAzure             'notempty'       token\nBitbucket Cloud   'x-token-auth'   token\nBitbucket Server  username         password or token\nGitHub            'x-access-token' token\nGitLab            'oauth2'         token\n\nFrom : https://isomorphic-git.org/docs/en/onAuth with fix for GitHub\n\nOr token provided as `token` for Bearer auth header\ninstead of Basic Auth (e.g., Bitbucket Server).\n*/\n\n/**\n * A convenience wrapper around the `isomorphic-git` library.\n *\n * @public\n */\nexport class Git {\n  private readonly headers: {\n    [x: string]: string;\n  };\n\n  private constructor(\n    private readonly config: {\n      username?: string;\n      password?: string;\n      token?: string;\n      logger?: Logger;\n    },\n  ) {\n    this.headers = {\n      'user-agent': 'git/@isomorphic-git',\n      ...(config.token ? { Authorization: `Bearer ${config.token}` } : {}),\n    };\n  }\n\n  async add(options: { dir: string; filepath: string }): Promise<void> {\n    const { dir, filepath } = options;\n    this.config.logger?.info(`Adding file {dir=${dir},filepath=${filepath}}`);\n\n    return git.add({ fs, dir, filepath });\n  }\n\n  async addRemote(options: {\n    dir: string;\n    remote: string;\n    url: string;\n    force?: boolean;\n  }): Promise<void> {\n    const { dir, url, remote, force } = options;\n    this.config.logger?.info(\n      `Creating new remote {dir=${dir},remote=${remote},url=${url}}`,\n    );\n    return git.addRemote({ fs, dir, remote, url, force });\n  }\n\n  async deleteRemote(options: { dir: string; remote: string }): Promise<void> {\n    const { dir, remote } = options;\n    this.config.logger?.info(`Deleting remote {dir=${dir},remote=${remote}}`);\n    return git.deleteRemote({ fs, dir, remote });\n  }\n\n  async checkout(options: { dir: string; ref: string }): Promise<void> {\n    const { dir, ref } = options;\n    this.config.logger?.info(`Checking out branch {dir=${dir},ref=${ref}}`);\n\n    return git.checkout({ fs, dir, ref });\n  }\n\n  async branch(options: { dir: string; ref: string }): Promise<void> {\n    const { dir, ref } = options;\n    this.config.logger?.info(`Creating branch {dir=${dir},ref=${ref}`);\n\n    return git.branch({ fs, dir, ref });\n  }\n\n  async commit(options: {\n    dir: string;\n    message: string;\n    author: { name: string; email: string };\n    committer: { name: string; email: string };\n  }): Promise<string> {\n    const { dir, message, author, committer } = options;\n    this.config.logger?.info(\n      `Committing file to repo {dir=${dir},message=${message}}`,\n    );\n\n    return git.commit({ fs, dir, message, author, committer });\n  }\n\n  /** https://isomorphic-git.org/docs/en/clone */\n  async clone(options: {\n    url: string;\n    dir: string;\n    ref?: string;\n    depth?: number;\n    noCheckout?: boolean;\n  }): Promise<void> {\n    const { url, dir, ref, depth, noCheckout } = options;\n    this.config.logger?.info(`Cloning repo {dir=${dir},url=${url}}`);\n\n    try {\n      return await git.clone({\n        fs,\n        http,\n        url,\n        dir,\n        ref,\n        singleBranch: true,\n        depth: depth ?? 1,\n        noCheckout,\n        onProgress: this.onProgressHandler(),\n        headers: this.headers,\n        onAuth: this.onAuth,\n      });\n    } catch (ex) {\n      this.config.logger?.error(`Failed to clone repo {dir=${dir},url=${url}}`);\n      if (ex.data) {\n        throw new Error(`${ex.message} {data=${JSON.stringify(ex.data)}}`);\n      }\n      throw ex;\n    }\n  }\n\n  /** https://isomorphic-git.org/docs/en/currentBranch */\n  async currentBranch(options: {\n    dir: string;\n    fullName?: boolean;\n  }): Promise<string | undefined> {\n    const { dir, fullName = false } = options;\n    return git.currentBranch({ fs, dir, fullname: fullName }) as Promise<\n      string | undefined\n    >;\n  }\n\n  /** https://isomorphic-git.org/docs/en/fetch */\n  async fetch(options: { dir: string; remote?: string }): Promise<void> {\n    const { dir, remote = 'origin' } = options;\n    this.config.logger?.info(\n      `Fetching remote=${remote} for repository {dir=${dir}}`,\n    );\n\n    try {\n      await git.fetch({\n        fs,\n        http,\n        dir,\n        remote,\n        onProgress: this.onProgressHandler(),\n        headers: this.headers,\n        onAuth: this.onAuth,\n      });\n    } catch (ex) {\n      this.config.logger?.error(\n        `Failed to fetch repo {dir=${dir},origin=${origin}}`,\n      );\n      if (ex.data) {\n        throw new Error(`${ex.message} {data=${JSON.stringify(ex.data)}}`);\n      }\n      throw ex;\n    }\n  }\n\n  async init(options: { dir: string; defaultBranch?: string }): Promise<void> {\n    const { dir, defaultBranch = 'master' } = options;\n    this.config.logger?.info(`Init git repository {dir=${dir}}`);\n\n    return git.init({\n      fs,\n      dir,\n      defaultBranch,\n    });\n  }\n\n  /** https://isomorphic-git.org/docs/en/merge */\n  async merge(options: {\n    dir: string;\n    theirs: string;\n    ours?: string;\n    author: { name: string; email: string };\n    committer: { name: string; email: string };\n  }): Promise<MergeResult> {\n    const { dir, theirs, ours, author, committer } = options;\n    this.config.logger?.info(\n      `Merging branch '${theirs}' into '${ours}' for repository {dir=${dir}}`,\n    );\n\n    // If ours is undefined, current branch is used.\n    return git.merge({\n      fs,\n      dir,\n      ours,\n      theirs,\n      author,\n      committer,\n    });\n  }\n\n  async push(options: {\n    dir: string;\n    remote: string;\n    remoteRef?: string;\n    force?: boolean;\n  }) {\n    const { dir, remote, remoteRef, force } = options;\n    this.config.logger?.info(\n      `Pushing directory to remote {dir=${dir},remote=${remote}}`,\n    );\n    try {\n      return await git.push({\n        fs,\n        dir,\n        http,\n        onProgress: this.onProgressHandler(),\n        remoteRef,\n        force,\n        headers: this.headers,\n        remote,\n        onAuth: this.onAuth,\n      });\n    } catch (ex) {\n      this.config.logger?.error(\n        `Failed to push to repo {dir=${dir}, remote=${remote}}`,\n      );\n      if (ex.data) {\n        throw new Error(`${ex.message} {data=${JSON.stringify(ex.data)}}`);\n      }\n      throw ex;\n    }\n  }\n\n  /** https://isomorphic-git.org/docs/en/readCommit */\n  async readCommit(options: {\n    dir: string;\n    sha: string;\n  }): Promise<ReadCommitResult> {\n    const { dir, sha } = options;\n    return git.readCommit({ fs, dir, oid: sha });\n  }\n\n  /** https://isomorphic-git.org/docs/en/resolveRef */\n  async resolveRef(options: { dir: string; ref: string }): Promise<string> {\n    const { dir, ref } = options;\n    return git.resolveRef({ fs, dir, ref });\n  }\n\n  /** https://isomorphic-git.org/docs/en/log */\n  async log(options: {\n    dir: string;\n    ref?: string;\n  }): Promise<ReadCommitResult[]> {\n    const { dir, ref } = options;\n    return git.log({\n      fs,\n      dir,\n      ref: ref ?? 'HEAD',\n    });\n  }\n\n  private onAuth = () => ({\n    username: this.config.username,\n    password: this.config.password,\n  });\n\n  private onProgressHandler = (): ProgressCallback => {\n    let currentPhase = '';\n\n    return event => {\n      if (currentPhase !== event.phase) {\n        currentPhase = event.phase;\n        this.config.logger?.info(event.phase);\n      }\n      const total = event.total\n        ? `${Math.round((event.loaded / event.total) * 100)}%`\n        : event.loaded;\n      this.config.logger?.debug(`status={${event.phase},total={${total}}}`);\n    };\n  };\n\n  static fromAuth = (options: {\n    username?: string;\n    password?: string;\n    token?: string;\n    logger?: Logger;\n  }) => {\n    const { username, password, token, logger } = options;\n    return new Git({ username, password, token, logger });\n  };\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Git } from '../scm';\nimport { NotFoundError, NotModifiedError } from '@backstage/errors';\nimport {\n  GerritIntegration,\n  getGerritCloneRepoUrl,\n  getGerritBranchApiUrl,\n  getGerritFileContentsApiUrl,\n  getGerritRequestOptions,\n  parseGerritJsonResponse,\n  parseGerritGitilesUrl,\n} from '@backstage/integration';\nimport { Base64Decode } from 'base64-stream';\nimport concatStream from 'concat-stream';\nimport fs from 'fs-extra';\nimport fetch, { Response } from 'node-fetch';\nimport os from 'os';\nimport { join as joinPath } from 'path';\nimport tar from 'tar';\nimport { pipeline as pipelineCb, Readable } from 'stream';\nimport { promisify } from 'util';\nimport {\n  ReaderFactory,\n  ReadTreeOptions,\n  ReadTreeResponse,\n  ReadTreeResponseFactory,\n  ReadUrlOptions,\n  ReadUrlResponse,\n  SearchResponse,\n  UrlReader,\n} from './types';\nimport { ScmIntegrations } from '@backstage/integration';\n\nconst pipeline = promisify(pipelineCb);\n\nconst createTemporaryDirectory = async (workDir: string): Promise<string> =>\n  await fs.mkdtemp(joinPath(workDir, '/gerrit-clone-'));\n\n/**\n * Implements a {@link UrlReader} for files in Gerrit.\n *\n * @remarks\n * To be able to link to Git contents for Gerrit providers in a user friendly\n * way we are depending on that there is a Gitiles installation somewhere\n * that we can link to. It is perfectly possible to integrate Gerrit with\n * Backstage without Gitiles since all API calls goes directly to Gerrit.\n *\n * The \"host\" variable in the config is the Gerrit host. The address where\n * Gitiles is installed may be on the same host but it could be on a\n * separate host. For example a Gerrit instance could be hosted on\n * \"gerrit-review.company.com\" but the repos could be browsable on a separate\n * host, e.g. \"gerrit.company.com\" and the human readable URL would then\n * not point to the API host.\n *\n * @public\n */\nexport class GerritUrlReader implements UrlReader {\n  static factory: ReaderFactory = ({ config, treeResponseFactory }) => {\n    const integrations = ScmIntegrations.fromConfig(config);\n    if (!integrations.gerrit) {\n      return [];\n    }\n    const workDir =\n      config.getOptionalString('backend.workingDirectory') ?? os.tmpdir();\n    return integrations.gerrit.list().map(integration => {\n      const reader = new GerritUrlReader(\n        integration,\n        { treeResponseFactory },\n        workDir,\n      );\n      const predicate = (url: URL) => {\n        const gitilesUrl = new URL(integration.config.gitilesBaseUrl!);\n        // If gitilesUrl is not specified it will default to\n        // \"integration.config.host\".\n        return url.host === gitilesUrl.host;\n      };\n      return { reader, predicate };\n    });\n  };\n\n  constructor(\n    private readonly integration: GerritIntegration,\n    private readonly deps: { treeResponseFactory: ReadTreeResponseFactory },\n    private readonly workDir: string,\n  ) {}\n\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  async readUrl(\n    url: string,\n    options?: ReadUrlOptions,\n  ): Promise<ReadUrlResponse> {\n    const apiUrl = getGerritFileContentsApiUrl(this.integration.config, url);\n    let response: Response;\n    try {\n      response = await fetch(apiUrl, {\n        method: 'GET',\n        ...getGerritRequestOptions(this.integration.config),\n        // TODO(freben): The signal cast is there because pre-3.x versions of\n        // node-fetch have a very slightly deviating AbortSignal type signature.\n        // The difference does not affect us in practice however. The cast can\n        // be removed after we support ESM for CLI dependencies and migrate to\n        // version 3 of node-fetch.\n        // https://github.com/backstage/backstage/issues/8242\n        signal: options?.signal as any,\n      });\n    } catch (e) {\n      throw new Error(`Unable to read gerrit file ${url}, ${e}`);\n    }\n    if (response.ok) {\n      let responseBody: string;\n      return {\n        buffer: async () => {\n          if (responseBody === undefined) {\n            responseBody = await response.text();\n          }\n          return Buffer.from(responseBody, 'base64');\n        },\n        stream: () => {\n          const readable = new Readable().wrap(response.body);\n          return readable.pipe(new Base64Decode());\n        },\n      };\n    }\n    if (response.status === 404) {\n      throw new NotFoundError(`File ${url} not found.`);\n    }\n    throw new Error(\n      `${url} could not be read as ${apiUrl}, ${response.status} ${response.statusText}`,\n    );\n  }\n\n  async readTree(\n    url: string,\n    options?: ReadTreeOptions,\n  ): Promise<ReadTreeResponse> {\n    const { filePath } = parseGerritGitilesUrl(this.integration.config, url);\n    const apiUrl = getGerritBranchApiUrl(this.integration.config, url);\n    let response: Response;\n    try {\n      response = await fetch(apiUrl, {\n        method: 'GET',\n        ...getGerritRequestOptions(this.integration.config),\n      });\n    } catch (e) {\n      throw new Error(`Unable to read branch state ${url}, ${e}`);\n    }\n\n    if (response.status === 404) {\n      throw new NotFoundError(`Not found: ${url}`);\n    }\n\n    if (!response.ok) {\n      throw new Error(\n        `${url} could not be read as ${apiUrl}, ${response.status} ${response.statusText}`,\n      );\n    }\n    const branchInfo = (await parseGerritJsonResponse(response as any)) as {\n      revision: string;\n    };\n    if (options?.etag === branchInfo.revision) {\n      throw new NotModifiedError();\n    }\n\n    const git = Git.fromAuth({\n      username: this.integration.config.username,\n      password: this.integration.config.password,\n    });\n    const tempDir = await createTemporaryDirectory(this.workDir);\n    const cloneUrl = getGerritCloneRepoUrl(this.integration.config, url);\n    try {\n      // The \"fromTarArchive\" function will strip the top level directory so\n      // an additional directory level is created when we clone.\n      await git.clone({\n        url: cloneUrl,\n        dir: joinPath(tempDir, 'repo'),\n        ref: branchInfo.revision,\n        depth: 1,\n      });\n\n      const data = await new Promise<Buffer>(async resolve => {\n        await pipeline(\n          tar.create({ cwd: tempDir }, ['']),\n          concatStream(resolve),\n        );\n      });\n      const tarArchive = Readable.from(data);\n      return await this.deps.treeResponseFactory.fromTarArchive({\n        stream: tarArchive as unknown as Readable,\n        subpath: filePath === '/' ? undefined : filePath,\n        etag: branchInfo.revision,\n        filter: options?.filter,\n      });\n    } catch (error) {\n      throw new Error(`Could not clone ${cloneUrl}: ${error}`);\n    } finally {\n      await fs.rm(tempDir, { recursive: true, force: true });\n    }\n  }\n\n  async search(): Promise<SearchResponse> {\n    throw new Error('GerritReader does not implement search');\n  }\n\n  toString() {\n    const { host, password } = this.integration.config;\n    return `gerrit{host=${host},authed=${Boolean(password)}}`;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  getGitHubFileFetchUrl,\n  DefaultGithubCredentialsProvider,\n  GithubCredentialsProvider,\n  GitHubIntegration,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport { RestEndpointMethodTypes } from '@octokit/rest';\nimport fetch, { RequestInit, Response } from 'node-fetch';\nimport parseGitUrl from 'git-url-parse';\nimport { Minimatch } from 'minimatch';\nimport { Readable } from 'stream';\nimport { NotFoundError, NotModifiedError } from '@backstage/errors';\nimport {\n  ReadTreeResponseFactory,\n  ReaderFactory,\n  ReadTreeOptions,\n  ReadTreeResponse,\n  SearchOptions,\n  SearchResponse,\n  SearchResponseFile,\n  UrlReader,\n  ReadUrlOptions,\n  ReadUrlResponse,\n} from './types';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\n\nexport type GhRepoResponse =\n  RestEndpointMethodTypes['repos']['get']['response']['data'];\nexport type GhBranchResponse =\n  RestEndpointMethodTypes['repos']['getBranch']['response']['data'];\nexport type GhTreeResponse =\n  RestEndpointMethodTypes['git']['getTree']['response']['data'];\nexport type GhBlobResponse =\n  RestEndpointMethodTypes['git']['getBlob']['response']['data'];\n\n/**\n * Implements a {@link UrlReader} for files through the GitHub v3 APIs, such as\n * the one exposed by GitHub itself.\n *\n * @public\n */\nexport class GithubUrlReader implements UrlReader {\n  static factory: ReaderFactory = ({ config, treeResponseFactory }) => {\n    const integrations = ScmIntegrations.fromConfig(config);\n    const credentialsProvider =\n      DefaultGithubCredentialsProvider.fromIntegrations(integrations);\n    return integrations.github.list().map(integration => {\n      const reader = new GithubUrlReader(integration, {\n        treeResponseFactory,\n        credentialsProvider,\n      });\n      const predicate = (url: URL) => url.host === integration.config.host;\n      return { reader, predicate };\n    });\n  };\n\n  constructor(\n    private readonly integration: GitHubIntegration,\n    private readonly deps: {\n      treeResponseFactory: ReadTreeResponseFactory;\n      credentialsProvider: GithubCredentialsProvider;\n    },\n  ) {\n    if (!integration.config.apiBaseUrl && !integration.config.rawBaseUrl) {\n      throw new Error(\n        `GitHub integration '${integration.title}' must configure an explicit apiBaseUrl or rawBaseUrl`,\n      );\n    }\n  }\n\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  async readUrl(\n    url: string,\n    options?: ReadUrlOptions,\n  ): Promise<ReadUrlResponse> {\n    const credentials = await this.deps.credentialsProvider.getCredentials({\n      url,\n    });\n    const ghUrl = getGitHubFileFetchUrl(\n      url,\n      this.integration.config,\n      credentials,\n    );\n\n    let response: Response;\n    try {\n      response = await fetch(ghUrl, {\n        headers: {\n          ...credentials?.headers,\n          ...(options?.etag && { 'If-None-Match': options.etag }),\n          Accept: 'application/vnd.github.v3.raw',\n        },\n        // TODO(freben): The signal cast is there because pre-3.x versions of\n        // node-fetch have a very slightly deviating AbortSignal type signature.\n        // The difference does not affect us in practice however. The cast can\n        // be removed after we support ESM for CLI dependencies and migrate to\n        // version 3 of node-fetch.\n        // https://github.com/backstage/backstage/issues/8242\n        signal: options?.signal as any,\n      });\n    } catch (e) {\n      throw new Error(`Unable to read ${url}, ${e}`);\n    }\n\n    if (response.status === 304) {\n      throw new NotModifiedError();\n    }\n\n    if (response.ok) {\n      return ReadUrlResponseFactory.fromNodeJSReadable(response.body, {\n        etag: response.headers.get('ETag') ?? undefined,\n      });\n    }\n\n    let message = `${url} could not be read as ${ghUrl}, ${response.status} ${response.statusText}`;\n    if (response.status === 404) {\n      throw new NotFoundError(message);\n    }\n\n    // GitHub returns a 403 response with a couple of headers indicating rate\n    // limit status. See more in the GitHub docs:\n    // https://docs.github.com/en/rest/overview/resources-in-the-rest-api#rate-limiting\n    if (\n      response.status === 403 &&\n      response.headers.get('X-RateLimit-Remaining') === '0'\n    ) {\n      message += ' (rate limit exceeded)';\n    }\n\n    throw new Error(message);\n  }\n\n  async readTree(\n    url: string,\n    options?: ReadTreeOptions,\n  ): Promise<ReadTreeResponse> {\n    const repoDetails = await this.getRepoDetails(url);\n    const commitSha = repoDetails.branch.commit.sha!;\n\n    if (options?.etag && options.etag === commitSha) {\n      throw new NotModifiedError();\n    }\n\n    const { filepath } = parseGitUrl(url);\n    const { headers } = await this.deps.credentialsProvider.getCredentials({\n      url,\n    });\n\n    return this.doReadTree(\n      repoDetails.repo.archive_url,\n      commitSha,\n      filepath,\n      // TODO(freben): The signal cast is there because pre-3.x versions of\n      // node-fetch have a very slightly deviating AbortSignal type signature.\n      // The difference does not affect us in practice however. The cast can be\n      // removed after we support ESM for CLI dependencies and migrate to\n      // version 3 of node-fetch.\n      // https://github.com/backstage/backstage/issues/8242\n      { headers, signal: options?.signal as any },\n      options,\n    );\n  }\n\n  async search(url: string, options?: SearchOptions): Promise<SearchResponse> {\n    const repoDetails = await this.getRepoDetails(url);\n    const commitSha = repoDetails.branch.commit.sha!;\n\n    if (options?.etag && options.etag === commitSha) {\n      throw new NotModifiedError();\n    }\n\n    const { filepath } = parseGitUrl(url);\n    const { headers } = await this.deps.credentialsProvider.getCredentials({\n      url,\n    });\n\n    const files = await this.doSearch(\n      url,\n      repoDetails.repo.trees_url,\n      repoDetails.repo.archive_url,\n      commitSha,\n      filepath,\n      { headers, signal: options?.signal as any },\n    );\n\n    return { files, etag: commitSha };\n  }\n\n  toString() {\n    const { host, token } = this.integration.config;\n    return `github{host=${host},authed=${Boolean(token)}}`;\n  }\n\n  private async doReadTree(\n    archiveUrl: string,\n    sha: string,\n    subpath: string,\n    init: RequestInit,\n    options?: ReadTreeOptions,\n  ): Promise<ReadTreeResponse> {\n    // archive_url looks like \"https://api.github.com/repos/owner/repo/{archive_format}{/ref}\"\n    const archive = await this.fetchResponse(\n      archiveUrl\n        .replace('{archive_format}', 'tarball')\n        .replace('{/ref}', `/${sha}`),\n      init,\n    );\n\n    return await this.deps.treeResponseFactory.fromTarArchive({\n      // TODO(Rugvip): Underlying implementation of fetch will be node-fetch, we probably want\n      //               to stick to using that in exclusively backend code.\n      stream: archive.body as unknown as Readable,\n      subpath,\n      etag: sha,\n      filter: options?.filter,\n    });\n  }\n\n  private async doSearch(\n    url: string,\n    treesUrl: string,\n    archiveUrl: string,\n    sha: string,\n    query: string,\n    init: RequestInit,\n  ): Promise<SearchResponseFile[]> {\n    function pathToUrl(path: string): string {\n      // TODO(freben): Use the integration package facility for this instead\n      // pathname starts as /backstage/backstage/blob/master/<path>\n      const updated = new URL(url);\n      const base = updated.pathname.split('/').slice(1, 5).join('/');\n      updated.pathname = `${base}/${path}`;\n      return updated.toString();\n    }\n\n    const matcher = new Minimatch(query.replace(/^\\/+/, ''));\n\n    // trees_url looks like \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\"\n    const recursiveTree: GhTreeResponse = await this.fetchJson(\n      treesUrl.replace('{/sha}', `/${sha}?recursive=true`),\n      init,\n    );\n\n    // The simple case is that we got the entire tree in a single operation.\n    if (!recursiveTree.truncated) {\n      const matching = recursiveTree.tree.filter(\n        item =>\n          item.type === 'blob' &&\n          item.path &&\n          item.url &&\n          matcher.match(item.path),\n      );\n\n      return matching.map(item => ({\n        url: pathToUrl(item.path!),\n        content: async () => {\n          const blob: GhBlobResponse = await this.fetchJson(item.url!, init);\n          return Buffer.from(blob.content, 'base64');\n        },\n      }));\n    }\n\n    // For larger repos, we leverage readTree and filter through that instead\n    const tree = await this.doReadTree(archiveUrl, sha, '', init, {\n      filter: path => matcher.match(path),\n    });\n    const files = await tree.files();\n\n    return files.map(file => ({\n      url: pathToUrl(file.path),\n      content: file.content,\n    }));\n  }\n\n  private async getRepoDetails(url: string): Promise<{\n    repo: GhRepoResponse;\n    branch: GhBranchResponse;\n  }> {\n    const parsed = parseGitUrl(url);\n    const { ref, full_name } = parsed;\n\n    // Caveat: The ref will totally be incorrect if the branch name includes a\n    // slash. Thus, some operations can not work on URLs containing branch\n    // names that have a slash in them.\n\n    const { headers } = await this.deps.credentialsProvider.getCredentials({\n      url,\n    });\n\n    const repo: GhRepoResponse = await this.fetchJson(\n      `${this.integration.config.apiBaseUrl}/repos/${full_name}`,\n      { headers },\n    );\n\n    // branches_url looks like \"https://api.github.com/repos/owner/repo/branches{/branch}\"\n    const branch: GhBranchResponse = await this.fetchJson(\n      repo.branches_url.replace('{/branch}', `/${ref || repo.default_branch}`),\n      { headers },\n    );\n\n    return { repo, branch };\n  }\n\n  private async fetchResponse(\n    url: string | URL,\n    init: RequestInit,\n  ): Promise<Response> {\n    const urlAsString = url.toString();\n\n    const response = await fetch(urlAsString, init);\n\n    if (!response.ok) {\n      const message = `Request failed for ${urlAsString}, ${response.status} ${response.statusText}`;\n      if (response.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    return response;\n  }\n\n  private async fetchJson(url: string | URL, init: RequestInit): Promise<any> {\n    const response = await this.fetchResponse(url, init);\n    return await response.json();\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Readable, pipeline as pipelineCb } from 'stream';\nimport { promisify } from 'util';\nimport concatStream from 'concat-stream';\n\nconst pipeline = promisify(pipelineCb);\n\n// Matches a directory name + one `/` at the start of any string,\n// containing any character except `/` one or more times, and ending with a `/`\n// e.g. Will match `dirA/` in `dirA/dirB/file.ext`\nconst directoryNameRegex = /^[^\\/]+\\//;\n// Removes the first segment of a forward-slash-separated path\nexport function stripFirstDirectoryFromPath(path: string): string {\n  return path.replace(directoryNameRegex, '');\n}\n\n// Collect the stream into a buffer and return\nexport const streamToBuffer = (stream: Readable): Promise<Buffer> => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      await pipeline(stream, concatStream(resolve));\n    } catch (ex) {\n      reject(ex);\n    }\n  });\n};\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  getGitLabFileFetchUrl,\n  getGitLabIntegrationRelativePath,\n  getGitLabRequestOptions,\n  GitLabIntegration,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport fetch, { Response } from 'node-fetch';\nimport parseGitUrl from 'git-url-parse';\nimport { Minimatch } from 'minimatch';\nimport { Readable } from 'stream';\nimport { NotFoundError, NotModifiedError } from '@backstage/errors';\nimport { stripFirstDirectoryFromPath } from './tree/util';\nimport {\n  ReadTreeResponseFactory,\n  ReaderFactory,\n  ReadTreeOptions,\n  ReadTreeResponse,\n  SearchOptions,\n  SearchResponse,\n  UrlReader,\n  ReadUrlResponse,\n  ReadUrlOptions,\n} from './types';\nimport { trimEnd, trimStart } from 'lodash';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\n\n/**\n * Implements a {@link UrlReader} for files on GitLab.\n *\n * @public\n */\nexport class GitlabUrlReader implements UrlReader {\n  static factory: ReaderFactory = ({ config, treeResponseFactory }) => {\n    const integrations = ScmIntegrations.fromConfig(config);\n    return integrations.gitlab.list().map(integration => {\n      const reader = new GitlabUrlReader(integration, {\n        treeResponseFactory,\n      });\n      const predicate = (url: URL) => url.host === integration.config.host;\n      return { reader, predicate };\n    });\n  };\n\n  constructor(\n    private readonly integration: GitLabIntegration,\n    private readonly deps: { treeResponseFactory: ReadTreeResponseFactory },\n  ) {}\n\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  async readUrl(\n    url: string,\n    options?: ReadUrlOptions,\n  ): Promise<ReadUrlResponse> {\n    const { etag, signal } = options ?? {};\n    const builtUrl = await getGitLabFileFetchUrl(url, this.integration.config);\n\n    let response: Response;\n    try {\n      response = await fetch(builtUrl, {\n        headers: {\n          ...getGitLabRequestOptions(this.integration.config).headers,\n          ...(etag && { 'If-None-Match': etag }),\n        },\n        // TODO(freben): The signal cast is there because pre-3.x versions of\n        // node-fetch have a very slightly deviating AbortSignal type signature.\n        // The difference does not affect us in practice however. The cast can be\n        // removed after we support ESM for CLI dependencies and migrate to\n        // version 3 of node-fetch.\n        // https://github.com/backstage/backstage/issues/8242\n        ...(signal && { signal: signal as any }),\n      });\n    } catch (e) {\n      throw new Error(`Unable to read ${url}, ${e}`);\n    }\n\n    if (response.status === 304) {\n      throw new NotModifiedError();\n    }\n\n    if (response.ok) {\n      return ReadUrlResponseFactory.fromNodeJSReadable(response.body, {\n        etag: response.headers.get('ETag') ?? undefined,\n      });\n    }\n\n    const message = `${url} could not be read as ${builtUrl}, ${response.status} ${response.statusText}`;\n    if (response.status === 404) {\n      throw new NotFoundError(message);\n    }\n    throw new Error(message);\n  }\n\n  async readTree(\n    url: string,\n    options?: ReadTreeOptions,\n  ): Promise<ReadTreeResponse> {\n    const { etag, signal } = options ?? {};\n    const { ref, full_name, filepath } = parseGitUrl(url);\n\n    let repoFullName = full_name;\n\n    const relativePath = getGitLabIntegrationRelativePath(\n      this.integration.config,\n    );\n\n    // Considering self hosted gitlab with relative\n    // assuming '/gitlab' is the relative path\n    // from: /gitlab/repo/project\n    // to: repo/project\n    if (relativePath) {\n      const rectifiedRelativePath = `${trimStart(relativePath, '/')}/`;\n      repoFullName = full_name.replace(rectifiedRelativePath, '');\n    }\n\n    // Use GitLab API to get the default branch\n    // encodeURIComponent is required for GitLab API\n    // https://docs.gitlab.com/ee/api/README.html#namespaced-path-encoding\n    const projectGitlabResponse = await fetch(\n      new URL(\n        `${this.integration.config.apiBaseUrl}/projects/${encodeURIComponent(\n          repoFullName,\n        )}`,\n      ).toString(),\n      getGitLabRequestOptions(this.integration.config),\n    );\n    if (!projectGitlabResponse.ok) {\n      const msg = `Failed to read tree from ${url}, ${projectGitlabResponse.status} ${projectGitlabResponse.statusText}`;\n      if (projectGitlabResponse.status === 404) {\n        throw new NotFoundError(msg);\n      }\n      throw new Error(msg);\n    }\n    const projectGitlabResponseJson = await projectGitlabResponse.json();\n\n    // ref is an empty string if no branch is set in provided url to readTree.\n    const branch = ref || projectGitlabResponseJson.default_branch;\n\n    // Fetch the latest commit that modifies the the filepath in the provided or default branch\n    // to compare against the provided sha.\n    const commitsReqParams = new URLSearchParams();\n    commitsReqParams.set('ref_name', branch);\n    if (!!filepath) {\n      commitsReqParams.set('path', filepath);\n    }\n    const commitsGitlabResponse = await fetch(\n      new URL(\n        `${this.integration.config.apiBaseUrl}/projects/${encodeURIComponent(\n          repoFullName,\n        )}/repository/commits?${commitsReqParams.toString()}`,\n      ).toString(),\n      {\n        ...getGitLabRequestOptions(this.integration.config),\n        // TODO(freben): The signal cast is there because pre-3.x versions of\n        // node-fetch have a very slightly deviating AbortSignal type signature.\n        // The difference does not affect us in practice however. The cast can\n        // be removed after we support ESM for CLI dependencies and migrate to\n        // version 3 of node-fetch.\n        // https://github.com/backstage/backstage/issues/8242\n        ...(signal && { signal: signal as any }),\n      },\n    );\n    if (!commitsGitlabResponse.ok) {\n      const message = `Failed to read tree (branch) from ${url}, ${commitsGitlabResponse.status} ${commitsGitlabResponse.statusText}`;\n      if (commitsGitlabResponse.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    const commitSha = (await commitsGitlabResponse.json())[0].id;\n\n    if (etag && etag === commitSha) {\n      throw new NotModifiedError();\n    }\n\n    // https://docs.gitlab.com/ee/api/repositories.html#get-file-archive\n    const archiveGitLabResponse = await fetch(\n      `${this.integration.config.apiBaseUrl}/projects/${encodeURIComponent(\n        repoFullName,\n      )}/repository/archive?sha=${branch}`,\n      {\n        ...getGitLabRequestOptions(this.integration.config),\n        // TODO(freben): The signal cast is there because pre-3.x versions of\n        // node-fetch have a very slightly deviating AbortSignal type signature.\n        // The difference does not affect us in practice however. The cast can\n        // be removed after we support ESM for CLI dependencies and migrate to\n        // version 3 of node-fetch.\n        // https://github.com/backstage/backstage/issues/8242\n        ...(signal && { signal: signal as any }),\n      },\n    );\n    if (!archiveGitLabResponse.ok) {\n      const message = `Failed to read tree (archive) from ${url}, ${archiveGitLabResponse.status} ${archiveGitLabResponse.statusText}`;\n      if (archiveGitLabResponse.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    return await this.deps.treeResponseFactory.fromTarArchive({\n      stream: archiveGitLabResponse.body as unknown as Readable,\n      subpath: filepath,\n      etag: commitSha,\n      filter: options?.filter,\n    });\n  }\n\n  async search(url: string, options?: SearchOptions): Promise<SearchResponse> {\n    const { filepath } = parseGitUrl(url);\n    const matcher = new Minimatch(filepath);\n\n    // TODO(freben): For now, read the entire repo and filter through that. In\n    // a future improvement, we could be smart and try to deduce that non-glob\n    // prefixes (like for filepaths such as some-prefix/**/a.yaml) can be used\n    // to get just that part of the repo.\n    const treeUrl = trimEnd(url.replace(filepath, ''), '/');\n\n    const tree = await this.readTree(treeUrl, {\n      etag: options?.etag,\n      signal: options?.signal,\n      filter: path => matcher.match(stripFirstDirectoryFromPath(path)),\n    });\n    const files = await tree.files();\n\n    return {\n      etag: tree.etag,\n      files: files.map(file => ({\n        url: this.integration.resolveUrl({ url: `/${file.path}`, base: url }),\n        content: file.content,\n      })),\n    };\n  }\n\n  toString() {\n    const { host, token } = this.integration.config;\n    return `gitlab{host=${host},authed=${Boolean(token)}}`;\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// note: We do the import like this so that we don't get issues destructuring\n// and it not being mocked by the aws-sdk-mock package which is unfortunate.\nimport aws from 'aws-sdk';\nimport { CredentialsOptions } from 'aws-sdk/lib/credentials';\nimport {\n  ReaderFactory,\n  ReadTreeOptions,\n  ReadTreeResponse,\n  ReadTreeResponseFactory,\n  ReadUrlOptions,\n  ReadUrlResponse,\n  SearchResponse,\n  UrlReader,\n} from './types';\nimport {\n  AwsS3Integration,\n  ScmIntegrations,\n  AwsS3IntegrationConfig,\n} from '@backstage/integration';\nimport { ForwardedError, NotModifiedError } from '@backstage/errors';\nimport { ListObjectsV2Output, ObjectList } from 'aws-sdk/clients/s3';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\n\nconst DEFAULT_REGION = 'us-east-1';\n\n/**\n * Path style URLs: https://s3.(region).amazonaws.com/(bucket)/(key)\n * The region can also be on the old form: https://s3-(region).amazonaws.com/(bucket)/(key)\n * Virtual hosted style URLs: https://(bucket).s3.(region).amazonaws.com/(key)\n * See https://docs.aws.amazon.com/AmazonS3/latest/userguide/VirtualHosting.html#path-style-access\n */\nexport function parseUrl(\n  url: string,\n  config: AwsS3IntegrationConfig,\n): { path: string; bucket: string; region: string } {\n  const parsedUrl = new URL(url);\n\n  /**\n   * Removes the leading '/' from the pathname to be processed\n   * as a parameter by AWS S3 SDK getObject method.\n   */\n  const pathname = parsedUrl.pathname.substring(1);\n  const host = parsedUrl.host;\n\n  // Treat Amazon hosted separately because it has special region logic\n  if (config.host === 'amazonaws.com') {\n    const match = host.match(\n      /^(?:([a-z0-9.-]+)\\.)?s3(?:[.-]([a-z0-9-]+))?\\.amazonaws\\.com$/,\n    );\n    if (!match) {\n      throw new Error(`Invalid AWS S3 URL ${url}`);\n    }\n\n    const [, hostBucket, hostRegion] = match;\n\n    if (config.s3ForcePathStyle || !hostBucket) {\n      const slashIndex = pathname.indexOf('/');\n      if (slashIndex < 0) {\n        throw new Error(\n          `Invalid path-style AWS S3 URL ${url}, does not contain bucket in the path`,\n        );\n      }\n\n      return {\n        path: pathname.substring(slashIndex + 1),\n        bucket: pathname.substring(0, slashIndex),\n        region: hostRegion ?? DEFAULT_REGION,\n      };\n    }\n\n    return {\n      path: pathname,\n      bucket: hostBucket,\n      region: hostRegion ?? DEFAULT_REGION,\n    };\n  }\n\n  const usePathStyle =\n    config.s3ForcePathStyle || host.length === config.host.length;\n\n  if (usePathStyle) {\n    const slashIndex = pathname.indexOf('/');\n    if (slashIndex < 0) {\n      throw new Error(\n        `Invalid path-style AWS S3 URL ${url}, does not contain bucket in the path`,\n      );\n    }\n\n    return {\n      path: pathname.substring(slashIndex + 1),\n      bucket: pathname.substring(0, slashIndex),\n      region: '',\n    };\n  }\n\n  return {\n    path: pathname,\n    bucket: host.substring(0, host.length - config.host.length - 1),\n    region: '',\n  };\n}\n\n/**\n * Implements a {@link UrlReader} for AWS S3 buckets.\n *\n * @public\n */\nexport class AwsS3UrlReader implements UrlReader {\n  static factory: ReaderFactory = ({ config, treeResponseFactory }) => {\n    const integrations = ScmIntegrations.fromConfig(config);\n\n    return integrations.awsS3.list().map(integration => {\n      const credentials = AwsS3UrlReader.buildCredentials(integration);\n\n      const s3 = new aws.S3({\n        apiVersion: '2006-03-01',\n        credentials,\n        endpoint: integration.config.endpoint,\n        s3ForcePathStyle: integration.config.s3ForcePathStyle,\n      });\n      const reader = new AwsS3UrlReader(integration, {\n        s3,\n        treeResponseFactory,\n      });\n      const predicate = (url: URL) =>\n        url.host.endsWith(integration.config.host);\n      return { reader, predicate };\n    });\n  };\n\n  constructor(\n    private readonly integration: AwsS3Integration,\n    private readonly deps: {\n      s3: aws.S3;\n      treeResponseFactory: ReadTreeResponseFactory;\n    },\n  ) {}\n\n  /**\n   * If accessKeyId and secretAccessKey are missing, the standard credentials provider chain will be used:\n   * https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/auth/DefaultAWSCredentialsProviderChain.html\n   */\n  private static buildCredentials(\n    integration?: AwsS3Integration,\n  ): aws.Credentials | CredentialsOptions | undefined {\n    if (!integration) {\n      return undefined;\n    }\n\n    const accessKeyId = integration.config.accessKeyId;\n    const secretAccessKey = integration.config.secretAccessKey;\n    let explicitCredentials: aws.Credentials | undefined;\n\n    if (accessKeyId && secretAccessKey) {\n      explicitCredentials = new aws.Credentials({\n        accessKeyId,\n        secretAccessKey,\n      });\n    }\n\n    const roleArn = integration.config.roleArn;\n    if (roleArn) {\n      return new aws.ChainableTemporaryCredentials({\n        masterCredentials: explicitCredentials,\n        params: {\n          RoleSessionName: 'backstage-aws-s3-url-reader',\n          RoleArn: roleArn,\n          ExternalId: integration.config.externalId,\n        },\n      });\n    }\n\n    return explicitCredentials;\n  }\n\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  async readUrl(\n    url: string,\n    options?: ReadUrlOptions,\n  ): Promise<ReadUrlResponse> {\n    try {\n      const { path, bucket, region } = parseUrl(url, this.integration.config);\n      aws.config.update({ region: region });\n\n      let params;\n      if (options?.etag) {\n        params = {\n          Bucket: bucket,\n          Key: path,\n          IfNoneMatch: options.etag,\n        };\n      } else {\n        params = {\n          Bucket: bucket,\n          Key: path,\n        };\n      }\n\n      const request = this.deps.s3.getObject(params);\n      options?.signal?.addEventListener('abort', () => request.abort());\n\n      // Since we're consuming the read stream we need to consume headers and errors via events.\n      const etagPromise = new Promise<string | undefined>((resolve, reject) => {\n        request.on('httpHeaders', (status, headers) => {\n          if (status < 400) {\n            if (status === 200) {\n              resolve(headers.etag);\n            } else if (status !== 304 /* not modified */) {\n              reject(\n                new Error(\n                  `S3 readUrl request received unexpected status '${status}' in response`,\n                ),\n              );\n            }\n          }\n        });\n        request.on('error', error => reject(error));\n        request.on('complete', () =>\n          reject(\n            new Error('S3 readUrl request completed without receiving headers'),\n          ),\n        );\n      });\n\n      const stream = request.createReadStream();\n      stream.on('error', () => {\n        // The AWS SDK forwards request errors to the stream, so we need to\n        // ignore those errors here or the process will crash.\n      });\n\n      return ReadUrlResponseFactory.fromReadable(stream, {\n        etag: await etagPromise,\n      });\n    } catch (e) {\n      if (e.statusCode === 304) {\n        throw new NotModifiedError();\n      }\n\n      throw new ForwardedError('Could not retrieve file from S3', e);\n    }\n  }\n\n  async readTree(\n    url: string,\n    options?: ReadTreeOptions,\n  ): Promise<ReadTreeResponse> {\n    try {\n      const { path, bucket, region } = parseUrl(url, this.integration.config);\n      const allObjects: ObjectList = [];\n      const responses = [];\n      let continuationToken: string | undefined;\n      let output: ListObjectsV2Output;\n      do {\n        aws.config.update({ region: region });\n        const request = this.deps.s3.listObjectsV2({\n          Bucket: bucket,\n          ContinuationToken: continuationToken,\n          Prefix: path,\n        });\n        options?.signal?.addEventListener('abort', () => request.abort());\n        output = await request.promise();\n        if (output.Contents) {\n          output.Contents.forEach(contents => {\n            allObjects.push(contents);\n          });\n        }\n        continuationToken = output.NextContinuationToken;\n      } while (continuationToken);\n\n      for (let i = 0; i < allObjects.length; i++) {\n        const object = this.deps.s3.getObject({\n          Bucket: bucket,\n          Key: String(allObjects[i].Key),\n        });\n        responses.push({\n          data: object.createReadStream(),\n          path: String(allObjects[i].Key),\n        });\n      }\n\n      return await this.deps.treeResponseFactory.fromReadableArray(responses);\n    } catch (e) {\n      throw new ForwardedError('Could not retrieve file tree from S3', e);\n    }\n  }\n\n  async search(): Promise<SearchResponse> {\n    throw new Error('AwsS3Reader does not implement search');\n  }\n\n  toString() {\n    const secretAccessKey = this.integration.config.secretAccessKey;\n    return `awsS3{host=${this.integration.config.host},authed=${Boolean(\n      secretAccessKey,\n    )}}`;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NotFoundError, NotModifiedError } from '@backstage/errors';\nimport fetch, { Response } from 'node-fetch';\nimport {\n  ReaderFactory,\n  ReadTreeResponse,\n  ReadUrlOptions,\n  ReadUrlResponse,\n  SearchResponse,\n  UrlReader,\n} from './types';\nimport path from 'path';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\n\nconst isInRange = (num: number, [start, end]: [number, number]) => {\n  return num >= start && num <= end;\n};\n\nconst parsePortRange = (port: string): [number, number] => {\n  const isRange = port.includes('-');\n  if (isRange) {\n    const range = port\n      .split('-')\n      .map(v => parseInt(v, 10))\n      .filter(Boolean) as [number, number];\n    if (range.length !== 2) throw new Error(`Port range is not valid: ${port}`);\n    const [start, end] = range;\n    if (start <= 0 || end <= 0 || start > end)\n      throw new Error(`Port range is not valid: [${start}, ${end}]`);\n    return range;\n  }\n  const parsedPort = parseInt(port, 10);\n  return [parsedPort, parsedPort];\n};\n\nconst parsePortPredicate = (port: string | undefined) => {\n  if (port) {\n    const range = parsePortRange(port);\n    return (url: URL) => {\n      if (url.port) return isInRange(parseInt(url.port, 10), range);\n\n      if (url.protocol === 'http:') return isInRange(80, range);\n      if (url.protocol === 'https:') return isInRange(443, range);\n      return false;\n    };\n  }\n  return (url: URL) => !url.port;\n};\n\n/**\n * A {@link UrlReader} that does a plain fetch of the URL.\n *\n * @public\n */\nexport class FetchUrlReader implements UrlReader {\n  /**\n   * The factory creates a single reader that will be used for reading any URL that's listed\n   * in configuration at `backend.reading.allow`. The allow list contains a list of objects describing\n   * targets to allow, containing the following fields:\n   *\n   * `host`:\n   *   Either full hostnames to match, or subdomain wildcard matchers with a leading '*'.\n   *   For example 'example.com' and '*.example.com' are valid values, 'prod.*.example.com' is not.\n   *\n   * `paths`:\n   *   An optional list of paths which are allowed. If the list is omitted all paths are allowed.\n   */\n  static factory: ReaderFactory = ({ config }) => {\n    const predicates =\n      config\n        .getOptionalConfigArray('backend.reading.allow')\n        ?.map(allowConfig => {\n          const paths = allowConfig.getOptionalStringArray('paths');\n          const checkPath = paths\n            ? (url: URL) => {\n                const targetPath = path.posix.normalize(url.pathname);\n                return paths.some(allowedPath =>\n                  targetPath.startsWith(allowedPath),\n                );\n              }\n            : (_url: URL) => true;\n          const host = allowConfig.getString('host');\n          const [hostname, port] = host.split(':');\n\n          const checkPort = parsePortPredicate(port);\n\n          if (hostname.startsWith('*.')) {\n            const suffix = hostname.slice(1);\n            return (url: URL) =>\n              url.hostname.endsWith(suffix) && checkPath(url) && checkPort(url);\n          }\n          return (url: URL) =>\n            url.hostname === hostname && checkPath(url) && checkPort(url);\n        }) ?? [];\n\n    const reader = new FetchUrlReader();\n    const predicate = (url: URL) => predicates.some(p => p(url));\n    return [{ reader, predicate }];\n  };\n\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  async readUrl(\n    url: string,\n    options?: ReadUrlOptions,\n  ): Promise<ReadUrlResponse> {\n    let response: Response;\n    try {\n      response = await fetch(url, {\n        headers: {\n          ...(options?.etag && { 'If-None-Match': options.etag }),\n        },\n        // TODO(freben): The signal cast is there because pre-3.x versions of\n        // node-fetch have a very slightly deviating AbortSignal type signature.\n        // The difference does not affect us in practice however. The cast can\n        // be removed after we support ESM for CLI dependencies and migrate to\n        // version 3 of node-fetch.\n        // https://github.com/backstage/backstage/issues/8242\n        signal: options?.signal as any,\n      });\n    } catch (e) {\n      throw new Error(`Unable to read ${url}, ${e}`);\n    }\n\n    if (response.status === 304) {\n      throw new NotModifiedError();\n    }\n\n    if (response.ok) {\n      return ReadUrlResponseFactory.fromNodeJSReadable(response.body, {\n        etag: response.headers.get('ETag') ?? undefined,\n      });\n    }\n\n    const message = `could not read ${url}, ${response.status} ${response.statusText}`;\n    if (response.status === 404) {\n      throw new NotFoundError(message);\n    }\n    throw new Error(message);\n  }\n\n  async readTree(): Promise<ReadTreeResponse> {\n    throw new Error('FetchUrlReader does not implement readTree');\n  }\n\n  async search(): Promise<SearchResponse> {\n    throw new Error('FetchUrlReader does not implement search');\n  }\n\n  toString() {\n    return 'fetch{}';\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NotAllowedError } from '@backstage/errors';\nimport { Logger } from 'winston';\nimport {\n  ReadTreeOptions,\n  ReadTreeResponse,\n  ReadUrlOptions,\n  ReadUrlResponse,\n  SearchOptions,\n  SearchResponse,\n  UrlReader,\n  UrlReaderPredicateTuple,\n} from './types';\n\nconst MIN_WARNING_INTERVAL_MS = 1000 * 60 * 15;\n\nfunction notAllowedMessage(url: string) {\n  return (\n    `Reading from '${url}' is not allowed. ` +\n    `You may need to configure an integration for the target host, or add it ` +\n    `to the configured list of allowed hosts at 'backend.reading.allow'`\n  );\n}\n\n/**\n * A UrlReader implementation that selects from a set of UrlReaders\n * based on a predicate tied to each reader.\n */\nexport class UrlReaderPredicateMux implements UrlReader {\n  private readonly readers: UrlReaderPredicateTuple[] = [];\n  private readonly readerWarnings: Map<UrlReader, number> = new Map();\n\n  constructor(private readonly logger: Logger) {}\n\n  register(tuple: UrlReaderPredicateTuple): void {\n    this.readers.push(tuple);\n  }\n\n  async read(url: string): Promise<Buffer> {\n    const parsed = new URL(url);\n\n    for (const { predicate, reader } of this.readers) {\n      if (predicate(parsed)) {\n        return reader.read(url);\n      }\n    }\n\n    throw new NotAllowedError(notAllowedMessage(url));\n  }\n\n  async readUrl(\n    url: string,\n    options?: ReadUrlOptions,\n  ): Promise<ReadUrlResponse> {\n    const parsed = new URL(url);\n\n    for (const { predicate, reader } of this.readers) {\n      if (predicate(parsed)) {\n        if (reader.readUrl) {\n          return reader.readUrl(url, options);\n        }\n        const now = Date.now();\n        const lastWarned = this.readerWarnings.get(reader) ?? 0;\n        if (now > lastWarned + MIN_WARNING_INTERVAL_MS) {\n          this.readerWarnings.set(reader, now);\n          this.logger.warn(\n            `No implementation of readUrl found for ${reader}, this method will be required in the ` +\n              `future and will replace the 'read' method. See the changelog for more details here: ` +\n              'https://github.com/backstage/backstage/blob/master/packages/backend-common/CHANGELOG.md#085',\n          );\n        }\n        const buffer = await reader.read(url);\n        return {\n          buffer: async () => buffer,\n        };\n      }\n    }\n\n    throw new NotAllowedError(notAllowedMessage(url));\n  }\n\n  async readTree(\n    url: string,\n    options?: ReadTreeOptions,\n  ): Promise<ReadTreeResponse> {\n    const parsed = new URL(url);\n\n    for (const { predicate, reader } of this.readers) {\n      if (predicate(parsed)) {\n        return await reader.readTree(url, options);\n      }\n    }\n\n    throw new NotAllowedError(notAllowedMessage(url));\n  }\n\n  async search(url: string, options?: SearchOptions): Promise<SearchResponse> {\n    const parsed = new URL(url);\n\n    for (const { predicate, reader } of this.readers) {\n      if (predicate(parsed)) {\n        return await reader.search(url, options);\n      }\n    }\n\n    throw new NotAllowedError(notAllowedMessage(url));\n  }\n\n  toString() {\n    return `predicateMux{readers=${this.readers.map(t => t.reader).join(',')}`;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport concatStream from 'concat-stream';\nimport fs from 'fs-extra';\nimport platformPath from 'path';\nimport { pipeline as pipelineCb, Readable } from 'stream';\nimport tar, { Parse, ParseStream, ReadEntry } from 'tar';\nimport { promisify } from 'util';\nimport {\n  ReadTreeResponse,\n  ReadTreeResponseDirOptions,\n  ReadTreeResponseFile,\n} from '../types';\nimport { stripFirstDirectoryFromPath } from './util';\n\n// Tar types for `Parse` is not a proper constructor, but it should be\nconst TarParseStream = Parse as unknown as { new (): ParseStream };\n\nconst pipeline = promisify(pipelineCb);\n\n/**\n * Wraps a tar archive stream into a tree response reader.\n */\nexport class TarArchiveResponse implements ReadTreeResponse {\n  private read = false;\n\n  constructor(\n    private readonly stream: Readable,\n    private readonly subPath: string,\n    private readonly workDir: string,\n    public readonly etag: string,\n    private readonly filter?: (path: string, info: { size: number }) => boolean,\n  ) {\n    if (subPath) {\n      if (!subPath.endsWith('/')) {\n        this.subPath += '/';\n      }\n      if (subPath.startsWith('/')) {\n        throw new TypeError(\n          `TarArchiveResponse subPath must not start with a /, got '${subPath}'`,\n        );\n      }\n    }\n\n    this.etag = etag;\n  }\n\n  // Make sure the input stream is only read once\n  private onlyOnce() {\n    if (this.read) {\n      throw new Error('Response has already been read');\n    }\n    this.read = true;\n  }\n\n  async files(): Promise<ReadTreeResponseFile[]> {\n    this.onlyOnce();\n\n    const files = Array<ReadTreeResponseFile>();\n    const parser = new TarParseStream();\n\n    parser.on('entry', (entry: ReadEntry & Readable) => {\n      if (entry.type === 'Directory') {\n        entry.resume();\n        return;\n      }\n\n      // File path relative to the root extracted directory. Will remove the\n      // top level dir name from the path since its name is hard to predetermine.\n      const relativePath = stripFirstDirectoryFromPath(entry.path);\n\n      if (this.subPath) {\n        if (!relativePath.startsWith(this.subPath)) {\n          entry.resume();\n          return;\n        }\n      }\n\n      const path = relativePath.slice(this.subPath.length);\n      if (this.filter) {\n        if (!this.filter(path, { size: entry.remain })) {\n          entry.resume();\n          return;\n        }\n      }\n\n      const content = new Promise<Buffer>(async resolve => {\n        await pipeline(entry, concatStream(resolve));\n      });\n\n      files.push({\n        path,\n        content: () => content,\n      });\n\n      entry.resume();\n    });\n\n    await pipeline(this.stream, parser);\n\n    return files;\n  }\n\n  async archive(): Promise<Readable> {\n    if (!this.subPath) {\n      this.onlyOnce();\n\n      return this.stream;\n    }\n\n    // TODO(Rugvip): method for repacking a tar with a subpath is to simply extract into a\n    //               tmp dir and recreate the archive. Would be nicer to stream things instead.\n    const tmpDir = await this.dir();\n\n    try {\n      const data = await new Promise<Buffer>(async resolve => {\n        await pipeline(\n          tar.create({ cwd: tmpDir }, ['']),\n          concatStream(resolve),\n        );\n      });\n      return Readable.from(data);\n    } finally {\n      await fs.remove(tmpDir);\n    }\n  }\n\n  async dir(options?: ReadTreeResponseDirOptions): Promise<string> {\n    this.onlyOnce();\n\n    const dir =\n      options?.targetDir ??\n      (await fs.mkdtemp(platformPath.join(this.workDir, 'backstage-')));\n\n    // Equivalent of tar --strip-components=N\n    // When no subPath is given, remove just 1 top level directory\n    const strip = this.subPath ? this.subPath.split('/').length : 1;\n\n    let filterError: Error | undefined = undefined;\n\n    await pipeline(\n      this.stream,\n      tar.extract({\n        strip,\n        cwd: dir,\n        filter: (path, stat) => {\n          // Filter errors will short-circuit the rest of the filtering and then throw\n          if (filterError) {\n            return false;\n          }\n\n          // File path relative to the root extracted directory. Will remove the\n          // top level dir name from the path since its name is hard to predetermine.\n          const relativePath = stripFirstDirectoryFromPath(path);\n          if (this.subPath && !relativePath.startsWith(this.subPath)) {\n            return false;\n          }\n          if (this.filter) {\n            const innerPath = path.split('/').slice(strip).join('/');\n            try {\n              return this.filter(innerPath, { size: stat.size });\n            } catch (error) {\n              filterError = error;\n              return false;\n            }\n          }\n          return true;\n        },\n      }),\n    );\n\n    if (filterError) {\n      // If the dir was provided we don't want to remove it, but if it wasn't it means\n      // we created a temporary directory and we should remove it.\n      if (!options?.targetDir) {\n        await fs.remove(dir).catch(() => {});\n      }\n      throw filterError;\n    }\n\n    return dir;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport archiver from 'archiver';\nimport yauzl, { Entry } from 'yauzl';\nimport fs from 'fs-extra';\nimport platformPath from 'path';\nimport { Readable } from 'stream';\nimport {\n  ReadTreeResponse,\n  ReadTreeResponseDirOptions,\n  ReadTreeResponseFile,\n} from '../types';\nimport { streamToBuffer } from './util';\nimport { resolveSafeChildPath } from '../../paths';\n\n/**\n * Wraps a zip archive stream into a tree response reader.\n */\nexport class ZipArchiveResponse implements ReadTreeResponse {\n  private read = false;\n\n  constructor(\n    private readonly stream: Readable,\n    private readonly subPath: string,\n    private readonly workDir: string,\n    public readonly etag: string,\n    private readonly filter?: (path: string, info: { size: number }) => boolean,\n  ) {\n    if (subPath) {\n      if (!subPath.endsWith('/')) {\n        this.subPath += '/';\n      }\n      if (subPath.startsWith('/')) {\n        throw new TypeError(\n          `ZipArchiveResponse subPath must not start with a /, got '${subPath}'`,\n        );\n      }\n    }\n\n    this.etag = etag;\n  }\n\n  // Make sure the input stream is only read once\n  private onlyOnce() {\n    if (this.read) {\n      throw new Error('Response has already been read');\n    }\n    this.read = true;\n  }\n\n  // File path relative to the root extracted directory or a sub directory if subpath is set.\n  private getInnerPath(path: string): string {\n    return path.slice(this.subPath.length);\n  }\n\n  private shouldBeIncluded(entry: Entry): boolean {\n    if (this.subPath) {\n      if (!entry.fileName.startsWith(this.subPath)) {\n        return false;\n      }\n    }\n    if (this.filter) {\n      return this.filter(this.getInnerPath(entry.fileName), {\n        size: entry.uncompressedSize,\n      });\n    }\n    return true;\n  }\n\n  private async streamToTemporaryFile(\n    stream: Readable,\n  ): Promise<{ fileName: string; cleanup: () => Promise<void> }> {\n    const tmpDir = await fs.mkdtemp(\n      platformPath.join(this.workDir, 'backstage-tmp'),\n    );\n    const tmpFile = platformPath.join(tmpDir, 'tmp.zip');\n\n    const writeStream = fs.createWriteStream(tmpFile);\n\n    return new Promise((resolve, reject) => {\n      writeStream.on('error', reject);\n      writeStream.on('finish', () =>\n        resolve({ fileName: tmpFile, cleanup: () => fs.remove(tmpFile) }),\n      );\n      stream.pipe(writeStream);\n    });\n  }\n\n  private forEveryZipEntry(\n    zip: string,\n    callback: (entry: Entry, content: Readable) => Promise<void>,\n  ): Promise<void> {\n    return new Promise((resolve, reject) => {\n      yauzl.open(zip, { lazyEntries: true }, (err, zipfile) => {\n        if (err || !zipfile) {\n          reject(err || new Error(`Failed to open zip file ${zip}`));\n          return;\n        }\n\n        zipfile.on('entry', async (entry: Entry) => {\n          // Check that the file is not a directory, and that is matches the filter.\n          if (!entry.fileName.endsWith('/') && this.shouldBeIncluded(entry)) {\n            zipfile.openReadStream(entry, async (openErr, readStream) => {\n              if (openErr || !readStream) {\n                reject(\n                  openErr ||\n                    new Error(`Failed to open zip entry ${entry.fileName}`),\n                );\n                return;\n              }\n\n              await callback(entry, readStream);\n              zipfile.readEntry();\n            });\n          } else {\n            zipfile.readEntry();\n          }\n        });\n        zipfile.once('end', () => resolve());\n        zipfile.on('error', e => reject(e));\n        zipfile.readEntry();\n      });\n    });\n  }\n\n  async files(): Promise<ReadTreeResponseFile[]> {\n    this.onlyOnce();\n    const files = Array<ReadTreeResponseFile>();\n    const temporary = await this.streamToTemporaryFile(this.stream);\n\n    await this.forEveryZipEntry(temporary.fileName, async (entry, content) => {\n      files.push({\n        path: this.getInnerPath(entry.fileName),\n        content: async () => await streamToBuffer(content),\n      });\n    });\n\n    temporary.cleanup();\n\n    return files;\n  }\n\n  async archive(): Promise<Readable> {\n    this.onlyOnce();\n\n    if (!this.subPath) {\n      return this.stream;\n    }\n\n    const archive = archiver('zip');\n    const temporary = await this.streamToTemporaryFile(this.stream);\n\n    await this.forEveryZipEntry(temporary.fileName, async (entry, content) => {\n      archive.append(await streamToBuffer(content), {\n        name: this.getInnerPath(entry.fileName),\n      });\n    });\n\n    archive.finalize();\n\n    temporary.cleanup();\n\n    return archive;\n  }\n\n  async dir(options?: ReadTreeResponseDirOptions): Promise<string> {\n    this.onlyOnce();\n    const dir =\n      options?.targetDir ??\n      (await fs.mkdtemp(platformPath.join(this.workDir, 'backstage-')));\n\n    const temporary = await this.streamToTemporaryFile(this.stream);\n\n    await this.forEveryZipEntry(temporary.fileName, async (entry, content) => {\n      const entryPath = this.getInnerPath(entry.fileName);\n      const dirname = platformPath.dirname(entryPath);\n\n      if (dirname) {\n        await fs.mkdirp(resolveSafeChildPath(dir, dirname));\n      }\n      return new Promise(async (resolve, reject) => {\n        const file = fs.createWriteStream(resolveSafeChildPath(dir, entryPath));\n        file.on('finish', resolve);\n\n        content.on('error', reject);\n        content.pipe(file);\n      });\n    });\n\n    temporary.cleanup();\n\n    return dir;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport concatStream from 'concat-stream';\nimport platformPath, { basename } from 'path';\n\nimport getRawBody from 'raw-body';\nimport fs from 'fs-extra';\nimport { promisify } from 'util';\nimport tar from 'tar';\nimport { pipeline as pipelineCb, Readable } from 'stream';\nimport {\n  ReadTreeResponse,\n  ReadTreeResponseFile,\n  ReadTreeResponseDirOptions,\n  FromReadableArrayOptions,\n} from '../types';\n\nconst pipeline = promisify(pipelineCb);\n\n/**\n * Wraps a array of Readable objects into a tree response reader.\n */\nexport class ReadableArrayResponse implements ReadTreeResponse {\n  private read = false;\n\n  constructor(\n    private readonly stream: FromReadableArrayOptions,\n    private readonly workDir: string,\n    public readonly etag: string,\n  ) {\n    this.etag = etag;\n  }\n\n  // Make sure the input stream is only read once\n  private onlyOnce() {\n    if (this.read) {\n      throw new Error('Response has already been read');\n    }\n    this.read = true;\n  }\n\n  async files(): Promise<ReadTreeResponseFile[]> {\n    this.onlyOnce();\n\n    const files = Array<ReadTreeResponseFile>();\n\n    for (let i = 0; i < this.stream.length; i++) {\n      if (!this.stream[i].path.endsWith('/')) {\n        files.push({\n          path: this.stream[i].path,\n          content: () => getRawBody(this.stream[i].data),\n        });\n      }\n    }\n\n    return files;\n  }\n\n  async archive(): Promise<NodeJS.ReadableStream> {\n    const tmpDir = await this.dir();\n\n    try {\n      const data = await new Promise<Buffer>(async resolve => {\n        await pipeline(\n          tar.create({ cwd: tmpDir }, ['']),\n          concatStream(resolve),\n        );\n      });\n      return Readable.from(data);\n    } finally {\n      await fs.remove(tmpDir);\n    }\n  }\n\n  async dir(options?: ReadTreeResponseDirOptions): Promise<string> {\n    this.onlyOnce();\n\n    const dir =\n      options?.targetDir ??\n      (await fs.mkdtemp(platformPath.join(this.workDir, 'backstage-')));\n\n    for (let i = 0; i < this.stream.length; i++) {\n      if (!this.stream[i].path.endsWith('/')) {\n        await pipeline(\n          this.stream[i].data,\n          fs.createWriteStream(\n            platformPath.join(dir, basename(this.stream[i].path)),\n          ),\n        );\n      }\n    }\n\n    return dir;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport os from 'os';\nimport { Config } from '@backstage/config';\nimport {\n  ReadTreeResponse,\n  ReadTreeResponseFactoryOptions,\n  ReadTreeResponseFactory,\n  FromReadableArrayOptions,\n} from '../types';\nimport { TarArchiveResponse } from './TarArchiveResponse';\nimport { ZipArchiveResponse } from './ZipArchiveResponse';\nimport { ReadableArrayResponse } from './ReadableArrayResponse';\n\nexport class DefaultReadTreeResponseFactory implements ReadTreeResponseFactory {\n  static create(options: { config: Config }): DefaultReadTreeResponseFactory {\n    return new DefaultReadTreeResponseFactory(\n      options.config.getOptionalString('backend.workingDirectory') ??\n        os.tmpdir(),\n    );\n  }\n\n  constructor(private readonly workDir: string) {}\n\n  async fromTarArchive(\n    options: ReadTreeResponseFactoryOptions,\n  ): Promise<ReadTreeResponse> {\n    return new TarArchiveResponse(\n      options.stream,\n      options.subpath ?? '',\n      this.workDir,\n      options.etag,\n      options.filter,\n    );\n  }\n\n  async fromZipArchive(\n    options: ReadTreeResponseFactoryOptions,\n  ): Promise<ReadTreeResponse> {\n    return new ZipArchiveResponse(\n      options.stream,\n      options.subpath ?? '',\n      this.workDir,\n      options.etag,\n      options.filter,\n    );\n  }\n\n  async fromReadableArray(\n    options: FromReadableArrayOptions,\n  ): Promise<ReadTreeResponse> {\n    return new ReadableArrayResponse(options, this.workDir, '');\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Storage } from '@google-cloud/storage';\nimport {\n  ReaderFactory,\n  ReadTreeResponse,\n  ReadUrlOptions,\n  ReadUrlResponse,\n  SearchResponse,\n  UrlReader,\n} from './types';\nimport getRawBody from 'raw-body';\nimport {\n  GoogleGcsIntegrationConfig,\n  readGoogleGcsIntegrationConfig,\n} from '@backstage/integration';\nimport { Readable } from 'stream';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\n\nconst GOOGLE_GCS_HOST = 'storage.cloud.google.com';\n\nconst parseURL = (\n  url: string,\n): { host: string; bucket: string; key: string } => {\n  const { host, pathname } = new URL(url);\n\n  if (host !== GOOGLE_GCS_HOST) {\n    throw new Error(`not a valid GCS URL: ${url}`);\n  }\n\n  const [, bucket, ...key] = pathname.split('/');\n  return {\n    host: host,\n    bucket,\n    key: key.join('/'),\n  };\n};\n\n/**\n * Implements a {@link UrlReader} for files on Google GCS.\n *\n * @public\n */\nexport class GoogleGcsUrlReader implements UrlReader {\n  static factory: ReaderFactory = ({ config, logger }) => {\n    if (!config.has('integrations.googleGcs')) {\n      return [];\n    }\n    const gcsConfig = readGoogleGcsIntegrationConfig(\n      config.getConfig('integrations.googleGcs'),\n    );\n    let storage: Storage;\n    if (!gcsConfig.clientEmail || !gcsConfig.privateKey) {\n      logger.info(\n        'googleGcs credentials not found in config. Using default credentials provider.',\n      );\n      storage = new Storage();\n    } else {\n      storage = new Storage({\n        credentials: {\n          client_email: gcsConfig.clientEmail || undefined,\n          private_key: gcsConfig.privateKey || undefined,\n        },\n      });\n    }\n    const reader = new GoogleGcsUrlReader(gcsConfig, storage);\n    const predicate = (url: URL) => url.host === GOOGLE_GCS_HOST;\n    return [{ reader, predicate }];\n  };\n\n  constructor(\n    private readonly integration: GoogleGcsIntegrationConfig,\n    private readonly storage: Storage,\n  ) {}\n\n  private readStreamFromUrl(url: string): Readable {\n    const { bucket, key } = parseURL(url);\n    return this.storage.bucket(bucket).file(key).createReadStream();\n  }\n\n  async read(url: string): Promise<Buffer> {\n    try {\n      return await getRawBody(this.readStreamFromUrl(url));\n    } catch (error) {\n      throw new Error(`unable to read gcs file from ${url}, ${error}`);\n    }\n  }\n\n  async readUrl(\n    url: string,\n    _options?: ReadUrlOptions,\n  ): Promise<ReadUrlResponse> {\n    // TODO etag is not implemented yet.\n    const stream = this.readStreamFromUrl(url);\n    return ReadUrlResponseFactory.fromReadable(stream);\n  }\n\n  async readTree(): Promise<ReadTreeResponse> {\n    throw new Error('GcsUrlReader does not implement readTree');\n  }\n\n  async search(url: string): Promise<SearchResponse> {\n    const { bucket, key: pattern } = parseURL(url);\n\n    if (!pattern.endsWith('*') || pattern.indexOf('*') !== pattern.length - 1) {\n      throw new Error('GcsUrlReader only supports prefix-based searches');\n    }\n\n    const [files] = await this.storage.bucket(bucket).getFiles({\n      autoPaginate: true,\n      prefix: pattern.split('*').join(''),\n    });\n\n    return {\n      files: files.map(file => {\n        const fullUrl = ['https:/', GOOGLE_GCS_HOST, bucket, file.name].join(\n          '/',\n        );\n        return {\n          url: fullUrl,\n          content: async () => {\n            const readResponse = await this.readUrl(fullUrl);\n            return readResponse.buffer();\n          },\n        };\n      }),\n      // TODO etag is not implemented yet.\n      etag: 'NOT/IMPLEMENTED',\n    };\n  }\n\n  toString() {\n    const key = this.integration.privateKey;\n    return `googleGcs{host=${GOOGLE_GCS_HOST},authed=${Boolean(key)}}`;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from 'winston';\nimport { Config } from '@backstage/config';\nimport { ReaderFactory, UrlReader } from './types';\nimport { UrlReaderPredicateMux } from './UrlReaderPredicateMux';\nimport { AzureUrlReader } from './AzureUrlReader';\nimport { BitbucketCloudUrlReader } from './BitbucketCloudUrlReader';\nimport { BitbucketServerUrlReader } from './BitbucketServerUrlReader';\nimport { BitbucketUrlReader } from './BitbucketUrlReader';\nimport { GerritUrlReader } from './GerritUrlReader';\nimport { GithubUrlReader } from './GithubUrlReader';\nimport { GitlabUrlReader } from './GitlabUrlReader';\nimport { DefaultReadTreeResponseFactory } from './tree';\nimport { FetchUrlReader } from './FetchUrlReader';\nimport { GoogleGcsUrlReader } from './GoogleGcsUrlReader';\nimport { AwsS3UrlReader } from './AwsS3UrlReader';\n\n/**\n * Creation options for {@link UrlReaders}.\n *\n * @public\n */\nexport type UrlReadersOptions = {\n  /** Root config object */\n  config: Config;\n  /** Logger used by all the readers */\n  logger: Logger;\n  /** A list of factories used to construct individual readers that match on URLs */\n  factories?: ReaderFactory[];\n};\n\n/**\n * Helps construct {@link UrlReader}s.\n *\n * @public\n */\nexport class UrlReaders {\n  /**\n   * Creates a custom {@link UrlReader} wrapper for your own set of factories.\n   */\n  static create(options: UrlReadersOptions): UrlReader {\n    const { logger, config, factories } = options;\n    const mux = new UrlReaderPredicateMux(logger);\n    const treeResponseFactory = DefaultReadTreeResponseFactory.create({\n      config,\n    });\n\n    for (const factory of factories ?? []) {\n      const tuples = factory({ config, logger: logger, treeResponseFactory });\n\n      for (const tuple of tuples) {\n        mux.register(tuple);\n      }\n    }\n\n    return mux;\n  }\n\n  /**\n   * Creates a {@link UrlReader} wrapper that includes all the default factories\n   * from this package.\n   *\n   * Any additional factories passed will be loaded before the default ones.\n   */\n  static default(options: UrlReadersOptions) {\n    const { logger, config, factories = [] } = options;\n    return UrlReaders.create({\n      logger,\n      config,\n      factories: factories.concat([\n        AzureUrlReader.factory,\n        BitbucketCloudUrlReader.factory,\n        BitbucketServerUrlReader.factory,\n        BitbucketUrlReader.factory,\n        GerritUrlReader.factory,\n        GithubUrlReader.factory,\n        GitlabUrlReader.factory,\n        GoogleGcsUrlReader.factory,\n        AwsS3UrlReader.factory,\n        FetchUrlReader.factory,\n      ]),\n    });\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ServiceBuilderImpl } from './lib/ServiceBuilderImpl';\nimport { ServiceBuilder } from './types';\n\n/**\n * Creates a new service builder.\n *\n * @public\n */\nexport function createServiceBuilder(_module: NodeModule): ServiceBuilder {\n  return new ServiceBuilderImpl(_module);\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from 'winston';\nimport Router from 'express-promise-router';\nimport express from 'express';\nimport { errorHandler, statusCheckHandler, StatusCheck } from '../middleware';\n\n/**\n * Creates a default status checking router, that you can add to your express\n * app.\n *\n * @remarks\n *\n * This adds a `/healthcheck` route (or any other path, if given as an\n * argument), which your infra can call to see if the service is ready to serve\n * requests.\n *\n * @public\n */\nexport async function createStatusCheckRouter(options: {\n  logger: Logger;\n  /**\n   * The path (including a leading slash) that the health check should be\n   * mounted on.\n   *\n   * @defaultValue '/healthcheck'\n   */\n  path?: string;\n  /**\n   * If not implemented, the default express middleware always returns 200.\n   * Override this to implement your own logic for a health check.\n   */\n  statusCheck?: StatusCheck;\n}): Promise<express.Router> {\n  const router = Router();\n  const { path = '/healthcheck', statusCheck } = options;\n\n  router.use(path, await statusCheckHandler({ statusCheck }));\n  router.use(errorHandler());\n\n  return router;\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { AuthenticationError } from '@backstage/errors';\nimport { base64url, exportJWK, generateSecret, jwtVerify, SignJWT } from 'jose';\nimport { DateTime, Duration } from 'luxon';\nimport { Logger } from 'winston';\nimport { TokenManager } from './types';\n\nconst TOKEN_ALG = 'HS256';\nconst TOKEN_SUB = 'backstage-server';\nconst TOKEN_EXPIRY_AFTER = Duration.fromObject({ hours: 1 });\nconst TOKEN_REISSUE_AFTER = Duration.fromObject({ minutes: 10 });\n\n/**\n * A token manager that issues static dummy tokens and never fails\n * authentication. This can be useful for testing.\n */\nclass NoopTokenManager implements TokenManager {\n  public readonly isInsecureServerTokenManager: boolean = true;\n\n  async getToken() {\n    return { token: '' };\n  }\n\n  async authenticate() {}\n}\n\n/**\n * Options for {@link ServerTokenManager}.\n *\n * @public\n */\nexport interface ServerTokenManagerOptions {\n  /**\n   * The logger to use.\n   */\n  logger: Logger;\n}\n\n/**\n * Creates and validates tokens for use during backend-to-backend\n * authentication.\n *\n * @public\n */\nexport class ServerTokenManager implements TokenManager {\n  private readonly options: ServerTokenManagerOptions;\n  private readonly verificationKeys: Uint8Array[];\n  private signingKey: Uint8Array;\n  private privateKeyPromise: Promise<void> | undefined;\n  private currentTokenPromise: Promise<{ token: string }> | undefined;\n\n  /**\n   * Creates a token manager that issues static dummy tokens and never fails\n   * authentication. This can be useful for testing.\n   */\n  static noop(): TokenManager {\n    return new NoopTokenManager();\n  }\n\n  static fromConfig(config: Config, options: ServerTokenManagerOptions) {\n    const keys = config.getOptionalConfigArray('backend.auth.keys');\n    if (keys?.length) {\n      return new ServerTokenManager(\n        keys.map(key => key.getString('secret')),\n        options,\n      );\n    }\n\n    if (process.env.NODE_ENV !== 'development') {\n      throw new Error(\n        'You must configure at least one key in backend.auth.keys for production.',\n      );\n    }\n\n    // For development, if a secret has not been configured, we auto generate a secret instead of throwing.\n    options.logger.warn(\n      'Generated a secret for backend-to-backend authentication: DEVELOPMENT USE ONLY.',\n    );\n    return new ServerTokenManager([], options);\n  }\n\n  private constructor(secrets: string[], options: ServerTokenManagerOptions) {\n    if (!secrets.length && process.env.NODE_ENV !== 'development') {\n      throw new Error(\n        'No secrets provided when constructing ServerTokenManager',\n      );\n    }\n    this.options = options;\n    this.verificationKeys = secrets.map(s => base64url.decode(s));\n    this.signingKey = this.verificationKeys[0];\n  }\n\n  // Called when no keys have been generated yet in the dev environment\n  private async generateKeys(): Promise<void> {\n    if (process.env.NODE_ENV !== 'development') {\n      throw new Error(\n        'Key generation is not supported outside of the dev environment',\n      );\n    }\n\n    if (this.privateKeyPromise) {\n      return this.privateKeyPromise;\n    }\n\n    const promise = (async () => {\n      const secret = await generateSecret(TOKEN_ALG);\n      const jwk = await exportJWK(secret);\n      this.verificationKeys.push(base64url.decode(jwk.k ?? ''));\n      this.signingKey = this.verificationKeys[0];\n      return;\n    })();\n\n    try {\n      this.privateKeyPromise = promise;\n      await promise;\n    } catch (error) {\n      // If we fail to generate a new key, we need to clear the state so that\n      // the next caller will try to generate another key.\n      this.options.logger.error(`Failed to generate new key, ${error}`);\n      delete this.privateKeyPromise;\n    }\n\n    return promise;\n  }\n\n  async getToken(): Promise<{ token: string }> {\n    if (!this.verificationKeys.length) {\n      await this.generateKeys();\n    }\n\n    if (this.currentTokenPromise) {\n      return this.currentTokenPromise;\n    }\n\n    const result = Promise.resolve().then(async () => {\n      const jwt = await new SignJWT({})\n        .setProtectedHeader({ alg: TOKEN_ALG })\n        .setSubject(TOKEN_SUB)\n        .setExpirationTime(\n          DateTime.now().plus(TOKEN_EXPIRY_AFTER).toUnixInteger(),\n        )\n        .sign(this.signingKey);\n      return { token: jwt };\n    });\n\n    this.currentTokenPromise = result;\n\n    result\n      .then(() => {\n        setTimeout(() => {\n          this.currentTokenPromise = undefined;\n        }, TOKEN_REISSUE_AFTER.toMillis());\n      })\n      .catch(() => {\n        this.currentTokenPromise = undefined;\n      });\n\n    return result;\n  }\n\n  async authenticate(token: string): Promise<void> {\n    let verifyError = undefined;\n\n    for (const key of this.verificationKeys) {\n      try {\n        const {\n          protectedHeader: { alg },\n          payload: { sub, exp },\n        } = await jwtVerify(token, key);\n\n        if (alg !== TOKEN_ALG) {\n          throw new AuthenticationError(`Illegal alg \"${alg}\"`);\n        }\n\n        if (sub !== TOKEN_SUB) {\n          throw new AuthenticationError(`Illegal sub \"${sub}\"`);\n        }\n\n        if (typeof exp !== 'number') {\n          throw new AuthenticationError(\n            'Server-to-server token had no exp claim',\n          );\n        }\n        return;\n      } catch (e) {\n        // Catch the verify exception and continue\n        verifyError = e;\n      }\n    }\n\n    throw new AuthenticationError('Invalid server token', verifyError);\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Docker from 'dockerode';\nimport fs from 'fs-extra';\nimport { ForwardedError } from '@backstage/errors';\nimport { PassThrough } from 'stream';\nimport { ContainerRunner, RunContainerOptions } from './ContainerRunner';\n\nexport type UserOptions = {\n  User?: string;\n};\n\n/**\n * A {@link ContainerRunner} for Docker containers.\n *\n * @public\n */\nexport class DockerContainerRunner implements ContainerRunner {\n  private readonly dockerClient: Docker;\n\n  constructor(options: { dockerClient: Docker }) {\n    this.dockerClient = options.dockerClient;\n  }\n\n  async runContainer(options: RunContainerOptions) {\n    const {\n      imageName,\n      command,\n      args,\n      logStream = new PassThrough(),\n      mountDirs = {},\n      workingDir,\n      envVars = {},\n      pullImage = true,\n    } = options;\n\n    // Show a better error message when Docker is unavailable.\n    try {\n      await this.dockerClient.ping();\n    } catch (e) {\n      throw new ForwardedError(\n        'This operation requires Docker. Docker does not appear to be available. Docker.ping() failed with',\n        e,\n      );\n    }\n\n    if (pullImage) {\n      await new Promise<void>((resolve, reject) => {\n        this.dockerClient.pull(imageName, {}, (err, stream) => {\n          if (err) return reject(err);\n          stream.pipe(logStream, { end: false });\n          stream.on('end', () => resolve());\n          stream.on('error', (error: Error) => reject(error));\n          return undefined;\n        });\n      });\n    }\n\n    const userOptions: UserOptions = {};\n    if (process.getuid && process.getgid) {\n      // Files that are created inside the Docker container will be owned by\n      // root on the host system on non Mac systems, because of reasons. Mainly the fact that\n      // volume sharing is done using NFS on Mac and actual mounts in Linux world.\n      // So we set the user in the container as the same user and group id as the host.\n      // On Windows we don't have process.getuid nor process.getgid\n      userOptions.User = `${process.getuid()}:${process.getgid()}`;\n    }\n\n    // Initialize volumes to mount based on mountDirs map\n    const Volumes: { [T: string]: object } = {};\n    for (const containerDir of Object.values(mountDirs)) {\n      Volumes[containerDir] = {};\n    }\n\n    // Create bind volumes\n    const Binds: string[] = [];\n    for (const [hostDir, containerDir] of Object.entries(mountDirs)) {\n      // Need to use realpath here as Docker mounting does not like\n      // symlinks for binding volumes\n      const realHostDir = await fs.realpath(hostDir);\n      Binds.push(`${realHostDir}:${containerDir}`);\n    }\n\n    // Create docker environment variables array\n    const Env = [];\n    for (const [key, value] of Object.entries(envVars)) {\n      Env.push(`${key}=${value}`);\n    }\n\n    const [{ Error: error, StatusCode: statusCode }] =\n      await this.dockerClient.run(imageName, args, logStream, {\n        Volumes,\n        HostConfig: {\n          AutoRemove: true,\n          Binds,\n        },\n        ...(workingDir ? { WorkingDir: workingDir } : {}),\n        Entrypoint: command,\n        Env,\n        ...userOptions,\n      } as Docker.ContainerCreateOptions);\n\n    if (error) {\n      throw new Error(\n        `Docker failed to run with the following error message: ${error}`,\n      );\n    }\n\n    if (statusCode !== 0) {\n      throw new Error(\n        `Docker container returned a non-zero exit code (${statusCode})`,\n      );\n    }\n  }\n}\n"],"names":["winston","merge","createHash","Keyv","KeyvRedis","KeyvMemcache","ConfigReader","parseArgs","resolvePath","findPaths","getPackages","loadConfigSchema","config","loadConfig","AbortController","knexFactory","yn","InputError","ForwardedError","path","ensureDirSync","omit","stringifyError","port","Minimatch","serializeError","NotModifiedError","AuthenticationError","NotAllowedError","NotFoundError","ConflictError","morgan","http","https","fs","dirname","express","helmet","cors","compression","defaultRequestLoggingHandler","defaultErrorHandler","stoppable","isChildPath","getRawBody","Readable","getAzureFileFetchUrl","fetch","getAzureRequestOptions","getAzureCommitsUrl","getAzureDownloadUrl","ScmIntegrations","getBitbucketCloudFileFetchUrl","getBitbucketCloudRequestOptions","parseGitUrl","getBitbucketCloudDownloadUrl","trimEnd","getBitbucketCloudDefaultBranch","getBitbucketFileFetchUrl","getBitbucketRequestOptions","getBitbucketDownloadUrl","getBitbucketDefaultBranch","getBitbucketServerFileFetchUrl","getBitbucketServerRequestOptions","getBitbucketServerDownloadUrl","git","pipeline","promisify","pipelineCb","joinPath","getGerritFileContentsApiUrl","getGerritRequestOptions","Base64Decode","parseGerritGitilesUrl","getGerritBranchApiUrl","parseGerritJsonResponse","getGerritCloneRepoUrl","tar","concatStream","os","getGitHubFileFetchUrl","DefaultGithubCredentialsProvider","getGitLabFileFetchUrl","getGitLabRequestOptions","getGitLabIntegrationRelativePath","trimStart","aws","Parse","platformPath","yauzl","archiver","basename","readGoogleGcsIntegrationConfig","storage","Storage","Router","Duration","base64url","generateSecret","exportJWK","SignJWT","DateTime","jwtVerify","PassThrough","error"],"mappings":"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"}