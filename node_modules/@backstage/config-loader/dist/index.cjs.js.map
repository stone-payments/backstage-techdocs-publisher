{"version":3,"file":"index.cjs.js","sources":["../src/lib/env.ts","../src/lib/transform/utils.ts","../src/lib/transform/apply.ts","../src/lib/transform/include.ts","../src/lib/transform/substitution.ts","../src/lib/schema/types.ts","../src/lib/schema/compile.ts","../src/lib/schema/collect.ts","../src/lib/schema/filtering.ts","../src/lib/schema/load.ts","../src/lib/urls.ts","../src/loader.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '@backstage/config';\nimport { JsonObject } from '@backstage/types';\nimport { assertError } from '@backstage/errors';\n\nconst ENV_PREFIX = 'APP_CONFIG_';\n\n// Update the same pattern in config package if this is changed\nconst CONFIG_KEY_PART_PATTERN = /^[a-z][a-z0-9]*(?:[-_][a-z][a-z0-9]*)*$/i;\n\n/**\n * Read runtime configuration from the environment.\n *\n * Only environment variables prefixed with APP_CONFIG_ will be considered.\n *\n * For each variable, the prefix will be removed, and rest of the key will\n * be split by '_'. Each part will then be used as keys to build up a nested\n * config object structure. The treatment of the entire environment variable\n * is case-sensitive.\n *\n * The value of the variable should be JSON serialized, as it will be parsed\n * and the type will be kept intact. For example \"true\" and true are treated\n * differently, as well as \"42\" and 42.\n *\n * For example, to set the config app.title to \"My Title\", use the following:\n *\n * APP_CONFIG_app_title='\"My Title\"'\n *\n * @public\n */\nexport function readEnvConfig(env: {\n  [name: string]: string | undefined;\n}): AppConfig[] {\n  let data: JsonObject | undefined = undefined;\n\n  for (const [name, value] of Object.entries(env)) {\n    if (!value) {\n      continue;\n    }\n    if (name.startsWith(ENV_PREFIX)) {\n      const key = name.replace(ENV_PREFIX, '');\n      const keyParts = key.split('_');\n\n      let obj = (data = data ?? {});\n      for (const [index, part] of keyParts.entries()) {\n        if (!CONFIG_KEY_PART_PATTERN.test(part)) {\n          throw new TypeError(`Invalid env config key '${key}'`);\n        }\n        if (index < keyParts.length - 1) {\n          obj = (obj[part] = obj[part] ?? {}) as JsonObject;\n          if (typeof obj !== 'object' || Array.isArray(obj)) {\n            const subKey = keyParts.slice(0, index + 1).join('_');\n            throw new TypeError(\n              `Could not nest config for key '${key}' under existing value '${subKey}'`,\n            );\n          }\n        } else {\n          if (part in obj) {\n            throw new TypeError(\n              `Refusing to override existing config at key '${key}'`,\n            );\n          }\n          try {\n            const [, parsedValue] = safeJsonParse(value);\n            if (parsedValue === null) {\n              throw new Error('value may not be null');\n            }\n            obj[part] = parsedValue;\n          } catch (error) {\n            throw new TypeError(\n              `Failed to parse JSON-serialized config value for key '${key}', ${error}`,\n            );\n          }\n        }\n      }\n    }\n  }\n\n  return data ? [{ data, context: 'env' }] : [];\n}\n\nfunction safeJsonParse(str: string): [Error | null, any] {\n  try {\n    return [null, JSON.parse(str)];\n  } catch (err) {\n    assertError(err);\n    return [err, str];\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { JsonValue, JsonObject } from '@backstage/types';\n\nexport function isObject(obj: JsonValue | undefined): obj is JsonObject {\n  if (typeof obj !== 'object') {\n    return false;\n  } else if (Array.isArray(obj)) {\n    return false;\n  }\n  return obj !== null;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { JsonObject, JsonValue } from '@backstage/types';\nimport { assertError } from '@backstage/errors';\nimport { TransformFunc } from './types';\nimport { isObject } from './utils';\n\n/**\n * Applies a set of transforms to raw configuration data.\n */\nexport async function applyConfigTransforms(\n  initialDir: string,\n  input: JsonValue,\n  transforms: TransformFunc[],\n): Promise<JsonObject> {\n  async function transform(\n    inputObj: JsonValue,\n    path: string,\n    baseDir: string,\n  ): Promise<JsonValue | undefined> {\n    let obj = inputObj;\n    let dir = baseDir;\n\n    for (const tf of transforms) {\n      try {\n        const result = await tf(inputObj, baseDir);\n        if (result.applied) {\n          if (result.value === undefined) {\n            return undefined;\n          }\n          obj = result.value;\n          dir = result.newBaseDir ?? dir;\n          break;\n        }\n      } catch (error) {\n        assertError(error);\n        throw new Error(`error at ${path}, ${error.message}`);\n      }\n    }\n\n    if (typeof obj !== 'object') {\n      return obj;\n    } else if (obj === null) {\n      return undefined;\n    } else if (Array.isArray(obj)) {\n      const arr = new Array<JsonValue>();\n\n      for (const [index, value] of obj.entries()) {\n        const out = await transform(value, `${path}[${index}]`, dir);\n        if (out !== undefined) {\n          arr.push(out);\n        }\n      }\n\n      return arr;\n    }\n\n    const out: JsonObject = {};\n\n    for (const [key, value] of Object.entries(obj)) {\n      // undefined covers optional fields\n      if (value !== undefined) {\n        const result = await transform(value, `${path}.${key}`, dir);\n        if (result !== undefined) {\n          out[key] = result;\n        }\n      }\n    }\n\n    return out;\n  }\n\n  const finalData = await transform(input, '', initialDir);\n  if (!isObject(finalData)) {\n    throw new TypeError('expected object at config root');\n  }\n  return finalData;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport yaml from 'yaml';\nimport { extname, dirname, resolve as resolvePath } from 'path';\nimport { JsonObject, JsonValue } from '@backstage/types';\nimport { isObject } from './utils';\nimport { TransformFunc, EnvFunc, ReadFileFunc } from './types';\n\n// Parsers for each type of included file\nconst includeFileParser: {\n  [ext in string]: (content: string) => Promise<JsonObject>;\n} = {\n  '.json': async content => JSON.parse(content),\n  '.yaml': async content => yaml.parse(content),\n  '.yml': async content => yaml.parse(content),\n};\n\n/**\n * Transforms a include description into the actual included value.\n */\nexport function createIncludeTransform(\n  env: EnvFunc,\n  readFile: ReadFileFunc,\n  substitute: TransformFunc,\n): TransformFunc {\n  return async (input: JsonValue, baseDir: string) => {\n    if (!isObject(input)) {\n      return { applied: false };\n    }\n    // Check if there's any key that starts with a '$', in that case we treat\n    // this entire object as an include description.\n    const [includeKey] = Object.keys(input).filter(key => key.startsWith('$'));\n    if (includeKey) {\n      if (Object.keys(input).length !== 1) {\n        throw new Error(\n          `include key ${includeKey} should not have adjacent keys`,\n        );\n      }\n    } else {\n      return { applied: false };\n    }\n\n    const rawIncludedValue = input[includeKey];\n    if (typeof rawIncludedValue !== 'string') {\n      throw new Error(`${includeKey} include value is not a string`);\n    }\n\n    const substituteResults = await substitute(rawIncludedValue, baseDir);\n    const includeValue = substituteResults.applied\n      ? substituteResults.value\n      : rawIncludedValue;\n\n    // The second string check is needed for Typescript to know this is a string.\n    if (includeValue === undefined || typeof includeValue !== 'string') {\n      throw new Error(`${includeKey} substitution value was undefined`);\n    }\n\n    switch (includeKey) {\n      case '$file':\n        try {\n          const value = await readFile(resolvePath(baseDir, includeValue));\n          return { applied: true, value: value.trimEnd() };\n        } catch (error) {\n          throw new Error(`failed to read file ${includeValue}, ${error}`);\n        }\n      case '$env':\n        try {\n          return { applied: true, value: await env(includeValue) };\n        } catch (error) {\n          throw new Error(`failed to read env ${includeValue}, ${error}`);\n        }\n\n      case '$include': {\n        const [filePath, dataPath] = includeValue.split(/#(.*)/);\n\n        const ext = extname(filePath);\n        const parser = includeFileParser[ext];\n        if (!parser) {\n          throw new Error(\n            `no configuration parser available for included file ${filePath}`,\n          );\n        }\n\n        const path = resolvePath(baseDir, filePath);\n        const content = await readFile(path);\n        const newBaseDir = dirname(path);\n\n        const parts = dataPath ? dataPath.split('.') : [];\n\n        let value: JsonValue | undefined;\n        try {\n          value = await parser(content);\n        } catch (error) {\n          throw new Error(\n            `failed to parse included file ${filePath}, ${error}`,\n          );\n        }\n\n        // This bit handles selecting a subtree in the included file, if a path was provided after a #\n        for (const [index, part] of parts.entries()) {\n          if (!isObject(value)) {\n            const errPath = parts.slice(0, index).join('.');\n            throw new Error(\n              `value at '${errPath}' in included file ${filePath} is not an object`,\n            );\n          }\n          value = value[part];\n        }\n\n        return {\n          applied: true,\n          value,\n          newBaseDir: newBaseDir !== baseDir ? newBaseDir : undefined,\n        };\n      }\n\n      default:\n        throw new Error(`unknown include ${includeKey}`);\n    }\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { JsonValue } from '@backstage/types';\nimport { TransformFunc, EnvFunc } from './types';\n\n/**\n * A environment variable substitution transform that transforms e.g. 'token ${MY_TOKEN}'\n * to 'token abc' if MY_TOKEN is 'abc'. If any of the substituted variables are undefined,\n * the entire expression ends up undefined.\n */\nexport function createSubstitutionTransform(env: EnvFunc): TransformFunc {\n  return async (input: JsonValue) => {\n    if (typeof input !== 'string') {\n      return { applied: false };\n    }\n\n    const parts: (string | undefined)[] = input.split(/(\\$?\\$\\{[^{}]*\\})/);\n    for (let i = 1; i < parts.length; i += 2) {\n      const part = parts[i]!;\n      if (part.startsWith('$$')) {\n        parts[i] = part.slice(1);\n      } else {\n        parts[i] = await env(part.slice(2, -1).trim());\n      }\n    }\n\n    if (parts.some(part => part === undefined)) {\n      return { applied: true, value: undefined };\n    }\n    return { applied: true, value: parts.join('') };\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '@backstage/config';\nimport { JsonObject } from '@backstage/types';\n\n/**\n * An sub-set of configuration schema.\n */\nexport type ConfigSchemaPackageEntry = {\n  /**\n   * The configuration schema itself.\n   */\n  value: JsonObject;\n  /**\n   * The relative path that the configuration schema was discovered at.\n   */\n  path: string;\n};\n\n/**\n * A list of all possible configuration value visibilities.\n */\nexport const CONFIG_VISIBILITIES = ['frontend', 'backend', 'secret'] as const;\n\n/**\n * A type representing the possible configuration value visibilities\n *\n * @public\n */\nexport type ConfigVisibility = 'frontend' | 'backend' | 'secret';\n\n/**\n * The default configuration visibility if no other values is given.\n */\nexport const DEFAULT_CONFIG_VISIBILITY: ConfigVisibility = 'backend';\n\n/**\n * An explanation of a configuration validation error.\n */\nexport type ValidationError = {\n  keyword: string;\n  instancePath: string;\n  schemaPath: string;\n  params: Record<string, any>;\n  propertyName?: string;\n  message?: string;\n};\n\n/**\n * The result of validating configuration data using a schema.\n */\ntype ValidationResult = {\n  /**\n   * Errors that where emitted during validation, if any.\n   */\n  errors?: ValidationError[];\n  /**\n   * The configuration visibilities that were discovered during validation.\n   *\n   * The path in the key uses the form `/<key>/<sub-key>/<array-index>/<leaf-key>`\n   */\n  visibilityByDataPath: Map<string, ConfigVisibility>;\n\n  /**\n   * The configuration visibilities that were discovered during validation.\n   *\n   * The path in the key uses the form `/properties/<key>/items/additionalProperties/<leaf-key>`\n   */\n  visibilityBySchemaPath: Map<string, ConfigVisibility>;\n\n  /**\n   * The deprecated options that were discovered during validation.\n   *\n   * The path in the key uses the form `/<key>/<sub-key>/<array-index>/<leaf-key>`\n   */\n  deprecationByDataPath: Map<string, string>;\n};\n\n/**\n * A function used validate configuration data.\n */\nexport type ValidationFunc = (configs: AppConfig[]) => ValidationResult;\n\n/**\n * A function used to transform primitive configuration values.\n *\n * @public\n */\nexport type TransformFunc<T extends number | string | boolean> = (\n  value: T,\n  context: { visibility: ConfigVisibility },\n) => T | undefined;\n\n/**\n * Options used to process configuration data with a schema.\n *\n * @public\n */\nexport type ConfigSchemaProcessingOptions = {\n  /**\n   * The visibilities that should be included in the output data.\n   * If omitted, the data will not be filtered by visibility.\n   */\n  visibility?: ConfigVisibility[];\n\n  /**\n   * When set to `true`, any schema errors in the provided configuration will be ignored.\n   */\n  ignoreSchemaErrors?: boolean;\n\n  /**\n   * A transform function that can be used to transform primitive configuration values\n   * during validation. The value returned from the transform function will be used\n   * instead of the original value. If the transform returns `undefined`, the value\n   * will be omitted.\n   */\n  valueTransform?: TransformFunc<any>;\n\n  /**\n   * Whether or not to include the `filteredKeys` property in the output `AppConfig`s.\n   *\n   * Default: `false`.\n   */\n  withFilteredKeys?: boolean;\n\n  /**\n   * Whether or not to include the `deprecatedKeys` property in the output `AppConfig`s.\n   *\n   * Default: `true`.\n   */\n  withDeprecatedKeys?: boolean;\n};\n\n/**\n * A loaded configuration schema that is ready to process configuration data.\n *\n * @public\n */\nexport type ConfigSchema = {\n  process(\n    appConfigs: AppConfig[],\n    options?: ConfigSchemaProcessingOptions,\n  ): AppConfig[];\n\n  serialize(): JsonObject;\n};\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Ajv from 'ajv';\nimport { JSONSchema7 as JSONSchema } from 'json-schema';\nimport mergeAllOf, { Resolvers } from 'json-schema-merge-allof';\nimport traverse from 'json-schema-traverse';\nimport { ConfigReader } from '@backstage/config';\nimport {\n  ConfigSchemaPackageEntry,\n  ValidationFunc,\n  CONFIG_VISIBILITIES,\n  ConfigVisibility,\n} from './types';\n\n/**\n * This takes a collection of Backstage configuration schemas from various\n * sources and compiles them down into a single schema validation function.\n *\n * It also handles the implementation of the custom \"visibility\" keyword used\n * to specify the scope of different config paths.\n */\nexport function compileConfigSchemas(\n  schemas: ConfigSchemaPackageEntry[],\n): ValidationFunc {\n  // The ajv instance below is stateful and doesn't really allow for additional\n  // output during validation. We work around this by having this extra piece\n  // of state that we reset before each validation.\n  const visibilityByDataPath = new Map<string, ConfigVisibility>();\n  const deprecationByDataPath = new Map<string, string>();\n\n  const ajv = new Ajv({\n    allErrors: true,\n    allowUnionTypes: true,\n    schemas: {\n      'https://backstage.io/schema/config-v1': true,\n    },\n  })\n    .addKeyword({\n      keyword: 'visibility',\n      metaSchema: {\n        type: 'string',\n        enum: CONFIG_VISIBILITIES,\n      },\n      compile(visibility: ConfigVisibility) {\n        return (_data, context) => {\n          if (context?.instancePath === undefined) {\n            return false;\n          }\n          if (visibility && visibility !== 'backend') {\n            const normalizedPath = context.instancePath.replace(\n              /\\['?(.*?)'?\\]/g,\n              (_, segment) => `/${segment}`,\n            );\n            visibilityByDataPath.set(normalizedPath, visibility);\n          }\n          return true;\n        };\n      },\n    })\n    .removeKeyword('deprecated') // remove `deprecated` keyword so that we can implement our own compiler\n    .addKeyword({\n      keyword: 'deprecated',\n      metaSchema: { type: 'string' },\n      compile(deprecationDescription: string) {\n        return (_data, context) => {\n          if (context?.instancePath === undefined) {\n            return false;\n          }\n          const normalizedPath = context.instancePath.replace(\n            /\\['?(.*?)'?\\]/g,\n            (_, segment) => `/${segment}`,\n          );\n          // create mapping of deprecation description and data path of property\n          deprecationByDataPath.set(normalizedPath, deprecationDescription);\n          return true;\n        };\n      },\n    });\n\n  for (const schema of schemas) {\n    try {\n      ajv.compile(schema.value);\n    } catch (error) {\n      throw new Error(`Schema at ${schema.path} is invalid, ${error}`);\n    }\n  }\n\n  const merged = mergeConfigSchemas(schemas.map(_ => _.value));\n\n  const validate = ajv.compile(merged);\n\n  const visibilityBySchemaPath = new Map<string, ConfigVisibility>();\n  traverse(merged, (schema, path) => {\n    if (schema.visibility && schema.visibility !== 'backend') {\n      visibilityBySchemaPath.set(path, schema.visibility);\n    }\n  });\n\n  return configs => {\n    const config = ConfigReader.fromConfigs(configs).get();\n\n    visibilityByDataPath.clear();\n\n    const valid = validate(config);\n\n    if (!valid) {\n      return {\n        errors: validate.errors ?? [],\n        visibilityByDataPath: new Map(visibilityByDataPath),\n        visibilityBySchemaPath,\n        deprecationByDataPath,\n      };\n    }\n\n    return {\n      visibilityByDataPath: new Map(visibilityByDataPath),\n      visibilityBySchemaPath,\n      deprecationByDataPath,\n    };\n  };\n}\n\n/**\n * Given a list of configuration schemas from packages, merge them\n * into a single json schema.\n *\n * @public\n */\nexport function mergeConfigSchemas(schemas: JSONSchema[]): JSONSchema {\n  const merged = mergeAllOf(\n    { allOf: schemas },\n    {\n      // JSONSchema is typically subtractive, as in it always reduces the set of allowed\n      // inputs through constraints. This changes the object property merging to be additive\n      // rather than subtractive.\n      ignoreAdditionalProperties: true,\n      resolvers: {\n        // This ensures that the visibilities across different schemas are sound, and\n        // selects the most specific visibility for each path.\n        visibility(values: string[], path: string[]) {\n          const hasFrontend = values.some(_ => _ === 'frontend');\n          const hasSecret = values.some(_ => _ === 'secret');\n          if (hasFrontend && hasSecret) {\n            throw new Error(\n              `Config schema visibility is both 'frontend' and 'secret' for ${path.join(\n                '/',\n              )}`,\n            );\n          } else if (hasFrontend) {\n            return 'frontend';\n          } else if (hasSecret) {\n            return 'secret';\n          }\n\n          return 'backend';\n        },\n      } as Partial<Resolvers<JSONSchema>>,\n    },\n  );\n  return merged;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs-extra';\nimport {\n  resolve as resolvePath,\n  relative as relativePath,\n  dirname,\n  sep,\n} from 'path';\nimport { ConfigSchemaPackageEntry } from './types';\nimport { JsonObject } from '@backstage/types';\nimport { assertError } from '@backstage/errors';\n\ntype Item = {\n  name?: string;\n  parentPath?: string;\n  packagePath?: string;\n};\n\nconst req =\n  typeof __non_webpack_require__ === 'undefined'\n    ? require\n    : __non_webpack_require__;\n\n/**\n * This collects all known config schemas across all dependencies of the app.\n */\nexport async function collectConfigSchemas(\n  packageNames: string[],\n  packagePaths: string[],\n): Promise<ConfigSchemaPackageEntry[]> {\n  const schemas = new Array<ConfigSchemaPackageEntry>();\n  const tsSchemaPaths = new Array<string>();\n  const visitedPackageVersions = new Map<string, Set<string>>(); // pkgName: [versions...]\n\n  const currentDir = await fs.realpath(process.cwd());\n\n  async function processItem(item: Item) {\n    let pkgPath = item.packagePath;\n\n    if (pkgPath) {\n      const pkgExists = await fs.pathExists(pkgPath);\n      if (!pkgExists) {\n        return;\n      }\n    } else if (item.name) {\n      const { name, parentPath } = item;\n\n      try {\n        pkgPath = req.resolve(\n          `${name}/package.json`,\n          parentPath && {\n            paths: [parentPath],\n          },\n        );\n      } catch {\n        // We can somewhat safely ignore packages that don't export package.json,\n        // as they are likely not part of the Backstage ecosystem anyway.\n      }\n    }\n    if (!pkgPath) {\n      return;\n    }\n\n    const pkg = await fs.readJson(pkgPath);\n\n    // Ensures that we only process the same version of each package once.\n    let versions = visitedPackageVersions.get(pkg.name);\n    if (versions?.has(pkg.version)) {\n      return;\n    }\n    if (!versions) {\n      versions = new Set();\n      visitedPackageVersions.set(pkg.name, versions);\n    }\n    versions.add(pkg.version);\n\n    const depNames = [\n      ...Object.keys(pkg.dependencies ?? {}),\n      ...Object.keys(pkg.devDependencies ?? {}),\n      ...Object.keys(pkg.optionalDependencies ?? {}),\n      ...Object.keys(pkg.peerDependencies ?? {}),\n    ];\n\n    // TODO(Rugvip): Trying this out to avoid having to traverse the full dependency graph,\n    //               since that's pretty slow. We probably need a better way to determine when\n    //               we've left the Backstage ecosystem, but this will do for now.\n    const hasSchema = 'configSchema' in pkg;\n    const hasBackstageDep = depNames.some(_ => _.startsWith('@backstage/'));\n    if (!hasSchema && !hasBackstageDep) {\n      return;\n    }\n    if (hasSchema) {\n      if (typeof pkg.configSchema === 'string') {\n        const isJson = pkg.configSchema.endsWith('.json');\n        const isDts = pkg.configSchema.endsWith('.d.ts');\n        if (!isJson && !isDts) {\n          throw new Error(\n            `Config schema files must be .json or .d.ts, got ${pkg.configSchema}`,\n          );\n        }\n        if (isDts) {\n          tsSchemaPaths.push(\n            relativePath(\n              currentDir,\n              resolvePath(dirname(pkgPath), pkg.configSchema),\n            ),\n          );\n        } else {\n          const path = resolvePath(dirname(pkgPath), pkg.configSchema);\n          const value = await fs.readJson(path);\n          schemas.push({\n            value,\n            path: relativePath(currentDir, path),\n          });\n        }\n      } else {\n        schemas.push({\n          value: pkg.configSchema,\n          path: relativePath(currentDir, pkgPath),\n        });\n      }\n    }\n\n    await Promise.all(\n      depNames.map(depName =>\n        processItem({ name: depName, parentPath: pkgPath }),\n      ),\n    );\n  }\n\n  await Promise.all([\n    ...packageNames.map(name => processItem({ name, parentPath: currentDir })),\n    ...packagePaths.map(path => processItem({ name: path, packagePath: path })),\n  ]);\n\n  const tsSchemas = await compileTsSchemas(tsSchemaPaths);\n\n  return schemas.concat(tsSchemas);\n}\n\n// This handles the support of TypeScript .d.ts config schema declarations.\n// We collect all typescript schema definition and compile them all in one go.\n// This is much faster than compiling them separately.\nasync function compileTsSchemas(paths: string[]) {\n  if (paths.length === 0) {\n    return [];\n  }\n\n  // Lazy loaded, because this brings up all of TypeScript and we don't\n  // want that eagerly loaded in tests\n  const { getProgramFromFiles, generateSchema } = await import(\n    'typescript-json-schema'\n  );\n\n  const program = getProgramFromFiles(paths, {\n    incremental: false,\n    isolatedModules: true,\n    lib: ['ES5'], // Skipping most libs speeds processing up a lot, we just need the primitive types anyway\n    noEmit: true,\n    noResolve: true,\n    skipLibCheck: true, // Skipping lib checks speeds things up\n    skipDefaultLibCheck: true,\n    strict: true,\n    typeRoots: [], // Do not include any additional types\n    types: [],\n  });\n\n  const tsSchemas = paths.map(path => {\n    let value;\n    try {\n      value = generateSchema(\n        program,\n        // All schemas should export a `Config` symbol\n        'Config',\n        // This enables the use of these tags in TSDoc comments\n        {\n          required: true,\n          validationKeywords: ['visibility', 'deprecated'],\n        },\n        [path.split(sep).join('/')], // Unix paths are expected for all OSes here\n      ) as JsonObject | null;\n    } catch (error) {\n      assertError(error);\n      if (error.message !== 'type Config not found') {\n        throw error;\n      }\n    }\n\n    if (!value) {\n      throw new Error(`Invalid schema in ${path}, missing Config export`);\n    }\n    return { path, value };\n  });\n\n  return tsSchemas;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { JsonObject, JsonValue } from '@backstage/types';\nimport {\n  ConfigVisibility,\n  DEFAULT_CONFIG_VISIBILITY,\n  TransformFunc,\n  ValidationError,\n} from './types';\n\n/**\n * This filters data by visibility by discovering the visibility of each\n * value, and then only keeping the ones that are specified in `includeVisibilities`.\n */\nexport function filterByVisibility(\n  data: JsonObject,\n  includeVisibilities: ConfigVisibility[],\n  visibilityByDataPath: Map<string, ConfigVisibility>,\n  deprecationByDataPath: Map<string, string>,\n  transformFunc?: TransformFunc<number | string | boolean>,\n  withFilteredKeys?: boolean,\n  withDeprecatedKeys?: boolean,\n): {\n  data: JsonObject;\n  filteredKeys?: string[];\n  deprecatedKeys?: { key: string; description: string }[];\n} {\n  const filteredKeys = new Array<string>();\n  const deprecatedKeys = new Array<{ key: string; description: string }>();\n\n  function transform(\n    jsonVal: JsonValue,\n    visibilityPath: string, // Matches the format we get from ajv\n    filterPath: string, // Matches the format of the ConfigReader\n  ): JsonValue | undefined {\n    const visibility =\n      visibilityByDataPath.get(visibilityPath) ?? DEFAULT_CONFIG_VISIBILITY;\n    const isVisible = includeVisibilities.includes(visibility);\n\n    // deprecated keys are added regardless of visibility indicator\n    const deprecation = deprecationByDataPath.get(visibilityPath);\n    if (deprecation) {\n      deprecatedKeys.push({ key: filterPath, description: deprecation });\n    }\n\n    if (typeof jsonVal !== 'object') {\n      if (isVisible) {\n        if (transformFunc) {\n          return transformFunc(jsonVal, { visibility });\n        }\n        return jsonVal;\n      }\n      if (withFilteredKeys) {\n        filteredKeys.push(filterPath);\n      }\n      return undefined;\n    } else if (jsonVal === null) {\n      return undefined;\n    } else if (Array.isArray(jsonVal)) {\n      const arr = new Array<JsonValue>();\n\n      for (const [index, value] of jsonVal.entries()) {\n        let path = visibilityPath;\n        const hasVisibilityInIndex = visibilityByDataPath.get(\n          `${visibilityPath}/${index}`,\n        );\n\n        if (hasVisibilityInIndex || typeof value === 'object') {\n          path = `${visibilityPath}/${index}`;\n        }\n\n        const out = transform(value, path, `${filterPath}[${index}]`);\n\n        if (out !== undefined) {\n          arr.push(out);\n        }\n      }\n\n      if (arr.length > 0 || isVisible) {\n        return arr;\n      }\n      return undefined;\n    }\n\n    const outObj: JsonObject = {};\n    let hasOutput = false;\n\n    for (const [key, value] of Object.entries(jsonVal)) {\n      if (value === undefined) {\n        continue;\n      }\n      const out = transform(\n        value,\n        `${visibilityPath}/${key}`,\n        filterPath ? `${filterPath}.${key}` : key,\n      );\n      if (out !== undefined) {\n        outObj[key] = out;\n        hasOutput = true;\n      }\n    }\n\n    if (hasOutput || isVisible) {\n      return outObj;\n    }\n    return undefined;\n  }\n\n  return {\n    filteredKeys: withFilteredKeys ? filteredKeys : undefined,\n    deprecatedKeys: withDeprecatedKeys ? deprecatedKeys : undefined,\n    data: (transform(data, '', '') as JsonObject) ?? {},\n  };\n}\n\nexport function filterErrorsByVisibility(\n  errors: ValidationError[] | undefined,\n  includeVisibilities: ConfigVisibility[] | undefined,\n  visibilityByDataPath: Map<string, ConfigVisibility>,\n  visibilityBySchemaPath: Map<string, ConfigVisibility>,\n): ValidationError[] {\n  if (!errors) {\n    return [];\n  }\n  if (!includeVisibilities) {\n    return errors;\n  }\n\n  const visibleSchemaPaths = Array.from(visibilityBySchemaPath)\n    .filter(([, v]) => includeVisibilities.includes(v))\n    .map(([k]) => k);\n\n  // If we're filtering by visibility we only care about the errors that happened\n  // in a visible path.\n  return errors.filter(error => {\n    // We always include structural errors as we don't know whether there are\n    // any visible paths within the structures.\n    if (\n      error.keyword === 'type' &&\n      ['object', 'array'].includes(error.params.type)\n    ) {\n      return true;\n    }\n\n    // For fields that were required we use the schema path to determine whether\n    // it was visible in addition to the data path. This is because the data path\n    // visibilities are only populated for values that we reached, which we won't\n    // if the value is missing.\n    // We don't use this method for all the errors as the data path is more robust\n    // and doesn't require us to properly trim the schema path.\n    if (error.keyword === 'required') {\n      const trimmedPath = error.schemaPath.slice(1, -'/required'.length);\n      const fullPath = `${trimmedPath}/properties/${error.params.missingProperty}`;\n      if (\n        visibleSchemaPaths.some(visiblePath => visiblePath.startsWith(fullPath))\n      ) {\n        return true;\n      }\n    }\n\n    const vis =\n      visibilityByDataPath.get(error.instancePath) ?? DEFAULT_CONFIG_VISIBILITY;\n    return vis && includeVisibilities.includes(vis);\n  });\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '@backstage/config';\nimport { JsonObject } from '@backstage/types';\nimport { compileConfigSchemas } from './compile';\nimport { collectConfigSchemas } from './collect';\nimport { filterByVisibility, filterErrorsByVisibility } from './filtering';\nimport {\n  ValidationError,\n  ConfigSchema,\n  ConfigSchemaPackageEntry,\n  CONFIG_VISIBILITIES,\n} from './types';\n\n/**\n * Options that control the loading of configuration schema files in the backend.\n *\n * @public\n */\nexport type LoadConfigSchemaOptions =\n  | {\n      dependencies: string[];\n      packagePaths?: string[];\n    }\n  | {\n      serialized: JsonObject;\n    };\n\nfunction errorsToError(errors: ValidationError[]): Error {\n  const messages = errors.map(({ instancePath, message, params }) => {\n    const paramStr = Object.entries(params)\n      .map(([name, value]) => `${name}=${value}`)\n      .join(' ');\n    return `Config ${message || ''} { ${paramStr} } at ${instancePath}`;\n  });\n  const error = new Error(`Config validation failed, ${messages.join('; ')}`);\n  (error as any).messages = messages;\n  return error;\n}\n\n/**\n * Loads config schema for a Backstage instance.\n *\n * @public\n */\nexport async function loadConfigSchema(\n  options: LoadConfigSchemaOptions,\n): Promise<ConfigSchema> {\n  let schemas: ConfigSchemaPackageEntry[];\n\n  if ('dependencies' in options) {\n    schemas = await collectConfigSchemas(\n      options.dependencies,\n      options.packagePaths ?? [],\n    );\n  } else {\n    const { serialized } = options;\n    if (serialized?.backstageConfigSchemaVersion !== 1) {\n      throw new Error(\n        'Serialized configuration schema is invalid or has an invalid version number',\n      );\n    }\n    schemas = serialized.schemas as ConfigSchemaPackageEntry[];\n  }\n\n  const validate = compileConfigSchemas(schemas);\n\n  return {\n    process(\n      configs: AppConfig[],\n      {\n        visibility,\n        valueTransform,\n        withFilteredKeys,\n        withDeprecatedKeys,\n        ignoreSchemaErrors,\n      } = {},\n    ): AppConfig[] {\n      const result = validate(configs);\n\n      if (!ignoreSchemaErrors) {\n        const visibleErrors = filterErrorsByVisibility(\n          result.errors,\n          visibility,\n          result.visibilityByDataPath,\n          result.visibilityBySchemaPath,\n        );\n        if (visibleErrors.length > 0) {\n          throw errorsToError(visibleErrors);\n        }\n      }\n\n      let processedConfigs = configs;\n\n      if (visibility) {\n        processedConfigs = processedConfigs.map(({ data, context }) => ({\n          context,\n          ...filterByVisibility(\n            data,\n            visibility,\n            result.visibilityByDataPath,\n            result.deprecationByDataPath,\n            valueTransform,\n            withFilteredKeys,\n            withDeprecatedKeys,\n          ),\n        }));\n      } else if (valueTransform) {\n        processedConfigs = processedConfigs.map(({ data, context }) => ({\n          context,\n          ...filterByVisibility(\n            data,\n            Array.from(CONFIG_VISIBILITIES),\n            result.visibilityByDataPath,\n            result.deprecationByDataPath,\n            valueTransform,\n            withFilteredKeys,\n            withDeprecatedKeys,\n          ),\n        }));\n      }\n\n      return processedConfigs;\n    },\n    serialize(): JsonObject {\n      return {\n        schemas,\n        backstageConfigSchemaVersion: 1,\n      };\n    },\n  };\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function isValidUrl(url: string): boolean {\n  try {\n    // eslint-disable-next-line no-new\n    new URL(url);\n    return true;\n  } catch {\n    return false;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs-extra';\nimport yaml from 'yaml';\nimport chokidar from 'chokidar';\nimport { basename, dirname, isAbsolute, resolve as resolvePath } from 'path';\nimport { AppConfig } from '@backstage/config';\nimport { ForwardedError } from '@backstage/errors';\nimport {\n  applyConfigTransforms,\n  createIncludeTransform,\n  createSubstitutionTransform,\n  isValidUrl,\n  readEnvConfig,\n} from './lib';\nimport fetch from 'node-fetch';\n\n/** @public */\nexport type ConfigTarget = { path: string } | { url: string };\n\n/** @public */\nexport type LoadConfigOptionsWatch = {\n  /**\n   * A listener that is called when a config file is changed.\n   */\n  onChange: (configs: AppConfig[]) => void;\n\n  /**\n   * An optional signal that stops the watcher once the promise resolves.\n   */\n  stopSignal?: Promise<void>;\n};\n\n/** @public */\nexport type LoadConfigOptionsRemote = {\n  /**\n   * A remote config reloading period, in seconds\n   */\n  reloadIntervalSeconds: number;\n};\n\n/**\n * Options that control the loading of configuration files in the backend.\n *\n * @public\n */\nexport type LoadConfigOptions = {\n  // The root directory of the config loading context. Used to find default configs.\n  configRoot: string;\n\n  // Paths to load config files from. Configs from earlier paths have lower priority.\n  configTargets: ConfigTarget[];\n\n  /**\n   * Custom environment variable loading function\n   *\n   * @experimental This API is not stable and may change at any point\n   */\n  experimentalEnvFunc?: (name: string) => Promise<string | undefined>;\n\n  /**\n   * An optional remote config\n   */\n  remote?: LoadConfigOptionsRemote;\n\n  /**\n   * An optional configuration that enables watching of config files.\n   */\n  watch?: LoadConfigOptionsWatch;\n};\n\n/**\n * Results of loading configuration files.\n * @public\n */\nexport type LoadConfigResult = {\n  /**\n   * Array of all loaded configs.\n   */\n  appConfigs: AppConfig[];\n};\n\n/**\n * Load configuration data.\n *\n * @public\n */\nexport async function loadConfig(\n  options: LoadConfigOptions,\n): Promise<LoadConfigResult> {\n  const { configRoot, experimentalEnvFunc: envFunc, watch, remote } = options;\n\n  const configPaths: string[] = options.configTargets\n    .slice()\n    .filter((e): e is { path: string } => e.hasOwnProperty('path'))\n    .map(configTarget => configTarget.path);\n\n  const configUrls: string[] = options.configTargets\n    .slice()\n    .filter((e): e is { url: string } => e.hasOwnProperty('url'))\n    .map(configTarget => configTarget.url);\n\n  if (remote === undefined) {\n    if (configUrls.length > 0) {\n      throw new Error(\n        `Please make sure you are passing the remote option when loading remote configurations. See https://backstage.io/docs/conf/writing#configuration-files for detailed info.`,\n      );\n    }\n  } else if (remote.reloadIntervalSeconds <= 0) {\n    throw new Error(\n      `Remote config must be contain a non zero reloadIntervalSeconds: <seconds> value`,\n    );\n  }\n\n  // If no paths are provided, we default to reading\n  // `app-config.yaml` and, if it exists, `app-config.local.yaml`\n  if (configPaths.length === 0 && configUrls.length === 0) {\n    configPaths.push(resolvePath(configRoot, 'app-config.yaml'));\n\n    const localConfig = resolvePath(configRoot, 'app-config.local.yaml');\n    if (await fs.pathExists(localConfig)) {\n      configPaths.push(localConfig);\n    }\n  }\n\n  const env = envFunc ?? (async (name: string) => process.env[name]);\n\n  const loadConfigFiles = async () => {\n    const fileConfigs = [];\n    const loadedPaths = new Set<string>();\n\n    for (const configPath of configPaths) {\n      if (!isAbsolute(configPath)) {\n        throw new Error(`Config load path is not absolute: '${configPath}'`);\n      }\n\n      const dir = dirname(configPath);\n      const readFile = (path: string) => {\n        const fullPath = resolvePath(dir, path);\n        // if we read a file when building configuration,\n        // we should include that file when watching for\n        // changes, too.\n        loadedPaths.add(fullPath);\n\n        return fs.readFile(fullPath, 'utf8');\n      };\n\n      const input = yaml.parse(await readFile(configPath));\n\n      // A completely empty file ends up as a null return value\n      if (input !== null) {\n        const substitutionTransform = createSubstitutionTransform(env);\n        const data = await applyConfigTransforms(dir, input, [\n          createIncludeTransform(env, readFile, substitutionTransform),\n          substitutionTransform,\n        ]);\n\n        fileConfigs.push({ data, context: basename(configPath) });\n      }\n    }\n\n    return { fileConfigs, loadedPaths };\n  };\n\n  const loadRemoteConfigFiles = async () => {\n    const configs: AppConfig[] = [];\n\n    const readConfigFromUrl = async (url: string) => {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`Could not read config file at ${url}`);\n      }\n\n      return await response.text();\n    };\n\n    for (let i = 0; i < configUrls.length; i++) {\n      const configUrl = configUrls[i];\n      if (!isValidUrl(configUrl)) {\n        throw new Error(`Config load path is not valid: '${configUrl}'`);\n      }\n\n      const remoteConfigContent = await readConfigFromUrl(configUrl);\n      if (!remoteConfigContent) {\n        throw new Error(`Config is not valid`);\n      }\n      const configYaml = yaml.parse(remoteConfigContent);\n      const substitutionTransform = createSubstitutionTransform(env);\n      const data = await applyConfigTransforms(configRoot, configYaml, [\n        substitutionTransform,\n      ]);\n\n      configs.push({ data, context: configUrl });\n    }\n\n    return configs;\n  };\n\n  let fileConfigs: AppConfig[];\n  let loadedPaths: Set<string>;\n  try {\n    ({ fileConfigs, loadedPaths } = await loadConfigFiles());\n  } catch (error) {\n    throw new ForwardedError('Failed to read static configuration file', error);\n  }\n\n  let remoteConfigs: AppConfig[] = [];\n  if (remote) {\n    try {\n      remoteConfigs = await loadRemoteConfigFiles();\n    } catch (error) {\n      throw new ForwardedError(\n        `Failed to read remote configuration file`,\n        error,\n      );\n    }\n  }\n\n  const envConfigs = readEnvConfig(process.env);\n\n  const watchConfigFile = (watchProp: LoadConfigOptionsWatch) => {\n    let watchedFiles = Array.from(loadedPaths);\n\n    const watcher = chokidar.watch(watchedFiles, {\n      usePolling: process.env.NODE_ENV === 'test',\n    });\n\n    let currentSerializedConfig = JSON.stringify(fileConfigs);\n    watcher.on('change', async () => {\n      try {\n        const { fileConfigs: newConfigs, loadedPaths: newLoadedPaths } =\n          await loadConfigFiles();\n\n        // Replace watches to handle any added or removed\n        // $include or $file expressions.\n        watcher.unwatch(watchedFiles);\n        watchedFiles = Array.from(newLoadedPaths);\n        watcher.add(watchedFiles);\n\n        const newSerializedConfig = JSON.stringify(newConfigs);\n\n        if (currentSerializedConfig === newSerializedConfig) {\n          return;\n        }\n        currentSerializedConfig = newSerializedConfig;\n\n        watchProp.onChange([...remoteConfigs, ...newConfigs, ...envConfigs]);\n      } catch (error) {\n        console.error(`Failed to reload configuration files, ${error}`);\n      }\n    });\n\n    if (watchProp.stopSignal) {\n      watchProp.stopSignal.then(() => {\n        watcher.close();\n      });\n    }\n  };\n\n  const watchRemoteConfig = (\n    watchProp: LoadConfigOptionsWatch,\n    remoteProp: LoadConfigOptionsRemote,\n  ) => {\n    const hasConfigChanged = async (\n      oldRemoteConfigs: AppConfig[],\n      newRemoteConfigs: AppConfig[],\n    ) => {\n      return (\n        JSON.stringify(oldRemoteConfigs) !== JSON.stringify(newRemoteConfigs)\n      );\n    };\n\n    let handle: NodeJS.Timeout | undefined;\n    try {\n      handle = setInterval(async () => {\n        const newRemoteConfigs = await loadRemoteConfigFiles();\n        if (await hasConfigChanged(remoteConfigs, newRemoteConfigs)) {\n          remoteConfigs = newRemoteConfigs;\n          watchProp.onChange([...remoteConfigs, ...fileConfigs, ...envConfigs]);\n        }\n      }, remoteProp.reloadIntervalSeconds * 1000);\n    } catch (error) {\n      console.error(`Failed to reload configuration files, ${error}`);\n    }\n\n    if (watchProp.stopSignal) {\n      watchProp.stopSignal.then(() => {\n        if (handle !== undefined) {\n          clearInterval(handle);\n          handle = undefined;\n        }\n      });\n    }\n  };\n\n  // Set up config file watching if requested by the caller\n  if (watch) {\n    watchConfigFile(watch);\n  }\n\n  if (watch && remote) {\n    watchRemoteConfig(watch, remote);\n  }\n\n  return {\n    appConfigs: remote\n      ? [...remoteConfigs, ...fileConfigs, ...envConfigs]\n      : [...fileConfigs, ...envConfigs],\n  };\n}\n"],"names":["assertError","out","yaml","resolvePath","extname","path","dirname","Ajv","traverse","config","ConfigReader","mergeAllOf","fs","relativePath","sep","_a","fileConfigs","loadedPaths","isAbsolute","basename","fetch","ForwardedError","chokidar"],"mappings":"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"}