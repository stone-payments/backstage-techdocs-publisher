{"version":3,"file":"serve-176119a3.cjs.js","sources":["../../src/lib/httpServer.ts","../../src/commands/serve/serve.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport serveHandler from 'serve-handler';\nimport http from 'http';\nimport httpProxy from 'http-proxy';\nimport { createLogger } from './utility';\n\nexport default class HTTPServer {\n  private readonly proxyEndpoint: string;\n  private readonly backstageBundleDir: string;\n  private readonly backstagePort: number;\n  private readonly mkdocsPort: number;\n  private readonly verbose: boolean;\n\n  constructor(\n    backstageBundleDir: string,\n    backstagePort: number,\n    mkdocsPort: number,\n    verbose: boolean,\n  ) {\n    this.proxyEndpoint = '/api/techdocs/';\n    this.backstageBundleDir = backstageBundleDir;\n    this.backstagePort = backstagePort;\n    this.mkdocsPort = mkdocsPort;\n    this.verbose = verbose;\n  }\n\n  // Create a Proxy for mkdocs server\n  private createProxy() {\n    const proxy = httpProxy.createProxyServer({\n      target: `http://localhost:${this.mkdocsPort}`,\n    });\n\n    return (request: http.IncomingMessage): [httpProxy, string] => {\n      // If the request path is prefixed with this.proxyEndpoint, remove it.\n      const proxyEndpointPath = new RegExp(`^${this.proxyEndpoint}`, 'i');\n      const forwardPath = request.url?.replace(proxyEndpointPath, '') || '';\n\n      return [proxy, forwardPath];\n    };\n  }\n\n  public async serve(): Promise<http.Server> {\n    return new Promise<http.Server>((resolve, reject) => {\n      const proxyHandler = this.createProxy();\n      const server = http.createServer(\n        (request: http.IncomingMessage, response: http.ServerResponse) => {\n          if (request.url?.startsWith(this.proxyEndpoint)) {\n            const [proxy, forwardPath] = proxyHandler(request);\n\n            proxy.on('error', (error: Error) => {\n              reject(error);\n            });\n\n            response.setHeader('Access-Control-Allow-Origin', '*');\n            response.setHeader('Access-Control-Allow-Methods', 'GET, OPTIONS');\n\n            request.url = forwardPath;\n            proxy.web(request, response);\n            return;\n          }\n\n          // This endpoint is used by the frontend to detect where the backend is running.\n          if (request.url === '/.detect') {\n            response.setHeader('Content-Type', 'text/plain');\n            response.end('techdocs-cli-server');\n            return;\n          }\n\n          serveHandler(request, response, {\n            public: this.backstageBundleDir,\n            trailingSlash: true,\n            rewrites: [{ source: '**', destination: 'index.html' }],\n          });\n        },\n      );\n\n      const logger = createLogger({ verbose: false });\n      server.listen(this.backstagePort, () => {\n        if (this.verbose) {\n          logger.info(\n            `[techdocs-preview-bundle] Running local version of Backstage at http://localhost:${this.backstagePort}`,\n          );\n        }\n        resolve(server);\n      });\n\n      server.on('error', (error: Error) => {\n        reject(error);\n      });\n    });\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OptionValues } from 'commander';\nimport path from 'path';\nimport openBrowser from 'react-dev-utils/openBrowser';\nimport { findPaths } from '@backstage/cli-common';\nimport HTTPServer from '../../lib/httpServer';\nimport { runMkdocsServer } from '../../lib/mkdocsServer';\nimport { LogFunc, waitForSignal } from '../../lib/run';\nimport { createLogger } from '../../lib/utility';\n\nfunction findPreviewBundlePath(): string {\n  try {\n    return path.join(\n      path.dirname(require.resolve('techdocs-cli-embedded-app/package.json')),\n      'dist',\n    );\n  } catch {\n    // If the techdocs-cli-embedded-app package is not available it means we're\n    // running a published package. For published packages the preview bundle is\n    // copied to dist/embedded-app be the prepack script.\n    //\n    // This can be tested by running `yarn pack` and extracting the resulting tarball into a directory.\n    // Within the extracted directory, run `npm install --only=prod`.\n    // Once that's done you can test the CLI in any directory using `node <tmp-dir>/package <command>`.\n    // eslint-disable-next-line no-restricted-syntax\n    return findPaths(__dirname).resolveOwn('dist/embedded-app');\n  }\n}\n\nexport default async function serve(opts: OptionValues) {\n  const logger = createLogger({ verbose: opts.verbose });\n\n  // Determine if we want to run in local dev mode or not\n  // This will run the backstage http server on a different port and only used\n  // for proxying mkdocs to the backstage app running locally (e.g. with webpack-dev-server)\n  const isDevMode = Object.keys(process.env).includes('TECHDOCS_CLI_DEV_MODE')\n    ? true\n    : false;\n\n  // TODO: Backstage app port should also be configurable as a CLI option. However, since we bundle\n  // a backstage app, we define app.baseUrl in the app-config.yaml.\n  // Hence, it is complicated to make this configurable.\n  const backstagePort = 3000;\n  const backstageBackendPort = 7007;\n\n  const mkdocsDockerAddr = `http://0.0.0.0:${opts.mkdocsPort}`;\n  const mkdocsLocalAddr = `http://127.0.0.1:${opts.mkdocsPort}`;\n  const mkdocsExpectedDevAddr = opts.docker\n    ? mkdocsDockerAddr\n    : mkdocsLocalAddr;\n\n  let mkdocsServerHasStarted = false;\n  const mkdocsLogFunc: LogFunc = data => {\n    // Sometimes the lines contain an unnecessary extra new line\n    const logLines = data.toString().split('\\n');\n    const logPrefix = opts.docker ? '[docker/mkdocs]' : '[mkdocs]';\n    logLines.forEach(line => {\n      if (line === '') {\n        return;\n      }\n\n      logger.verbose(`${logPrefix} ${line}`);\n\n      // When the server has started, open a new browser tab for the user.\n      if (\n        !mkdocsServerHasStarted &&\n        line.includes(`Serving on ${mkdocsExpectedDevAddr}`)\n      ) {\n        mkdocsServerHasStarted = true;\n      }\n    });\n  };\n  // mkdocs writes all of its logs to stderr by default, and not stdout.\n  // https://github.com/mkdocs/mkdocs/issues/879#issuecomment-203536006\n  // Had me questioning this whole implementation for half an hour.\n  logger.info('Starting mkdocs server.');\n  const mkdocsChildProcess = await runMkdocsServer({\n    port: opts.mkdocsPort,\n    dockerImage: opts.dockerImage,\n    dockerEntrypoint: opts.dockerEntrypoint,\n    dockerOptions: opts.dockerOption,\n    useDocker: opts.docker,\n    stdoutLogFunc: mkdocsLogFunc,\n    stderrLogFunc: mkdocsLogFunc,\n  });\n\n  // Wait until mkdocs server has started so that Backstage starts with docs loaded\n  // Takes 1-5 seconds\n  for (let attempt = 0; attempt < 30; attempt++) {\n    await new Promise(r => setTimeout(r, 3000));\n    if (mkdocsServerHasStarted) {\n      break;\n    }\n    logger.info('Waiting for mkdocs server to start...');\n  }\n\n  if (!mkdocsServerHasStarted) {\n    logger.error(\n      'mkdocs server did not start. Exiting. Try re-running command with -v option for more details.',\n    );\n  }\n\n  const port = isDevMode ? backstageBackendPort : backstagePort;\n  const httpServer = new HTTPServer(\n    findPreviewBundlePath(),\n    port,\n    opts.mkdocsPort,\n    opts.verbose,\n  );\n\n  httpServer\n    .serve()\n    .catch(err => {\n      logger.error(err);\n      mkdocsChildProcess.kill();\n      process.exit(1);\n    })\n    .then(() => {\n      // The last three things default/component/local/ don't matter. They can be anything.\n      openBrowser(`http://localhost:${port}/docs/default/component/local/`);\n      logger.info(\n        `Serving docs in Backstage at http://localhost:${port}/docs/default/component/local/\\nOpening browser.`,\n      );\n    });\n\n  await waitForSignal([mkdocsChildProcess]);\n}\n"],"names":["httpProxy","http","serveHandler","createLogger","path","findPaths","runMkdocsServer","openBrowser","waitForSignal"],"mappings":"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"}