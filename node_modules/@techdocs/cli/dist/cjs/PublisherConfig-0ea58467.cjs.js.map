{"version":3,"file":"PublisherConfig-0ea58467.cjs.js","sources":["../../src/lib/PublisherConfig.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ConfigReader } from '@backstage/config';\nimport { OptionValues } from 'commander';\n\ntype Publisher = keyof typeof PublisherConfig['configFactories'];\ntype PublisherConfiguration = {\n  [p in Publisher]?: any;\n} & {\n  type: Publisher;\n};\n\n/**\n * Helper when working with publisher-related configurations.\n */\nexport class PublisherConfig {\n  /**\n   * Maps publisher-specific config keys to config getters.\n   */\n  private static configFactories = {\n    awsS3: PublisherConfig.getValidAwsS3Config,\n    azureBlobStorage: PublisherConfig.getValidAzureConfig,\n    googleGcs: PublisherConfig.getValidGoogleGcsConfig,\n    openStackSwift: PublisherConfig.getValidOpenStackSwiftConfig,\n  };\n\n  /**\n   * Returns Backstage config suitable for use when instantiating a Publisher. If\n   * there are any missing or invalid options provided, an error is thrown.\n   *\n   * Note: This assumes that proper credentials are set in Environment\n   * variables for the respective GCS/AWS clients to work.\n   */\n  static getValidConfig(opts: OptionValues): ConfigReader {\n    const publisherType = opts.publisherType;\n\n    if (!PublisherConfig.isKnownPublisher(publisherType)) {\n      throw new Error(`Unknown publisher type ${opts.publisherType}`);\n    }\n\n    return new ConfigReader({\n      // This backend config is not used at all. Just something needed a create a mock discovery instance.\n      backend: {\n        baseUrl: 'http://localhost:7007',\n        listen: {\n          port: 7007,\n        },\n      },\n      techdocs: {\n        publisher: PublisherConfig.configFactories[publisherType](opts),\n        legacyUseCaseSensitiveTripletPaths:\n          opts.legacyUseCaseSensitiveTripletPaths,\n      },\n    });\n  }\n\n  /**\n   * Typeguard to ensure the publisher has a known config getter.\n   */\n  private static isKnownPublisher(\n    type: string,\n  ): type is keyof typeof PublisherConfig['configFactories'] {\n    return PublisherConfig.configFactories.hasOwnProperty(type);\n  }\n\n  /**\n   * Retrieve valid AWS S3 configuration based on the command.\n   */\n  private static getValidAwsS3Config(\n    opts: OptionValues,\n  ): PublisherConfiguration {\n    return {\n      type: 'awsS3',\n      awsS3: {\n        bucketName: opts.storageName,\n        ...(opts.awsBucketRootPath && {\n          bucketRootPath: opts.awsBucketRootPath,\n        }),\n        ...(opts.awsRoleArn && { credentials: { roleArn: opts.awsRoleArn } }),\n        ...(opts.awsEndpoint && { endpoint: opts.awsEndpoint }),\n        ...(opts.awsS3ForcePathStyle && { s3ForcePathStyle: true }),\n        ...(opts.awsS3sse && { sse: opts.awsS3sse }),\n      },\n    };\n  }\n\n  /**\n   * Retrieve valid Azure Blob Storage configuration based on the command.\n   */\n  private static getValidAzureConfig(\n    opts: OptionValues,\n  ): PublisherConfiguration {\n    if (!opts.azureAccountName) {\n      throw new Error(\n        `azureBlobStorage requires --azureAccountName to be specified`,\n      );\n    }\n\n    return {\n      type: 'azureBlobStorage',\n      azureBlobStorage: {\n        containerName: opts.storageName,\n        credentials: {\n          accountName: opts.azureAccountName,\n          accountKey: opts.azureAccountKey,\n        },\n      },\n    };\n  }\n\n  /**\n   * Retrieve valid GCS configuration based on the command.\n   */\n  private static getValidGoogleGcsConfig(\n    opts: OptionValues,\n  ): PublisherConfiguration {\n    return {\n      type: 'googleGcs',\n      googleGcs: {\n        bucketName: opts.storageName,\n        ...(opts.gcsBucketRootPath && {\n          bucketRootPath: opts.gcsBucketRootPath,\n        }),\n      },\n    };\n  }\n\n  /**\n   * Retrieves valid OpenStack Swift configuration based on the command.\n   */\n  private static getValidOpenStackSwiftConfig(\n    opts: OptionValues,\n  ): PublisherConfiguration {\n    const missingParams = [\n      'osCredentialId',\n      'osSecret',\n      'osAuthUrl',\n      'osSwiftUrl',\n    ].filter((param: string) => !opts[param]);\n\n    if (missingParams.length) {\n      throw new Error(\n        `openStackSwift requires the following params to be specified: ${missingParams.join(\n          ', ',\n        )}`,\n      );\n    }\n\n    return {\n      type: 'openStackSwift',\n      openStackSwift: {\n        containerName: opts.storageName,\n        credentials: {\n          id: opts.osCredentialId,\n          secret: opts.osSecret,\n        },\n        authUrl: opts.osAuthUrl,\n        swiftUrl: opts.osSwiftUrl,\n      },\n    };\n  }\n}\n"],"names":["ConfigReader"],"mappings":"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"}