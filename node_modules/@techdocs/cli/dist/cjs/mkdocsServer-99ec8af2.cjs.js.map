{"version":3,"file":"mkdocsServer-99ec8af2.cjs.js","sources":["../../src/lib/run.ts","../../src/lib/mkdocsServer.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { spawn, SpawnOptions, ChildProcess } from 'child_process';\n\nexport type LogFunc = (data: Buffer | string) => void;\ntype SpawnOptionsPartialEnv = Omit<SpawnOptions, 'env'> & {\n  env?: Partial<NodeJS.ProcessEnv>;\n  // Pipe stdout to this log function\n  stdoutLogFunc?: LogFunc;\n  // Pipe stderr to this log function\n  stderrLogFunc?: LogFunc;\n};\n\n// TODO: Accept log functions to pipe logs with.\n// Runs a child command, returning the child process instance.\n// Use it along with waitForSignal to run a long running process e.g. mkdocs serve\nexport const run = async (\n  name: string,\n  args: string[] = [],\n  options: SpawnOptionsPartialEnv = {},\n): Promise<ChildProcess> => {\n  const { stdoutLogFunc, stderrLogFunc } = options;\n\n  const env: NodeJS.ProcessEnv = {\n    ...process.env,\n    FORCE_COLOR: 'true',\n    ...(options.env ?? {}),\n  };\n\n  // Refer: https://nodejs.org/api/child_process.html#child_process_subprocess_stdio\n  const stdio = [\n    'inherit',\n    stdoutLogFunc ? 'pipe' : 'inherit',\n    stderrLogFunc ? 'pipe' : 'inherit',\n  ] as ('inherit' | 'pipe')[];\n\n  const childProcess = spawn(name, args, {\n    stdio: stdio,\n    ...options,\n    env,\n  });\n\n  if (stdoutLogFunc && childProcess.stdout) {\n    childProcess.stdout.on('data', stdoutLogFunc);\n  }\n  if (stderrLogFunc && childProcess.stderr) {\n    childProcess.stderr.on('data', stderrLogFunc);\n  }\n\n  return childProcess;\n};\n\n// Block indefinitely and wait for a signal to kill the child process(es)\n// Throw error if any child process errors\n// Resolves only when all processes exit with status code 0\nexport async function waitForSignal(\n  childProcesses: Array<ChildProcess>,\n): Promise<void> {\n  const promises: Array<Promise<void>> = [];\n\n  for (const signal of ['SIGINT', 'SIGTERM'] as const) {\n    process.on(signal, () => {\n      childProcesses.forEach(childProcess => {\n        childProcess.kill();\n      });\n    });\n  }\n\n  childProcesses.forEach(childProcess => {\n    if (typeof childProcess.exitCode === 'number') {\n      if (childProcess.exitCode) {\n        throw new Error(`Non zero exit code from child process`);\n      }\n      return;\n    }\n\n    promises.push(\n      new Promise<void>((resolve, reject) => {\n        childProcess.once('error', reject);\n        childProcess.once('exit', resolve);\n      }),\n    );\n  });\n\n  await Promise.all(promises);\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildProcess } from 'child_process';\nimport { run, LogFunc } from './run';\n\nexport const runMkdocsServer = async (options: {\n  port?: string;\n  useDocker?: boolean;\n  dockerImage?: string;\n  dockerEntrypoint?: string;\n  dockerOptions?: string[];\n  stdoutLogFunc?: LogFunc;\n  stderrLogFunc?: LogFunc;\n}): Promise<ChildProcess> => {\n  const port = options.port ?? '8000';\n  const useDocker = options.useDocker ?? true;\n  const dockerImage = options.dockerImage ?? 'spotify/techdocs';\n\n  if (useDocker) {\n    return await run(\n      'docker',\n      [\n        'run',\n        '--rm',\n        '-w',\n        '/content',\n        '-v',\n        `${process.cwd()}:/content`,\n        '-p',\n        `${port}:${port}`,\n        '-it',\n        ...(options.dockerEntrypoint\n          ? ['--entrypoint', options.dockerEntrypoint]\n          : []),\n        ...(options.dockerOptions || []),\n        dockerImage,\n        'serve',\n        '--dev-addr',\n        `0.0.0.0:${port}`,\n      ],\n      {\n        stdoutLogFunc: options.stdoutLogFunc,\n        stderrLogFunc: options.stderrLogFunc,\n      },\n    );\n  }\n\n  return await run('mkdocs', ['serve', '--dev-addr', `127.0.0.1:${port}`], {\n    stdoutLogFunc: options.stdoutLogFunc,\n    stderrLogFunc: options.stderrLogFunc,\n  });\n};\n"],"names":["spawn"],"mappings":"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"}