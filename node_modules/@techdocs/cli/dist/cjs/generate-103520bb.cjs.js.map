{"version":3,"file":"generate-103520bb.cjs.js","sources":["../../src/commands/generate/generate.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { resolve } from 'path';\nimport { OptionValues } from 'commander';\nimport fs from 'fs-extra';\nimport Docker from 'dockerode';\nimport {\n  TechdocsGenerator,\n  ParsedLocationAnnotation,\n} from '@backstage/plugin-techdocs-node';\nimport {\n  ContainerRunner,\n  DockerContainerRunner,\n} from '@backstage/backend-common';\nimport { ConfigReader } from '@backstage/config';\nimport {\n  convertTechDocsRefToLocationAnnotation,\n  createLogger,\n} from '../../lib/utility';\nimport { stdout } from 'process';\n\nexport default async function generate(opts: OptionValues) {\n  // Use techdocs-node package to generate docs. Keep consistency between Backstage and CI generating docs.\n  // Docs can be prepared using actions/checkout or git clone, or similar paradigms on CI. The TechDocs CI workflow\n  // will run on the CI pipeline containing the documentation files.\n\n  const logger = createLogger({ verbose: opts.verbose });\n\n  const sourceDir = resolve(opts.sourceDir);\n  const outputDir = resolve(opts.outputDir);\n  const omitTechdocsCorePlugin = opts.omitTechdocsCoreMkdocsPlugin;\n  const dockerImage = opts.dockerImage;\n  const pullImage = opts.pull;\n  const legacyCopyReadmeMdToIndexMd = opts.legacyCopyReadmeMdToIndexMd;\n\n  logger.info(`Using source dir ${sourceDir}`);\n  logger.info(`Will output generated files in ${outputDir}`);\n\n  logger.verbose('Creating output directory if it does not exist.');\n\n  await fs.ensureDir(outputDir);\n\n  const config = new ConfigReader({\n    techdocs: {\n      generator: {\n        runIn: opts.docker ? 'docker' : 'local',\n        dockerImage,\n        pullImage,\n        mkdocs: {\n          legacyCopyReadmeMdToIndexMd,\n          omitTechdocsCorePlugin,\n        },\n      },\n    },\n  });\n\n  // Docker client (conditionally) used by the generators, based on techdocs.generators config.\n  let containerRunner: ContainerRunner | undefined;\n\n  if (opts.docker) {\n    const dockerClient = new Docker();\n    containerRunner = new DockerContainerRunner({ dockerClient });\n  }\n\n  let parsedLocationAnnotation = {} as ParsedLocationAnnotation;\n  if (opts.techdocsRef) {\n    try {\n      parsedLocationAnnotation = convertTechDocsRefToLocationAnnotation(\n        opts.techdocsRef,\n      );\n    } catch (err) {\n      logger.error(err.message);\n    }\n  }\n\n  // Generate docs using @backstage/plugin-techdocs-node\n  const techdocsGenerator = await TechdocsGenerator.fromConfig(config, {\n    logger,\n    containerRunner,\n  });\n\n  logger.info('Generating documentation...');\n\n  await techdocsGenerator.run({\n    inputDir: sourceDir,\n    outputDir,\n    ...(opts.techdocsRef\n      ? {\n          parsedLocationAnnotation,\n        }\n      : {}),\n    logger,\n    etag: opts.etag,\n    ...(process.env.LOG_LEVEL === 'debug' ? { logStream: stdout } : {}),\n  });\n\n  logger.info('Done!');\n}\n"],"names":["createLogger","resolve","fs","config","ConfigReader","Docker","DockerContainerRunner","convertTechDocsRefToLocationAnnotation","TechdocsGenerator","stdout"],"mappings":";;;;;;;;;;;;;;;;;AAmCA,eAA8B,SAAS,IAAoB,EAAA;AAKzD,EAAA,MAAM,SAASA,oBAAa,CAAA,EAAE,OAAS,EAAA,IAAA,CAAK,SAAS,CAAA,CAAA;AAErD,EAAM,MAAA,SAAA,GAAYC,YAAQ,CAAA,IAAA,CAAK,SAAS,CAAA,CAAA;AACxC,EAAM,MAAA,SAAA,GAAYA,YAAQ,CAAA,IAAA,CAAK,SAAS,CAAA,CAAA;AACxC,EAAA,MAAM,yBAAyB,IAAK,CAAA,4BAAA,CAAA;AACpC,EAAA,MAAM,cAAc,IAAK,CAAA,WAAA,CAAA;AACzB,EAAA,MAAM,YAAY,IAAK,CAAA,IAAA,CAAA;AACvB,EAAA,MAAM,8BAA8B,IAAK,CAAA,2BAAA,CAAA;AAEzC,EAAO,MAAA,CAAA,IAAA,CAAK,oBAAoB,SAAW,CAAA,CAAA,CAAA,CAAA;AAC3C,EAAO,MAAA,CAAA,IAAA,CAAK,kCAAkC,SAAW,CAAA,CAAA,CAAA,CAAA;AAEzD,EAAA,MAAA,CAAO,QAAQ,iDAAiD,CAAA,CAAA;AAEhE,EAAM,MAAAC,sBAAA,CAAG,UAAU,SAAS,CAAA,CAAA;AAE5B,EAAM,MAAAC,QAAA,GAAS,IAAIC,mBAAa,CAAA;AAAA,IAC9B,QAAU,EAAA;AAAA,MACR,SAAW,EAAA;AAAA,QACT,KAAA,EAAO,IAAK,CAAA,MAAA,GAAS,QAAW,GAAA,OAAA;AAAA,QAChC,WAAA;AAAA,QACA,SAAA;AAAA,QACA,MAAQ,EAAA;AAAA,UACN,2BAAA;AAAA,UACA,sBAAA;AAAA,SACF;AAAA,OACF;AAAA,KACF;AAAA,GACD,CAAA,CAAA;AAGD,EAAI,IAAA,eAAA,CAAA;AAEJ,EAAA,IAAI,KAAK,MAAQ,EAAA;AACf,IAAM,MAAA,YAAA,GAAe,IAAIC,0BAAO,EAAA,CAAA;AAChC,IAAA,eAAA,GAAkB,IAAIC,mCAAA,CAAsB,EAAE,YAAA,EAAc,CAAA,CAAA;AAAA,GAC9D;AAEA,EAAA,IAAI,2BAA2B,EAAC,CAAA;AAChC,EAAA,IAAI,KAAK,WAAa,EAAA;AACpB,IAAI,IAAA;AACF,MAA2B,wBAAA,GAAAC,8CAAA;AAAA,QACzB,IAAK,CAAA,WAAA;AAAA,OACP,CAAA;AAAA,aACO,GAAP,EAAA;AACA,MAAO,MAAA,CAAA,KAAA,CAAM,IAAI,OAAO,CAAA,CAAA;AAAA,KAC1B;AAAA,GACF;AAGA,EAAA,MAAM,iBAAoB,GAAA,MAAMC,oCAAkB,CAAA,UAAA,CAAWL,QAAQ,EAAA;AAAA,IACnE,MAAA;AAAA,IACA,eAAA;AAAA,GACD,CAAA,CAAA;AAED,EAAA,MAAA,CAAO,KAAK,6BAA6B,CAAA,CAAA;AAEzC,EAAA,MAAM,kBAAkB,GAAI,CAAA;AAAA,IAC1B,QAAU,EAAA,SAAA;AAAA,IACV,SAAA;AAAA,IACA,GAAI,KAAK,WACL,GAAA;AAAA,MACE,wBAAA;AAAA,QAEF,EAAC;AAAA,IACL,MAAA;AAAA,IACA,MAAM,IAAK,CAAA,IAAA;AAAA,IACX,GAAI,QAAQ,GAAI,CAAA,SAAA,KAAc,UAAU,EAAE,SAAA,EAAWM,gBAAO,EAAA,GAAI,EAAC;AAAA,GAClE,CAAA,CAAA;AAED,EAAA,MAAA,CAAO,KAAK,OAAO,CAAA,CAAA;AACrB;;;;"}