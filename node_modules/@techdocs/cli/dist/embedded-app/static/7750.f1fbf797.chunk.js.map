{"version":3,"sources":["webpack://techdocs-cli-embedded-app/../../plugins/catalog/src/components/EntityLinksCard/EntityLinksEmptyState.tsx","webpack://techdocs-cli-embedded-app/../../plugins/catalog/src/components/EntityLinksCard/EntityLinksCard.tsx"],"names":["ENTITY_YAML","useStyles","makeStyles","theme","code","borderRadius","margin","spacing","background","palette","type","name","EntityLinksEmptyState","classes","Typography","variant","div","className","CodeSnippet","text","language","showLineNumbers","highlightedNumbers","customStyle","fontSize","Button","color","target","href","EntityLinksCard","props","entity","cols","undefined","useEntity","app","useApp","iconResolver","key","getSystemIcon","LanguageIcon","links","metadata","InfoCard","title","length","LinksGridList","items","map","url","icon","Icon"],"mappings":"mSAqBA,MAAMA,EAAc;AAAA;AAAA;AAAA;AAAA;AAAA,uBAUdC,G,EAAYC,KAChBC,IAAU,CACRC,KAAM,CACJC,aAAc,EACdC,OAAQ,GAAGH,EAAMI,QAAQ,CAAC,UAC1BC,WAAYL,EAAMM,QAAQC,OAAS,OAAS,OAAS,MACvD,CACF,GACA,CAAEC,KAAM,oCAAqC,CAAC,EAGzC,SAASC,GAAwB,CACtC,MAAMC,EAAUZ,EAAU,EAE1B,O,EACE,oB,aACE,OAACa,IAAUA,CAACC,QAAQ,Q,SAAQ,oH,MAI5B,OAACC,OAAIC,UAAWJ,EAAQT,K,YACtB,OAACc,KAAWA,CACVC,KAAMnB,EACNoB,SAAS,OACTC,gBAAe,GACfC,mBAAoB,CAAC,EAAG,EAAG,EAAG,C,EAC9BC,YAAa,CAAEf,WAAY,UAAWgB,SAAU,MAAO,C,QAG3D,OAACC,IAAMA,CACLV,QAAQ,YACRW,MAAM,UACNC,OAAO,SACPC,KAAK,uF,SACN,W,KAKP,C,0BCvCO,MAAMC,EAAmBC,GAAgC,C,IAQhDC,EAPd,KAAM,CAAEC,OAAOC,OAAWlB,SAAQ,EAAIe,EAChC,CAAEC,QAAO,G,EAAIG,MAAU,EACvBC,G,EAAMC,MAAO,E,IAGXD,EADR,MAAME,EAAgBC,GACpBA,IAAMH,IAAII,cAAcD,CAAG,KAAHA,MAAlBH,aAAyCK,IAE3CC,EAAQV,cAAQW,YAAQ,MAAhBX,oBAAkBU,MAEhC,O,EACE,OAACE,KAAQA,CAACC,MAAM,QAAQ7B,QAASA,E,SAC9B,CAAC0B,GAASA,EAAMI,SAAW,G,EAC1B,OAACjC,EAAqBA,K,EAEtB,OAACkC,IAAaA,CACZd,KAAMA,EACNe,MAAON,EAAMO,IAAI,CAAC,CAAEC,MAAKL,QAAOM,MAAK,KAAO,CAC1C/B,KAAMyB,UAASK,EACfrB,KAAMqB,EACNE,KAAMd,EAAaa,CAAI,CACzB,EAAE,C,IAKZ,C","file":"static/7750.f1fbf797.chunk.js","sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BackstageTheme } from '@backstage/theme';\nimport { Button, makeStyles, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { CodeSnippet } from '@backstage/core-components';\n\nconst ENTITY_YAML = `metadata:\n  name: example\n  links:\n    - url: https://dashboard.example.com\n      title: My Dashboard\n      icon: dashboard`;\n\n/** @public */\nexport type EntityLinksEmptyStateClassKey = 'code';\n\nconst useStyles = makeStyles<BackstageTheme>(\n  theme => ({\n    code: {\n      borderRadius: 6,\n      margin: `${theme.spacing(2)}px 0px`,\n      background: theme.palette.type === 'dark' ? '#444' : '#fff',\n    },\n  }),\n  { name: 'PluginCatalogEntityLinksEmptyState' },\n);\n\nexport function EntityLinksEmptyState() {\n  const classes = useStyles();\n\n  return (\n    <>\n      <Typography variant=\"body1\">\n        No links defined for this entity. You can add links to your entity YAML\n        as shown in the highlighted example below:\n      </Typography>\n      <div className={classes.code}>\n        <CodeSnippet\n          text={ENTITY_YAML}\n          language=\"yaml\"\n          showLineNumbers\n          highlightedNumbers={[3, 4, 5, 6]}\n          customStyle={{ background: 'inherit', fontSize: '115%' }}\n        />\n      </div>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        target=\"_blank\"\n        href=\"https://backstage.io/docs/features/software-catalog/descriptor-format#links-optional\"\n      >\n        Read more\n      </Button>\n    </>\n  );\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useEntity } from '@backstage/plugin-catalog-react';\nimport LanguageIcon from '@material-ui/icons/Language';\nimport React from 'react';\nimport { EntityLinksEmptyState } from './EntityLinksEmptyState';\nimport { LinksGridList } from './LinksGridList';\nimport { ColumnBreakpoints } from './types';\nimport { IconComponent, useApp } from '@backstage/core-plugin-api';\nimport { InfoCard, InfoCardVariants } from '@backstage/core-components';\n\n/** @public */\nexport interface EntityLinksCardProps {\n  cols?: ColumnBreakpoints | number;\n  variant?: InfoCardVariants;\n}\n\nexport const EntityLinksCard = (props: EntityLinksCardProps) => {\n  const { cols = undefined, variant } = props;\n  const { entity } = useEntity();\n  const app = useApp();\n\n  const iconResolver = (key?: string): IconComponent =>\n    key ? app.getSystemIcon(key) ?? LanguageIcon : LanguageIcon;\n\n  const links = entity?.metadata?.links;\n\n  return (\n    <InfoCard title=\"Links\" variant={variant}>\n      {!links || links.length === 0 ? (\n        <EntityLinksEmptyState />\n      ) : (\n        <LinksGridList\n          cols={cols}\n          items={links.map(({ url, title, icon }) => ({\n            text: title ?? url,\n            href: url,\n            Icon: iconResolver(icon),\n          }))}\n        />\n      )}\n    </InfoCard>\n  );\n};\n"],"sourceRoot":""}