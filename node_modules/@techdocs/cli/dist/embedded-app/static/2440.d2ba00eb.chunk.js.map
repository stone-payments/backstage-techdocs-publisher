{"version":3,"sources":["webpack://techdocs-cli-embedded-app/../../plugins/catalog/src/components/HasSubcomponentsCard/HasSubcomponentsCard.tsx","webpack://techdocs-cli-embedded-app/../../plugins/catalog/src/components/RelatedEntitiesCard/RelatedEntitiesCard.tsx","webpack://techdocs-cli-embedded-app/../../plugins/catalog/src/components/RelatedEntitiesCard/presets.ts"],"names":["HasSubcomponentsCard","props","variant","RelatedEntitiesCard","title","entityKind","relationType","RELATION_HAS_PART","columns","componentEntityColumns","asRenderableEntities","asComponentEntities","emptyMessage","emptyHelpLink","entity","useEntity","entities","loading","error","useRelatedEntities","type","kind","InfoCard","Progress","ResponseErrorPanel","EntityTable","emptyContent","div","style","textAlign","Typography","Link","to","defaultKind","componentEntityHelpLink","resourceEntityColumns","resourceEntityHelpLink","asResourceEntities","systemEntityColumns","systemEntityHelpLink","asSystemEntities"],"mappings":"8PA8BO,SAASA,EAAqBC,EAAkC,CACrE,KAAM,CAAEC,UAAU,UAAW,EAAID,EACjC,O,EACE,OAACE,sBAAmBA,CAClBD,QAASA,EACTE,MAAM,oBACNC,WAAW,YACXC,aAAcC,KACdC,QAASC,yBACTC,qBAAsBC,sBACtBC,aAAa,4CACbC,cAAc,mG,EAGpB,C,mgBCaO,SAASV,EACdF,EACA,CACA,KAAM,CACJC,UAAU,WACVE,QACAI,UACAH,aACAC,eACAM,eACAC,gBACAH,sBAAoB,EAClBT,EAEE,CAAEa,QAAO,G,EAAIC,MAAU,EACvB,CAAEC,WAAUC,UAASC,OAAM,G,EAAIC,MAAmBL,EAAQ,CAC9DM,KAAMd,EACNe,KAAMhB,CACR,CAAC,EAED,OAAIY,G,EAEA,OAACK,KAAQA,CAACpB,QAASA,EAASE,MAAOA,E,YACjC,OAACmB,KAAQA,G,GAKXL,G,EAEA,OAACI,KAAQA,CAACpB,QAASA,EAASE,MAAOA,E,YACjC,OAACoB,KAAkBA,CAACN,MAAOA,C,QAM/B,OAACO,KAAWA,CACVrB,MAAOA,EACPF,QAASA,EACTwB,c,EACE,QAACC,OAAIC,MAAO,CAAEC,UAAW,QAAS,E,aAChC,OAACC,IAAUA,CAAC5B,QAAQ,Q,SAASU,C,MAC7B,OAACkB,IAAUA,CAAC5B,QAAQ,Q,YAClB,OAAC6B,KAAIA,CAACC,GAAInB,E,SAAe,2B,QAI/BL,QAASA,EACTQ,SAAUN,EAAqBM,GAAY,CAAC,CAAC,C,EAGnD,CCrFO,MAAMP,EAAyD,CACpEgB,mCAA0C,CAAEQ,YAAa,WAAY,CAAC,EACtER,+BAAsC,EACtCA,kCAAyC,EACzCA,uCAA8C,EAC9CA,6CAAoD,C,EAEzCS,EACX,uFACWvB,EAAuBK,GAClCA,EAEWmB,EAAuD,CAClEV,mCAA0C,CAAEQ,YAAa,UAAW,CAAC,EACrER,+BAAsC,EACtCA,kCAAyC,EACzCA,uCAA8C,EAC9CA,6CAAoD,C,EAEzCW,EACX,sFACWC,EAAsBrB,GACjCA,EAEWsB,EAAmD,CAC9Db,mCAA0C,CAAEQ,YAAa,QAAS,CAAC,EACnER,+BAAsC,EACtCA,6CAAoD,C,EAEzCc,EACX,oFACWC,EAAoBxB,GAC/BA,C","file":"static/2440.d2ba00eb.chunk.js","sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RELATION_HAS_PART } from '@backstage/catalog-model';\nimport { InfoCardVariants } from '@backstage/core-components';\nimport React from 'react';\nimport {\n  asComponentEntities,\n  componentEntityColumns,\n  RelatedEntitiesCard,\n} from '../RelatedEntitiesCard';\n\n/** @public */\nexport interface HasSubcomponentsCardProps {\n  variant?: InfoCardVariants;\n}\n\nexport function HasSubcomponentsCard(props: HasSubcomponentsCardProps) {\n  const { variant = 'gridItem' } = props;\n  return (\n    <RelatedEntitiesCard\n      variant={variant}\n      title=\"Has subcomponents\"\n      entityKind=\"Component\"\n      relationType={RELATION_HAS_PART}\n      columns={componentEntityColumns}\n      asRenderableEntities={asComponentEntities}\n      emptyMessage=\"No subcomponent is part of this component\"\n      emptyHelpLink=\"https://backstage.io/docs/features/software-catalog/descriptor-format#specsubcomponentof-optional\"\n    />\n  );\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity } from '@backstage/catalog-model';\nimport { Typography } from '@material-ui/core';\nimport {\n  EntityTable,\n  useEntity,\n  useRelatedEntities,\n} from '@backstage/plugin-catalog-react';\nimport React from 'react';\nimport {\n  InfoCard,\n  InfoCardVariants,\n  Link,\n  Progress,\n  ResponseErrorPanel,\n  TableColumn,\n} from '@backstage/core-components';\n\n/** @public */\nexport type RelatedEntitiesCardProps<T extends Entity> = {\n  variant?: InfoCardVariants;\n  title: string;\n  columns: TableColumn<T>[];\n  entityKind?: string;\n  relationType: string;\n  emptyMessage: string;\n  emptyHelpLink: string;\n  asRenderableEntities: (entities: Entity[]) => T[];\n};\n\n/**\n * A low level card component that can be used as a building block for more\n * specific cards.\n *\n * @remarks\n *\n * You probably want to make a dedicated component for your needs, which renders\n * this card as its implementation with some of the props set to the appropriate\n * values.\n *\n * @public\n */\nexport function RelatedEntitiesCard<T extends Entity>(\n  props: RelatedEntitiesCardProps<T>,\n) {\n  const {\n    variant = 'gridItem',\n    title,\n    columns,\n    entityKind,\n    relationType,\n    emptyMessage,\n    emptyHelpLink,\n    asRenderableEntities,\n  } = props;\n\n  const { entity } = useEntity();\n  const { entities, loading, error } = useRelatedEntities(entity, {\n    type: relationType,\n    kind: entityKind,\n  });\n\n  if (loading) {\n    return (\n      <InfoCard variant={variant} title={title}>\n        <Progress />\n      </InfoCard>\n    );\n  }\n\n  if (error) {\n    return (\n      <InfoCard variant={variant} title={title}>\n        <ResponseErrorPanel error={error} />\n      </InfoCard>\n    );\n  }\n\n  return (\n    <EntityTable\n      title={title}\n      variant={variant}\n      emptyContent={\n        <div style={{ textAlign: 'center' }}>\n          <Typography variant=\"body1\">{emptyMessage}</Typography>\n          <Typography variant=\"body2\">\n            <Link to={emptyHelpLink}>Learn how to change this.</Link>\n          </Typography>\n        </div>\n      }\n      columns={columns}\n      entities={asRenderableEntities(entities || [])}\n    />\n  );\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  ComponentEntity,\n  Entity,\n  ResourceEntity,\n  SystemEntity,\n} from '@backstage/catalog-model';\nimport { EntityTable } from '@backstage/plugin-catalog-react';\nimport { TableColumn } from '@backstage/core-components';\n\nexport const componentEntityColumns: TableColumn<ComponentEntity>[] = [\n  EntityTable.columns.createEntityRefColumn({ defaultKind: 'component' }),\n  EntityTable.columns.createOwnerColumn(),\n  EntityTable.columns.createSpecTypeColumn(),\n  EntityTable.columns.createSpecLifecycleColumn(),\n  EntityTable.columns.createMetadataDescriptionColumn(),\n];\nexport const componentEntityHelpLink: string =\n  'https://backstage.io/docs/features/software-catalog/descriptor-format#kind-component';\nexport const asComponentEntities = (entities: Entity[]): ComponentEntity[] =>\n  entities as ComponentEntity[];\n\nexport const resourceEntityColumns: TableColumn<ResourceEntity>[] = [\n  EntityTable.columns.createEntityRefColumn({ defaultKind: 'resource' }),\n  EntityTable.columns.createOwnerColumn(),\n  EntityTable.columns.createSpecTypeColumn(),\n  EntityTable.columns.createSpecLifecycleColumn(),\n  EntityTable.columns.createMetadataDescriptionColumn(),\n];\nexport const resourceEntityHelpLink: string =\n  'https://backstage.io/docs/features/software-catalog/descriptor-format#kind-resource';\nexport const asResourceEntities = (entities: Entity[]): ResourceEntity[] =>\n  entities as ResourceEntity[];\n\nexport const systemEntityColumns: TableColumn<SystemEntity>[] = [\n  EntityTable.columns.createEntityRefColumn({ defaultKind: 'system' }),\n  EntityTable.columns.createOwnerColumn(),\n  EntityTable.columns.createMetadataDescriptionColumn(),\n];\nexport const systemEntityHelpLink: string =\n  'https://backstage.io/docs/features/software-catalog/descriptor-format#kind-system';\nexport const asSystemEntities = (entities: Entity[]): SystemEntity[] =>\n  entities as SystemEntity[];\n"],"sourceRoot":""}