"use strict";(()=>{(self.webpackChunktechdocs_cli_embedded_app=self.webpackChunktechdocs_cli_embedded_app||[]).push([[1410],{42822:function(de,$,b){b.d($,{i:function(){return ur}});var j=b(7502),Q=b(13634),D=b(66439);function R(e){return e?Object.keys(e).reduce((s,o)=>(s[o.toLowerCase()]=e[o],s),{}):{}}function N(e,s){const o=Object.assign({},e);return Object.keys(s).forEach(i=>{(0,D.P)(s[i])?i in e?o[i]=N(e[i],s[i]):Object.assign(o,{[i]:s[i]}):Object.assign(o,{[i]:s[i]})}),o}function S(e){for(const s in e)e[s]===void 0&&delete e[s];return e}function F(e,s,o){if(typeof s=="string"){let[n,w]=s.split(" ");o=Object.assign(w?{method:n,url:w}:{url:n},o)}else o=Object.assign({},s);o.headers=R(o.headers),S(o),S(o.headers);const i=N(e||{},o);return e&&e.mediaType.previews.length&&(i.mediaType.previews=e.mediaType.previews.filter(n=>!i.mediaType.previews.includes(n)).concat(i.mediaType.previews)),i.mediaType.previews=i.mediaType.previews.map(n=>n.replace(/-preview/,"")),i}function ee(e,s){const o=/\?/.test(e)?"&":"?",i=Object.keys(s);return i.length===0?e:e+o+i.map(n=>n==="q"?"q="+s.q.split("+").map(encodeURIComponent).join("+"):`${n}=${encodeURIComponent(s[n])}`).join("&")}const x=/\{[^}]+\}/g;function k(e){return e.replace(/^\W+|\W+$/g,"").split(/,/)}function K(e){const s=e.match(x);return s?s.map(k).reduce((o,i)=>o.concat(i),[]):[]}function z(e,s){return Object.keys(e).filter(o=>!s.includes(o)).reduce((o,i)=>(o[i]=e[i],o),{})}function W(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map(function(s){return/%[0-9A-Fa-f]/.test(s)||(s=encodeURI(s).replace(/%5B/g,"[").replace(/%5D/g,"]")),s}).join("")}function E(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(s){return"%"+s.charCodeAt(0).toString(16).toUpperCase()})}function I(e,s,o){return s=e==="+"||e==="#"?W(s):E(s),o?E(o)+"="+s:s}function v(e){return e!=null}function L(e){return e===";"||e==="&"||e==="?"}function X(e,s,o,i){var n=e[o],w=[];if(v(n)&&n!=="")if(typeof n=="string"||typeof n=="number"||typeof n=="boolean")n=n.toString(),i&&i!=="*"&&(n=n.substring(0,parseInt(i,10))),w.push(I(s,n,L(s)?o:""));else if(i==="*")Array.isArray(n)?n.filter(v).forEach(function(m){w.push(I(s,m,L(s)?o:""))}):Object.keys(n).forEach(function(m){v(n[m])&&w.push(I(s,n[m],m))});else{const m=[];Array.isArray(n)?n.filter(v).forEach(function(y){m.push(I(s,y))}):Object.keys(n).forEach(function(y){v(n[y])&&(m.push(E(y)),m.push(I(s,n[y].toString())))}),L(s)?w.push(E(o)+"="+m.join(",")):m.length!==0&&w.push(m.join(","))}else s===";"?v(n)&&w.push(E(o)):n===""&&(s==="&"||s==="?")?w.push(E(o)+"="):n===""&&w.push("");return w}function te(e){return{expand:U.bind(null,e)}}function U(e,s){var o=["+","#",".","/",";","?","&"];return e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(i,n,w){if(n){let y="";const P=[];if(o.indexOf(n.charAt(0))!==-1&&(y=n.charAt(0),n=n.substr(1)),n.split(/,/g).forEach(function(Z){var M=/([^:\*]*)(?::(\d+)|(\*))?/.exec(Z);P.push(X(s,y,M[1],M[2]||M[3]))}),y&&y!=="+"){var m=",";return y==="?"?m="&":y!=="#"&&(m=y),(P.length!==0?y:"")+P.join(m)}else return P.join(",")}else return W(w)})}function B(e){let s=e.method.toUpperCase(),o=(e.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),i=Object.assign({},e.headers),n,w=z(e,["method","baseUrl","url","headers","request","mediaType"]);const m=K(o);o=te(o).expand(w),/^http/.test(o)||(o=e.baseUrl+o);const y=Object.keys(e).filter(M=>m.includes(M)).concat("baseUrl"),P=z(w,y);if(!/application\/octet-stream/i.test(i.accept)&&(e.mediaType.format&&(i.accept=i.accept.split(/,/).map(M=>M.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${e.mediaType.format}`)).join(",")),e.mediaType.previews.length)){const M=i.accept.match(/[\w-]+(?=-preview)/g)||[];i.accept=M.concat(e.mediaType.previews).map(ae=>{const ce=e.mediaType.format?`.${e.mediaType.format}`:"+json";return`application/vnd.github.${ae}-preview${ce}`}).join(",")}return["GET","HEAD"].includes(s)?o=ee(o,P):"data"in P?n=P.data:Object.keys(P).length?n=P:i["content-length"]=0,!i["content-type"]&&typeof n!="undefined"&&(i["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(s)&&typeof n=="undefined"&&(n=""),Object.assign({method:s,url:o,headers:i},typeof n!="undefined"?{body:n}:null,e.request?{request:e.request}:null)}function J(e,s,o){return B(F(e,s,o))}function se(e,s){const o=F(e,s),i=J.bind(null,o);return Object.assign(i,{DEFAULTS:o,defaults:se.bind(null,o),merge:F.bind(null,o),parse:B})}const ge=`octokit-endpoint.js/6.0.12 ${(0,j.i)()}`,h=se(null,{method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":ge},mediaType:{format:"",previews:[]}});var t=b(34911),u=b.n(t),l=b(91346),g=b(29928),_=b.n(g);const A=_()(e=>console.warn(e)),C=_()(e=>console.warn(e));class q extends Error{constructor(s,o,i){super(s),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="HttpError",this.status=o;let n;"headers"in i&&typeof i.headers!="undefined"&&(n=i.headers),"response"in i&&(this.response=i.response,n=i.response.headers);const w=Object.assign({},i.request);i.request.headers.authorization&&(w.headers=Object.assign({},i.request.headers,{authorization:i.request.headers.authorization.replace(/ .*$/," [REDACTED]")})),w.url=w.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=w,Object.defineProperty(this,"code",{get(){return A(new l.$("[@octokit/request-error] `error.code` is deprecated, use `error.status`.")),o}}),Object.defineProperty(this,"headers",{get(){return C(new l.$("[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`.")),n||{}}})}}const oe="5.6.3";function Y(e){return e.arrayBuffer()}function ne(e){const s=e.request&&e.request.log?e.request.log:console;((0,D.P)(e.body)||Array.isArray(e.body))&&(e.body=JSON.stringify(e.body));let o={},i,n;return(e.request&&e.request.fetch||u())(e.url,Object.assign({method:e.method,body:e.body,headers:e.headers,redirect:e.redirect},e.request)).then(async m=>{n=m.url,i=m.status;for(const y of m.headers)o[y[0]]=y[1];if("deprecation"in o){const y=o.link&&o.link.match(/<([^>]+)>; rel="deprecation"/),P=y&&y.pop();s.warn(`[@octokit/request] "${e.method} ${e.url}" is deprecated. It is scheduled to be removed on ${o.sunset}${P?`. See ${P}`:""}`)}if(!(i===204||i===205)){if(e.method==="HEAD"){if(i<400)return;throw new q(m.statusText,i,{response:{url:n,status:i,headers:o,data:void 0},request:e})}if(i===304)throw new q("Not modified",i,{response:{url:n,status:i,headers:o,data:await ie(m)},request:e});if(i>=400){const y=await ie(m);throw new q(me(y),i,{response:{url:n,status:i,headers:o,data:y},request:e})}return ie(m)}}).then(m=>({status:i,url:n,headers:o,data:m})).catch(m=>{throw m instanceof q?m:new q(m.message,500,{request:e})})}async function ie(e){const s=e.headers.get("content-type");return/application\/json/.test(s)?e.json():!s||/^text\/|charset=utf-8$/.test(s)?e.text():Y(e)}function me(e){return typeof e=="string"?e:"message"in e?Array.isArray(e.errors)?`${e.message}: ${e.errors.map(JSON.stringify).join(", ")}`:e.message:`Unknown error: ${JSON.stringify(e)}`}function he(e,s){const o=e.defaults(s);return Object.assign(function(n,w){const m=o.merge(n,w);if(!m.request||!m.request.hook)return ne(o.parse(m));const y=(P,Z)=>ne(o.parse(o.merge(P,Z)));return Object.assign(y,{endpoint:o,defaults:he.bind(null,o)}),m.request.hook(y,m)},{endpoint:o,defaults:he.bind(null,o)})}const r=he(h,{headers:{"user-agent":`octokit-request.js/${oe} ${(0,j.i)()}`}});var a=b(23531),c=b.n(a),p=b(58717),d=b(40154);const f="5.6.3";function T(e){return e.arrayBuffer()}function G(e){const s=e.request&&e.request.log?e.request.log:console;((0,D.P)(e.body)||Array.isArray(e.body))&&(e.body=JSON.stringify(e.body));let o={},i,n;return(e.request&&e.request.fetch||u())(e.url,Object.assign({method:e.method,body:e.body,headers:e.headers,redirect:e.redirect},e.request)).then(async m=>{n=m.url,i=m.status;for(const y of m.headers)o[y[0]]=y[1];if("deprecation"in o){const y=o.link&&o.link.match(/<([^>]+)>; rel="deprecation"/),P=y&&y.pop();s.warn(`[@octokit/request] "${e.method} ${e.url}" is deprecated. It is scheduled to be removed on ${o.sunset}${P?`. See ${P}`:""}`)}if(!(i===204||i===205)){if(e.method==="HEAD"){if(i<400)return;throw new d.RequestError(m.statusText,i,{response:{url:n,status:i,headers:o,data:void 0},request:e})}if(i===304)throw new d.RequestError("Not modified",i,{response:{url:n,status:i,headers:o,data:await O(m)},request:e});if(i>=400){const y=await O(m);throw new d.RequestError(V(y),i,{response:{url:n,status:i,headers:o,data:y},request:e})}return O(m)}}).then(m=>({status:i,url:n,headers:o,data:m})).catch(m=>{throw m instanceof d.RequestError?m:new d.RequestError(m.message,500,{request:e})})}async function O(e){const s=e.headers.get("content-type");return/application\/json/.test(s)?e.json():!s||/^text\/|charset=utf-8$/.test(s)?e.text():T(e)}function V(e){return typeof e=="string"?e:"message"in e?Array.isArray(e.errors)?`${e.message}: ${e.errors.map(JSON.stringify).join(", ")}`:e.message:`Unknown error: ${JSON.stringify(e)}`}function H(e,s){const o=e.defaults(s);return Object.assign(function(n,w){const m=o.merge(n,w);if(!m.request||!m.request.hook)return G(o.parse(m));const y=(P,Z)=>G(o.parse(o.merge(P,Z)));return Object.assign(y,{endpoint:o,defaults:H.bind(null,o)}),m.request.hook(y,m)},{endpoint:o,defaults:H.bind(null,o)})}const ue=H(p.F,{headers:{"user-agent":`octokit-request.js/${f} ${(0,j.i)()}`}});var re=b(21460);async function Ee(e,s){const o=$e(e,s.auth);if(o)return o;const{data:i}=await(0,re.TG)({clientType:e.clientType,clientId:e.clientId,request:s.request||e.request,scopes:s.auth.scopes||e.scopes});await e.onVerification(i);const n=await we(s.request||e.request,e.clientId,e.clientType,i);return e.authentication=n,n}function $e(e,s){if(s.refresh===!0||!e.authentication)return!1;if(e.clientType==="github-app")return e.authentication;const o=e.authentication,i=("scopes"in s&&s.scopes||e.scopes).join(" "),n=o.scopes.join(" ");return i===n?o:!1}async function Ae(e){await new Promise(s=>setTimeout(s,e*1e3))}async function we(e,s,o,i){try{const n={clientId:s,request:e,code:i.device_code},{authentication:w}=o==="oauth-app"?await(0,re.i7)({...n,clientType:"oauth-app"}):await(0,re.i7)({...n,clientType:"github-app"});return{type:"token",tokenType:"oauth",...w}}catch(n){if(!n.response)throw n;const w=n.response.data.error;if(w==="authorization_pending")return await Ae(i.interval),we(e,s,o,i);if(w==="slow_down")return await Ae(i.interval+5),we(e,s,o,i);throw n}}async function qe(e,s){return Ee(e,{auth:s})}async function We(e,s,o,i){let n=s.endpoint.merge(o,i);if(/\/login\/(oauth\/access_token|device\/code)$/.test(n.url))return s(n);const{token:w}=await Ee(e,{request:s,auth:{type:"oauth"}});return n.headers.authorization=`token ${w}`,s(n)}const Be="3.1.1";function He(e){const s=e.request||ue.defaults({headers:{"user-agent":`octokit-auth-oauth-device.js/${Be} ${(0,j.i)()}`}}),{request:o=s,...i}=e,n=e.clientType==="github-app"?{...i,clientType:"github-app",request:o}:{...i,clientType:"oauth-app",request:o,scopes:e.scopes||[]};if(!e.clientId)throw new Error('[@octokit/auth-oauth-device] "clientId" option must be set (https://github.com/octokit/auth-oauth-device.js#usage)');if(!e.onVerification)throw new Error('[@octokit/auth-oauth-device] "onVerification" option must be a function (https://github.com/octokit/auth-oauth-device.js#usage)');return Object.assign(qe.bind(null,n),{hook:We.bind(null,n)})}const ve="2.0.0";async function Pe(e){if("code"in e.strategyOptions){const{authentication:s}=await(0,re.yi)({clientId:e.clientId,clientSecret:e.clientSecret,clientType:e.clientType,...e.strategyOptions,request:e.request});return{type:"token",tokenType:"oauth",...s}}if("onVerification"in e.strategyOptions){const o=await He({clientType:e.clientType,clientId:e.clientId,...e.strategyOptions,request:e.request})({type:"oauth"});return{clientSecret:e.clientSecret,...o}}if("token"in e.strategyOptions)return{type:"token",tokenType:"oauth",clientId:e.clientId,clientSecret:e.clientSecret,clientType:e.clientType,...e.strategyOptions};throw new Error("[@octokit/auth-oauth-user] Invalid strategy options")}async function be(e,s={}){if(e.authentication||(e.authentication=e.clientType==="oauth-app"?await Pe(e):await Pe(e)),e.authentication.invalid)throw new Error("[@octokit/auth-oauth-user] Token is invalid");const o=e.authentication;if("expiresAt"in o&&(s.type==="refresh"||new Date(o.expiresAt)<new Date)){const{authentication:i}=await(0,re.g$)({clientType:"github-app",clientId:e.clientId,clientSecret:e.clientSecret,refreshToken:o.refreshToken,request:e.request});e.authentication={tokenType:"oauth",type:"token",...i}}if(s.type==="refresh"){if(e.clientType==="oauth-app")throw new Error("[@octokit/auth-oauth-user] OAuth Apps do not support expiring tokens");if(!o.hasOwnProperty("expiresAt"))throw new Error("[@octokit/auth-oauth-user] Refresh token missing")}if(s.type==="check"||s.type==="reset"){const i=s.type==="check"?re.a_:re.Eu;try{const{authentication:n}=await i({clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:e.authentication.token,request:e.request});return e.authentication={tokenType:"oauth",type:"token",...n},e.authentication}catch(n){throw n.status===404&&(n.message="[@octokit/auth-oauth-user] Token is invalid",e.authentication.invalid=!0),n}}if(s.type==="delete"||s.type==="deleteAuthorization"){const i=s.type==="delete"?re.pQ:re.sA;try{await i({clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:e.authentication.token,request:e.request})}catch(n){if(n.status!==404)throw n}return e.authentication.invalid=!0,e.authentication}return e.authentication}const Ne=/\/applications\/[^/]+\/(token|grant)s?/;function _e(e){return e&&Ne.test(e)}async function ze(e,s,o,i={}){const n=s.endpoint.merge(o,i);if(/\/login\/(oauth\/access_token|device\/code)$/.test(n.url))return s(n);if(_e(n.url)){const m=c()(`${e.clientId}:${e.clientSecret}`);return n.headers.authorization=`basic ${m}`,s(n)}const{token:w}=e.clientType==="oauth-app"?await be({...e,request:s}):await be({...e,request:s});return n.headers.authorization="token "+w,s(n)}function ye({clientId:e,clientSecret:s,clientType:o="oauth-app",request:i=Q.W.defaults({headers:{"user-agent":`octokit-auth-oauth-app.js/${ve} ${(0,j.i)()}`}}),...n}){const w=Object.assign({clientType:o,clientId:e,clientSecret:s,strategyOptions:n,request:i});return Object.assign(be.bind(null,w),{hook:ze.bind(null,w)})}ye.VERSION=ve;async function Ve(e,s){if(s.type==="oauth-app")return{type:"oauth-app",clientId:e.clientId,clientSecret:e.clientSecret,clientType:e.clientType,headers:{authorization:`basic ${c()(`${e.clientId}:${e.clientSecret}`)}`}};if("factory"in s){const{type:n,...w}={...s,...e};return s.factory(w)}const o={clientId:e.clientId,clientSecret:e.clientSecret,request:e.request,...s};return(e.clientType==="oauth-app"?await ye({...o,clientType:e.clientType}):await ye({...o,clientType:e.clientType}))()}async function Me(e,s,o,i){let n=s.endpoint.merge(o,i);if(/\/login\/(oauth\/access_token|device\/code)$/.test(n.url))return s(n);if(e.clientType==="github-app"&&!_e(n.url))throw new Error(`[@octokit/auth-oauth-app] GitHub Apps cannot use their client ID/secret for basic authentication for endpoints other than "/applications/{client_id}/**". "${n.method} ${n.url}" is not supported.`);const w=c()(`${e.clientId}:${e.clientSecret}`);n.headers.authorization=`basic ${w}`;try{return await s(n)}catch(m){throw m.status!==401||(m.message=`[@octokit/auth-oauth-app] "${n.method} ${n.url}" does not support clientId/clientSecret basic authentication.`),m}}const xe="5.0.1";function Ke(e){const s=Object.assign({request:r.defaults({headers:{"user-agent":`octokit-auth-oauth-app.js/${xe} ${(0,j.i)()}`}}),clientType:"oauth-app"},e);return Object.assign(Ve.bind(null,s),{hook:Me.bind(null,s)})}var Je=b(6990),Qe=b(77105),Xe=b.n(Qe);async function fe({appId:e,privateKey:s,timeDifference:o}){try{const i=await(0,Je.C)({id:+e,privateKey:s,now:o&&Math.floor(Date.now()/1e3)+o});return{type:"app",token:i.token,appId:i.appId,expiresAt:new Date(i.expiration*1e3).toISOString()}}catch(i){throw s==="-----BEGIN RSA PRIVATE KEY-----"?new Error("The 'privateKey` option contains only the first line '-----BEGIN RSA PRIVATE KEY-----'. If you are setting it using a `.env` file, make sure it is set on a single line with newlines replaced by '\n'"):i}}function Ye(){return new(Xe())({max:15e3,maxAge:1e3*60*59})}async function Ze(e,s){const o=Se(s),i=await e.get(o);if(!i)return;const[n,w,m,y,P,Z]=i.split("|"),M=s.permissions||P.split(/,/).reduce((ae,ce)=>(/!$/.test(ce)?ae[ce.slice(0,-1)]="write":ae[ce]="read",ae),{});return{token:n,createdAt:w,expiresAt:m,permissions:M,repositoryIds:s.repositoryIds,repositoryNames:s.repositoryNames,singleFileName:Z,repositorySelection:y}}async function er(e,s,o){const i=Se(s),n=s.permissions?"":Object.keys(o.permissions).map(m=>`${m}${o.permissions[m]==="write"?"!":""}`).join(","),w=[o.token,o.createdAt,o.expiresAt,o.repositorySelection,n,o.singleFileName].join("|");await e.set(i,w)}function Se({installationId:e,permissions:s={},repositoryIds:o=[],repositoryNames:i=[]}){const n=Object.keys(s).sort().map(y=>s[y]==="read"?y:`${y}!`).join(","),w=o.sort().join(","),m=i.join(",");return[e,w,m,n].filter(Boolean).join("|")}function Oe({installationId:e,token:s,createdAt:o,expiresAt:i,repositorySelection:n,permissions:w,repositoryIds:m,repositoryNames:y,singleFileName:P}){return Object.assign({type:"token",tokenType:"installation",token:s,installationId:e,permissions:w,createdAt:o,expiresAt:i,repositorySelection:n},m?{repositoryIds:m}:null,y?{repositoryNames:y}:null,P?{singleFileName:P}:null)}async function Re(e,s,o){const i=Number(s.installationId||e.installationId);if(!i)throw new Error("[@octokit/auth-app] installationId option is required for installation authentication.");if(s.factory){const{type:Te,factory:Ge,oauthApp:Le,...ke}={...e,...s};return Ge(ke)}const n=Object.assign({installationId:i},s);if(!s.refresh){const Te=await Ze(e.cache,n);if(Te){const{token:Ge,createdAt:Le,expiresAt:ke,permissions:lr,repositoryIds:dr,repositoryNames:gr,singleFileName:mr,repositorySelection:hr}=Te;return Oe({installationId:i,token:Ge,createdAt:Le,expiresAt:ke,permissions:lr,repositorySelection:hr,repositoryIds:dr,repositoryNames:gr,singleFileName:mr})}}const w=await fe(e),m=o||e.request,{data:{token:y,expires_at:P,repositories:Z,permissions:M,repository_selection:ae,single_file:ce}}=await m("POST /app/installations/{installation_id}/access_tokens",{installation_id:i,repository_ids:s.repositoryIds,repositories:s.repositoryNames,permissions:s.permissions,mediaType:{previews:["machine-man"]},headers:{authorization:`bearer ${w.token}`}}),Ue=M||{},De=ae||"all",Ie=Z?Z.map(Te=>Te.id):void 0,Ce=Z?Z.map(Te=>Te.name):void 0,je=new Date().toISOString();return await er(e.cache,n,{token:y,createdAt:je,expiresAt:P,repositorySelection:De,permissions:Ue,repositoryIds:Ie,repositoryNames:Ce,singleFileName:ce}),Oe({installationId:i,token:y,createdAt:je,expiresAt:P,repositorySelection:De,permissions:Ue,repositoryIds:Ie,repositoryNames:Ce,singleFileName:ce})}async function rr(e,s){switch(s.type){case"app":return fe(e);case"oauth":e.log.warn(new l.$('[@octokit/auth-app] {type: "oauth"} is deprecated. Use {type: "oauth-app"} instead'));case"oauth-app":return e.oauthApp({type:"oauth-app"});case"installation":return Re(e,{...s,type:"installation"});case"oauth-user":return e.oauthApp(s);default:throw new Error(`Invalid auth type: ${s.type}`)}}const tr=["/app","/app/hook/config","/app/hook/deliveries","/app/hook/deliveries/{delivery_id}","/app/hook/deliveries/{delivery_id}/attempts","/app/installations","/app/installations/{installation_id}","/app/installations/{installation_id}/access_tokens","/app/installations/{installation_id}/suspended","/marketplace_listing/accounts/{account_id}","/marketplace_listing/plan","/marketplace_listing/plans","/marketplace_listing/plans/{plan_id}/accounts","/marketplace_listing/stubbed/accounts/{account_id}","/marketplace_listing/stubbed/plan","/marketplace_listing/stubbed/plans","/marketplace_listing/stubbed/plans/{plan_id}/accounts","/orgs/{org}/installation","/repos/{owner}/{repo}/installation","/users/{username}/installation"];function sr(e){const o=`^(?:${e.map(i=>i.split("/").map(n=>n.startsWith("{")?"(?:.+?)":n).join("/")).map(i=>`(?:${i})`).join("|")})[^/]*$`;return new RegExp(o,"i")}const or=sr(tr);function nr(e){return!!e&&or.test(e)}const ir=5*1e3;function ar(e){return!(e.message.match(/'Expiration time' claim \('exp'\) must be a numeric value representing the future time at which the assertion expires/)||e.message.match(/'Issued at' claim \('iat'\) must be an Integer representing the time that the assertion was issued/))}async function cr(e,s,o,i){const n=s.endpoint.merge(o,i),w=n.url;if(/\/login\/oauth\/access_token$/.test(w))return s(n);if(nr(w.replace(s.endpoint.DEFAULTS.baseUrl,""))){const{token:P}=await fe(e);n.headers.authorization=`bearer ${P}`;let Z;try{Z=await s(n)}catch(M){if(ar(M)||typeof M.response.headers.date=="undefined")throw M;const ae=Math.floor((Date.parse(M.response.headers.date)-Date.parse(new Date().toString()))/1e3);e.log.warn(M.message),e.log.warn(`[@octokit/auth-app] GitHub API time and system time are different by ${ae} seconds. Retrying request with the difference accounted for.`);const{token:ce}=await fe({...e,timeDifference:ae});return n.headers.authorization=`bearer ${ce}`,s(n)}return Z}if(_e(w)){const P=await e.oauthApp({type:"oauth-app"});return n.headers.authorization=P.headers.authorization,s(n)}const{token:m,createdAt:y}=await Re(e,{},s);return n.headers.authorization=`token ${m}`,Fe(e,s,n,y)}async function Fe(e,s,o,i,n=0){const w=+new Date-+new Date(i);try{return await s(o)}catch(m){if(m.status!==401)throw m;if(w>=ir)throw n>0&&(m.message=`After ${n} retries within ${w/1e3}s of creating the installation access token, the response remains 401. At this point, the cause may be an authentication problem or a system outage. Please check https://www.githubstatus.com for status information`),m;++n;const y=n*1e3;return e.log.warn(`[@octokit/auth-app] Retrying after 401 response to account for token replication delay (retry: ${n}, wait: ${y/1e3}s)`),await new Promise(P=>setTimeout(P,y)),Fe(e,s,o,i,n)}}const pr="4.0.7";function ur(e){if(!e.appId)throw new Error("[@octokit/auth-app] appId option is required");if(!Number.isFinite(+e.appId))throw new Error("[@octokit/auth-app] appId option must be a number or numeric string");if(!e.privateKey)throw new Error("[@octokit/auth-app] privateKey option is required");if("installationId"in e&&!e.installationId)throw new Error("[@octokit/auth-app] installationId is set to a falsy value");const s=Object.assign({warn:console.warn.bind(console)},e.log),o=e.request||Q.W.defaults({headers:{"user-agent":`octokit-auth-app.js/${pr} ${(0,j.i)()}`}}),i=Object.assign({request:o,cache:Ye()},e,e.installationId?{installationId:Number(e.installationId)}:{},{log:s,oauthApp:Ke({clientType:"github-app",clientId:e.clientId||"",clientSecret:e.clientSecret||"",request:o})});return Object.assign(rr.bind(null,i),{hook:cr.bind(null,i)})}},58717:function(de,$,b){b.d($,{F:function(){return le}});var j=b(66439),Q=b(7502);function D(h){return h?Object.keys(h).reduce((t,u)=>(t[u.toLowerCase()]=h[u],t),{}):{}}function R(h,t){const u=Object.assign({},h);return Object.keys(t).forEach(l=>{(0,j.P)(t[l])?l in h?u[l]=R(h[l],t[l]):Object.assign(u,{[l]:t[l]}):Object.assign(u,{[l]:t[l]})}),u}function N(h){for(const t in h)h[t]===void 0&&delete h[t];return h}function S(h,t,u){if(typeof t=="string"){let[g,_]=t.split(" ");u=Object.assign(_?{method:g,url:_}:{url:g},u)}else u=Object.assign({},t);u.headers=D(u.headers),N(u),N(u.headers);const l=R(h||{},u);return h&&h.mediaType.previews.length&&(l.mediaType.previews=h.mediaType.previews.filter(g=>!l.mediaType.previews.includes(g)).concat(l.mediaType.previews)),l.mediaType.previews=l.mediaType.previews.map(g=>g.replace(/-preview/,"")),l}function F(h,t){const u=/\?/.test(h)?"&":"?",l=Object.keys(t);return l.length===0?h:h+u+l.map(g=>g==="q"?"q="+t.q.split("+").map(encodeURIComponent).join("+"):`${g}=${encodeURIComponent(t[g])}`).join("&")}const ee=/\{[^}]+\}/g;function x(h){return h.replace(/^\W+|\W+$/g,"").split(/,/)}function k(h){const t=h.match(ee);return t?t.map(x).reduce((u,l)=>u.concat(l),[]):[]}function K(h,t){return Object.keys(h).filter(u=>!t.includes(u)).reduce((u,l)=>(u[l]=h[l],u),{})}function z(h){return h.split(/(%[0-9A-Fa-f]{2})/g).map(function(t){return/%[0-9A-Fa-f]/.test(t)||(t=encodeURI(t).replace(/%5B/g,"[").replace(/%5D/g,"]")),t}).join("")}function W(h){return encodeURIComponent(h).replace(/[!'()*]/g,function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()})}function E(h,t,u){return t=h==="+"||h==="#"?z(t):W(t),u?W(u)+"="+t:t}function I(h){return h!=null}function v(h){return h===";"||h==="&"||h==="?"}function L(h,t,u,l){var g=h[u],_=[];if(I(g)&&g!=="")if(typeof g=="string"||typeof g=="number"||typeof g=="boolean")g=g.toString(),l&&l!=="*"&&(g=g.substring(0,parseInt(l,10))),_.push(E(t,g,v(t)?u:""));else if(l==="*")Array.isArray(g)?g.filter(I).forEach(function(A){_.push(E(t,A,v(t)?u:""))}):Object.keys(g).forEach(function(A){I(g[A])&&_.push(E(t,g[A],A))});else{const A=[];Array.isArray(g)?g.filter(I).forEach(function(C){A.push(E(t,C))}):Object.keys(g).forEach(function(C){I(g[C])&&(A.push(W(C)),A.push(E(t,g[C].toString())))}),v(t)?_.push(W(u)+"="+A.join(",")):A.length!==0&&_.push(A.join(","))}else t===";"?I(g)&&_.push(W(u)):g===""&&(t==="&"||t==="?")?_.push(W(u)+"="):g===""&&_.push("");return _}function X(h){return{expand:te.bind(null,h)}}function te(h,t){var u=["+","#",".","/",";","?","&"];return h.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(l,g,_){if(g){let C="";const q=[];if(u.indexOf(g.charAt(0))!==-1&&(C=g.charAt(0),g=g.substr(1)),g.split(/,/g).forEach(function(oe){var Y=/([^:\*]*)(?::(\d+)|(\*))?/.exec(oe);q.push(L(t,C,Y[1],Y[2]||Y[3]))}),C&&C!=="+"){var A=",";return C==="?"?A="&":C!=="#"&&(A=C),(q.length!==0?C:"")+q.join(A)}else return q.join(",")}else return z(_)})}function U(h){let t=h.method.toUpperCase(),u=(h.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),l=Object.assign({},h.headers),g,_=K(h,["method","baseUrl","url","headers","request","mediaType"]);const A=k(u);u=X(u).expand(_),/^http/.test(u)||(u=h.baseUrl+u);const C=Object.keys(h).filter(Y=>A.includes(Y)).concat("baseUrl"),q=K(_,C);if(!/application\/octet-stream/i.test(l.accept)&&(h.mediaType.format&&(l.accept=l.accept.split(/,/).map(Y=>Y.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${h.mediaType.format}`)).join(",")),h.mediaType.previews.length)){const Y=l.accept.match(/[\w-]+(?=-preview)/g)||[];l.accept=Y.concat(h.mediaType.previews).map(ne=>{const ie=h.mediaType.format?`.${h.mediaType.format}`:"+json";return`application/vnd.github.${ne}-preview${ie}`}).join(",")}return["GET","HEAD"].includes(t)?u=F(u,q):"data"in q?g=q.data:Object.keys(q).length?g=q:l["content-length"]=0,!l["content-type"]&&typeof g!="undefined"&&(l["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(t)&&typeof g=="undefined"&&(g=""),Object.assign({method:t,url:u,headers:l},typeof g!="undefined"?{body:g}:null,h.request?{request:h.request}:null)}function B(h,t,u){return U(S(h,t,u))}function J(h,t){const u=S(h,t),l=B.bind(null,u);return Object.assign(l,{DEFAULTS:u,defaults:J.bind(null,u),merge:S.bind(null,u),parse:U})}const pe=`octokit-endpoint.js/6.0.12 ${(0,Q.i)()}`,le=J(null,{method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":pe},mediaType:{format:"",previews:[]}})},12768:function(de,$,b){b.r($),b.d($,{oauthAuthorizationUrl:function(){return j}});function j(D){const R=D.clientType||"oauth-app",N=D.baseUrl||"https://github.com",S={clientType:R,allowSignup:D.allowSignup!==!1,clientId:D.clientId,login:D.login||null,redirectUrl:D.redirectUrl||null,state:D.state||Math.random().toString(36).substr(2),url:""};if(R==="oauth-app"){const F="scopes"in D?D.scopes:[];S.scopes=typeof F=="string"?F.split(/[,\s]+/).filter(Boolean):F}return S.url=Q(`${N}/login/oauth/authorize`,S),S}function Q(D,R){const N={allowSignup:"allow_signup",clientId:"client_id",login:"login",redirectUrl:"redirect_uri",scopes:"scope",state:"state"};let S=D;return Object.keys(N).filter(F=>R[F]!==null).filter(F=>F!=="scopes"?!0:R.clientType==="github-app"?!1:!Array.isArray(R[F])||R[F].length>0).map(F=>[N[F],`${R[F]}`]).forEach(([F,ee],x)=>{S+=x===0?"?":"&",S+=`${F}=${ee}`}),S}},21460:function(de,$,b){var j;j={value:!0};function Q(t){return t&&typeof t=="object"&&"default"in t?t.default:t}var D=b(12768),R=b(76601),N=b(40154),S=Q(b(23531));const F="1.2.2";function ee(t,u,l){return u in t?Object.defineProperty(t,u,{value:l,enumerable:!0,configurable:!0,writable:!0}):t[u]=l,t}function x(t,u){var l=Object.keys(t);if(Object.getOwnPropertySymbols){var g=Object.getOwnPropertySymbols(t);u&&(g=g.filter(function(_){return Object.getOwnPropertyDescriptor(t,_).enumerable})),l.push.apply(l,g)}return l}function k(t){for(var u=1;u<arguments.length;u++){var l=arguments[u]!=null?arguments[u]:{};u%2?x(Object(l),!0).forEach(function(g){ee(t,g,l[g])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(l)):x(Object(l)).forEach(function(g){Object.defineProperty(t,g,Object.getOwnPropertyDescriptor(l,g))})}return t}function K(t,u){if(t==null)return{};var l={},g=Object.keys(t),_,A;for(A=0;A<g.length;A++)_=g[A],!(u.indexOf(_)>=0)&&(l[_]=t[_]);return l}function z(t,u){if(t==null)return{};var l=K(t,u),g,_;if(Object.getOwnPropertySymbols){var A=Object.getOwnPropertySymbols(t);for(_=0;_<A.length;_++)g=A[_],!(u.indexOf(g)>=0)&&(!Object.prototype.propertyIsEnumerable.call(t,g)||(l[g]=t[g]))}return l}function W(t){const u=t.endpoint.DEFAULTS;return/^https:\/\/(api\.)?github\.com$/.test(u.baseUrl)?"https://github.com":u.baseUrl.replace("/api/v3","")}async function E(t,u,l){const g=k({baseUrl:W(t),headers:{accept:"application/json"}},l),_=await t(u,g);if("error"in _.data){const A=new N.RequestError(`${_.data.error_description} (${_.data.error}, ${_.data.error_url})`,400,{request:t.endpoint.merge(u,g),headers:_.headers});throw A.response=_,A}return _}function I(t){let{request:u=R.request}=t,l=z(t,["request"]);const g=W(u);return D.oauthAuthorizationUrl(k(k({},l),{},{baseUrl:g}))}async function v(t){const u=t.request||R.request,l=await E(u,"POST /login/oauth/access_token",{client_id:t.clientId,client_secret:t.clientSecret,code:t.code,redirect_uri:t.redirectUrl,state:t.state}),g={clientType:t.clientType,clientId:t.clientId,clientSecret:t.clientSecret,token:l.data.access_token,scopes:l.data.scope.split(/\s+/).filter(Boolean)};if(t.clientType==="github-app"){if("refresh_token"in l.data){const _=new Date(l.headers.date).getTime();g.refreshToken=l.data.refresh_token,g.expiresAt=L(_,l.data.expires_in),g.refreshTokenExpiresAt=L(_,l.data.refresh_token_expires_in)}delete g.scopes}return k(k({},l),{},{authentication:g})}function L(t,u){return new Date(t+u*1e3).toISOString()}async function X(t){const u=t.request||R.request,l={client_id:t.clientId};return"scopes"in t&&Array.isArray(t.scopes)&&(l.scope=t.scopes.join(" ")),E(u,"POST /login/device/code",l)}async function te(t){const u=t.request||R.request,l=await E(u,"POST /login/oauth/access_token",{client_id:t.clientId,device_code:t.code,grant_type:"urn:ietf:params:oauth:grant-type:device_code"}),g={clientType:t.clientType,clientId:t.clientId,token:l.data.access_token,scopes:l.data.scope.split(/\s+/).filter(Boolean)};if("clientSecret"in t&&(g.clientSecret=t.clientSecret),t.clientType==="github-app"){if("refresh_token"in l.data){const _=new Date(l.headers.date).getTime();g.refreshToken=l.data.refresh_token,g.expiresAt=U(_,l.data.expires_in),g.refreshTokenExpiresAt=U(_,l.data.refresh_token_expires_in)}delete g.scopes}return k(k({},l),{},{authentication:g})}function U(t,u){return new Date(t+u*1e3).toISOString()}async function B(t){const l=await(t.request||R.request)("POST /applications/{client_id}/token",{headers:{authorization:`basic ${S(`${t.clientId}:${t.clientSecret}`)}`},client_id:t.clientId,access_token:t.token}),g={clientType:t.clientType,clientId:t.clientId,clientSecret:t.clientSecret,token:t.token,scopes:l.data.scopes};return t.clientType==="github-app"&&delete g.scopes,k(k({},l),{},{authentication:g})}async function J(t){const u=t.request||R.request,l=await E(u,"POST /login/oauth/access_token",{client_id:t.clientId,client_secret:t.clientSecret,grant_type:"refresh_token",refresh_token:t.refreshToken}),g=new Date(l.headers.date).getTime(),_={clientType:"github-app",clientId:t.clientId,clientSecret:t.clientSecret,token:l.data.access_token,refreshToken:l.data.refresh_token,expiresAt:se(g,l.data.expires_in),refreshTokenExpiresAt:se(g,l.data.refresh_token_expires_in)};return k(k({},l),{},{authentication:_})}function se(t,u){return new Date(t+u*1e3).toISOString()}async function pe(t){const{request:u,clientType:l,clientId:g,clientSecret:_,token:A}=t,C=z(t,["request","clientType","clientId","clientSecret","token"]),q=await(u||R.request)("POST /applications/{client_id}/token/scoped",k({headers:{authorization:`basic ${S(`${g}:${_}`)}`},client_id:g,access_token:A},C)),oe={clientType:l,clientId:g,clientSecret:_,token:q.data.token};return k(k({},q),{},{authentication:oe})}async function ge(t){const u=t.request||R.request,l=S(`${t.clientId}:${t.clientSecret}`),g=await u("PATCH /applications/{client_id}/token",{headers:{authorization:`basic ${l}`},client_id:t.clientId,access_token:t.token}),_={clientType:t.clientType,clientId:t.clientId,clientSecret:t.clientSecret,token:g.data.token,scopes:g.data.scopes};return t.clientType==="github-app"&&delete _.scopes,k(k({},g),{},{authentication:_})}async function le(t){const u=t.request||R.request,l=S(`${t.clientId}:${t.clientSecret}`);return u("DELETE /applications/{client_id}/token",{headers:{authorization:`basic ${l}`},client_id:t.clientId,access_token:t.token})}async function h(t){const u=t.request||R.request,l=S(`${t.clientId}:${t.clientSecret}`);return u("DELETE /applications/{client_id}/grant",{headers:{authorization:`basic ${l}`},client_id:t.clientId,access_token:t.token})}j=F,$.a_=B,$.TG=X,$.sA=h,$.pQ=le,$.i7=te,$.yi=v,j=I,$.g$=J,$.Eu=ge,j=pe},76601:function(de,$,b){b.r($),b.d($,{request:function(){return W}});var j=b(58717),Q=b(7502),D=b(66439),R=b(34911),N=b.n(R),S=b(40154);const F="5.6.3";function ee(E){return E.arrayBuffer()}function x(E){const I=E.request&&E.request.log?E.request.log:console;((0,D.P)(E.body)||Array.isArray(E.body))&&(E.body=JSON.stringify(E.body));let v={},L,X;return(E.request&&E.request.fetch||N())(E.url,Object.assign({method:E.method,body:E.body,headers:E.headers,redirect:E.redirect},E.request)).then(async U=>{X=U.url,L=U.status;for(const B of U.headers)v[B[0]]=B[1];if("deprecation"in v){const B=v.link&&v.link.match(/<([^>]+)>; rel="deprecation"/),J=B&&B.pop();I.warn(`[@octokit/request] "${E.method} ${E.url}" is deprecated. It is scheduled to be removed on ${v.sunset}${J?`. See ${J}`:""}`)}if(!(L===204||L===205)){if(E.method==="HEAD"){if(L<400)return;throw new S.RequestError(U.statusText,L,{response:{url:X,status:L,headers:v,data:void 0},request:E})}if(L===304)throw new S.RequestError("Not modified",L,{response:{url:X,status:L,headers:v,data:await k(U)},request:E});if(L>=400){const B=await k(U);throw new S.RequestError(K(B),L,{response:{url:X,status:L,headers:v,data:B},request:E})}return k(U)}}).then(U=>({status:L,url:X,headers:v,data:U})).catch(U=>{throw U instanceof S.RequestError?U:new S.RequestError(U.message,500,{request:E})})}async function k(E){const I=E.headers.get("content-type");return/application\/json/.test(I)?E.json():!I||/^text\/|charset=utf-8$/.test(I)?E.text():ee(E)}function K(E){return typeof E=="string"?E:"message"in E?Array.isArray(E.errors)?`${E.message}: ${E.errors.map(JSON.stringify).join(", ")}`:E.message:`Unknown error: ${JSON.stringify(E)}`}function z(E,I){const v=E.defaults(I);return Object.assign(function(X,te){const U=v.merge(X,te);if(!U.request||!U.request.hook)return x(v.parse(U));const B=(J,se)=>x(v.parse(v.merge(J,se)));return Object.assign(B,{endpoint:v,defaults:z.bind(null,v)}),U.request.hook(B,U)},{endpoint:v,defaults:z.bind(null,v)})}const W=z(j.F,{headers:{"user-agent":`octokit-request.js/${F} ${(0,Q.i)()}`}})},40154:function(de,$,b){b.r($),b.d($,{RequestError:function(){return S}});var j=b(91346),Q=b(29928),D=b.n(Q);const R=D()(F=>console.warn(F)),N=D()(F=>console.warn(F));class S extends Error{constructor(ee,x,k){super(ee),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="HttpError",this.status=x;let K;"headers"in k&&typeof k.headers!="undefined"&&(K=k.headers),"response"in k&&(this.response=k.response,K=k.response.headers);const z=Object.assign({},k.request);k.request.headers.authorization&&(z.headers=Object.assign({},k.request.headers,{authorization:k.request.headers.authorization.replace(/ .*$/," [REDACTED]")})),z.url=z.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=z,Object.defineProperty(this,"code",{get(){return R(new j.$("[@octokit/request-error] `error.code` is deprecated, use `error.status`.")),x}}),Object.defineProperty(this,"headers",{get(){return N(new j.$("[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`.")),K||{}}})}}},13634:function(de,$,b){b.d($,{W:function(){return he}});var j=b(66439),Q=b(7502);function D(r){return r?Object.keys(r).reduce((a,c)=>(a[c.toLowerCase()]=r[c],a),{}):{}}function R(r,a){const c=Object.assign({},r);return Object.keys(a).forEach(p=>{(0,j.P)(a[p])?p in r?c[p]=R(r[p],a[p]):Object.assign(c,{[p]:a[p]}):Object.assign(c,{[p]:a[p]})}),c}function N(r){for(const a in r)r[a]===void 0&&delete r[a];return r}function S(r,a,c){if(typeof a=="string"){let[d,f]=a.split(" ");c=Object.assign(f?{method:d,url:f}:{url:d},c)}else c=Object.assign({},a);c.headers=D(c.headers),N(c),N(c.headers);const p=R(r||{},c);return r&&r.mediaType.previews.length&&(p.mediaType.previews=r.mediaType.previews.filter(d=>!p.mediaType.previews.includes(d)).concat(p.mediaType.previews)),p.mediaType.previews=p.mediaType.previews.map(d=>d.replace(/-preview/,"")),p}function F(r,a){const c=/\?/.test(r)?"&":"?",p=Object.keys(a);return p.length===0?r:r+c+p.map(d=>d==="q"?"q="+a.q.split("+").map(encodeURIComponent).join("+"):`${d}=${encodeURIComponent(a[d])}`).join("&")}const ee=/\{[^}]+\}/g;function x(r){return r.replace(/^\W+|\W+$/g,"").split(/,/)}function k(r){const a=r.match(ee);return a?a.map(x).reduce((c,p)=>c.concat(p),[]):[]}function K(r,a){return Object.keys(r).filter(c=>!a.includes(c)).reduce((c,p)=>(c[p]=r[p],c),{})}function z(r){return r.split(/(%[0-9A-Fa-f]{2})/g).map(function(a){return/%[0-9A-Fa-f]/.test(a)||(a=encodeURI(a).replace(/%5B/g,"[").replace(/%5D/g,"]")),a}).join("")}function W(r){return encodeURIComponent(r).replace(/[!'()*]/g,function(a){return"%"+a.charCodeAt(0).toString(16).toUpperCase()})}function E(r,a,c){return a=r==="+"||r==="#"?z(a):W(a),c?W(c)+"="+a:a}function I(r){return r!=null}function v(r){return r===";"||r==="&"||r==="?"}function L(r,a,c,p){var d=r[c],f=[];if(I(d)&&d!=="")if(typeof d=="string"||typeof d=="number"||typeof d=="boolean")d=d.toString(),p&&p!=="*"&&(d=d.substring(0,parseInt(p,10))),f.push(E(a,d,v(a)?c:""));else if(p==="*")Array.isArray(d)?d.filter(I).forEach(function(T){f.push(E(a,T,v(a)?c:""))}):Object.keys(d).forEach(function(T){I(d[T])&&f.push(E(a,d[T],T))});else{const T=[];Array.isArray(d)?d.filter(I).forEach(function(G){T.push(E(a,G))}):Object.keys(d).forEach(function(G){I(d[G])&&(T.push(W(G)),T.push(E(a,d[G].toString())))}),v(a)?f.push(W(c)+"="+T.join(",")):T.length!==0&&f.push(T.join(","))}else a===";"?I(d)&&f.push(W(c)):d===""&&(a==="&"||a==="?")?f.push(W(c)+"="):d===""&&f.push("");return f}function X(r){return{expand:te.bind(null,r)}}function te(r,a){var c=["+","#",".","/",";","?","&"];return r.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(p,d,f){if(d){let G="";const O=[];if(c.indexOf(d.charAt(0))!==-1&&(G=d.charAt(0),d=d.substr(1)),d.split(/,/g).forEach(function(V){var H=/([^:\*]*)(?::(\d+)|(\*))?/.exec(V);O.push(L(a,G,H[1],H[2]||H[3]))}),G&&G!=="+"){var T=",";return G==="?"?T="&":G!=="#"&&(T=G),(O.length!==0?G:"")+O.join(T)}else return O.join(",")}else return z(f)})}function U(r){let a=r.method.toUpperCase(),c=(r.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),p=Object.assign({},r.headers),d,f=K(r,["method","baseUrl","url","headers","request","mediaType"]);const T=k(c);c=X(c).expand(f),/^http/.test(c)||(c=r.baseUrl+c);const G=Object.keys(r).filter(H=>T.includes(H)).concat("baseUrl"),O=K(f,G);if(!/application\/octet-stream/i.test(p.accept)&&(r.mediaType.format&&(p.accept=p.accept.split(/,/).map(H=>H.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${r.mediaType.format}`)).join(",")),r.mediaType.previews.length)){const H=p.accept.match(/[\w-]+(?=-preview)/g)||[];p.accept=H.concat(r.mediaType.previews).map(ue=>{const re=r.mediaType.format?`.${r.mediaType.format}`:"+json";return`application/vnd.github.${ue}-preview${re}`}).join(",")}return["GET","HEAD"].includes(a)?c=F(c,O):"data"in O?d=O.data:Object.keys(O).length?d=O:p["content-length"]=0,!p["content-type"]&&typeof d!="undefined"&&(p["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(a)&&typeof d=="undefined"&&(d=""),Object.assign({method:a,url:c,headers:p},typeof d!="undefined"?{body:d}:null,r.request?{request:r.request}:null)}function B(r,a,c){return U(S(r,a,c))}function J(r,a){const c=S(r,a),p=B.bind(null,c);return Object.assign(p,{DEFAULTS:c,defaults:J.bind(null,c),merge:S.bind(null,c),parse:U})}const pe=`octokit-endpoint.js/7.0.1 ${(0,Q.i)()}`,le=J(null,{method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":pe},mediaType:{format:"",previews:[]}});var h=b(34911),t=b.n(h),u=b(91346),l=b(29928),g=b.n(l);const _=g()(r=>console.warn(r)),A=g()(r=>console.warn(r));class C extends Error{constructor(a,c,p){super(a),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="HttpError",this.status=c;let d;"headers"in p&&typeof p.headers!="undefined"&&(d=p.headers),"response"in p&&(this.response=p.response,d=p.response.headers);const f=Object.assign({},p.request);p.request.headers.authorization&&(f.headers=Object.assign({},p.request.headers,{authorization:p.request.headers.authorization.replace(/ .*$/," [REDACTED]")})),f.url=f.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=f,Object.defineProperty(this,"code",{get(){return _(new u.$("[@octokit/request-error] `error.code` is deprecated, use `error.status`.")),c}}),Object.defineProperty(this,"headers",{get(){return A(new u.$("[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`.")),d||{}}})}}const q="6.2.2";function oe(r){return r.arrayBuffer()}function Y(r){const a=r.request&&r.request.log?r.request.log:console;((0,j.P)(r.body)||Array.isArray(r.body))&&(r.body=JSON.stringify(r.body));let c={},p,d;return(r.request&&r.request.fetch||globalThis.fetch||t())(r.url,Object.assign({method:r.method,body:r.body,headers:r.headers,redirect:r.redirect},r.request)).then(async T=>{d=T.url,p=T.status;for(const G of T.headers)c[G[0]]=G[1];if("deprecation"in c){const G=c.link&&c.link.match(/<([^>]+)>; rel="deprecation"/),O=G&&G.pop();a.warn(`[@octokit/request] "${r.method} ${r.url}" is deprecated. It is scheduled to be removed on ${c.sunset}${O?`. See ${O}`:""}`)}if(!(p===204||p===205)){if(r.method==="HEAD"){if(p<400)return;throw new C(T.statusText,p,{response:{url:d,status:p,headers:c,data:void 0},request:r})}if(p===304)throw new C("Not modified",p,{response:{url:d,status:p,headers:c,data:await ne(T)},request:r});if(p>=400){const G=await ne(T);throw new C(ie(G),p,{response:{url:d,status:p,headers:c,data:G},request:r})}return ne(T)}}).then(T=>({status:p,url:d,headers:c,data:T})).catch(T=>{throw T instanceof C||T.name==="AbortError"?T:new C(T.message,500,{request:r})})}async function ne(r){const a=r.headers.get("content-type");return/application\/json/.test(a)?r.json():!a||/^text\/|charset=utf-8$/.test(a)?r.text():oe(r)}function ie(r){return typeof r=="string"?r:"message"in r?Array.isArray(r.errors)?`${r.message}: ${r.errors.map(JSON.stringify).join(", ")}`:r.message:`Unknown error: ${JSON.stringify(r)}`}function me(r,a){const c=r.defaults(a);return Object.assign(function(d,f){const T=c.merge(d,f);if(!T.request||!T.request.hook)return Y(c.parse(T));const G=(O,V)=>Y(c.parse(c.merge(O,V)));return Object.assign(G,{endpoint:c,defaults:me.bind(null,c)}),T.request.hook(G,T)},{endpoint:c,defaults:me.bind(null,c)})}const he=me(le,{headers:{"user-agent":`octokit-request.js/${q} ${(0,Q.i)()}`}})},89393:function(de,$,b){b.d($,{v:function(){return he}});var j=b(7502),Q=b(93222),D=b(13634);const R="5.0.1";function N(r){return`Request failed due to following response errors:
`+r.errors.map(a=>` - ${a.message}`).join(`
`)}class S extends Error{constructor(a,c,p){super(N(p)),this.request=a,this.headers=c,this.response=p,this.name="GraphqlResponseError",this.errors=p.errors,this.data=p.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}}const F=["method","baseUrl","url","headers","request","query","mediaType"],ee=["query","method","url"],x=/\/api\/v3\/?$/;function k(r,a,c){if(c){if(typeof a=="string"&&"query"in c)return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));for(const T in c)if(!!ee.includes(T))return Promise.reject(new Error(`[@octokit/graphql] "${T}" cannot be used as variable name`))}const p=typeof a=="string"?Object.assign({query:a},c):a,d=Object.keys(p).reduce((T,G)=>F.includes(G)?(T[G]=p[G],T):(T.variables||(T.variables={}),T.variables[G]=p[G],T),{}),f=p.baseUrl||r.endpoint.DEFAULTS.baseUrl;return x.test(f)&&(d.url=f.replace(x,"/api/graphql")),r(d).then(T=>{if(T.data.errors){const G={};for(const O of Object.keys(T.headers))G[O]=T.headers[O];throw new S(d,G,T.data)}return T.data.data})}function K(r,a){const c=r.defaults(a);return Object.assign((d,f)=>k(c,d,f),{defaults:K.bind(null,c),endpoint:D.W.endpoint})}const z=K(D.W,{headers:{"user-agent":`octokit-graphql.js/${R} ${(0,j.i)()}`},method:"POST",url:"/graphql"});function W(r){return K(r,{method:"POST",url:"/graphql"})}const E=/^v1\./,I=/^ghs_/,v=/^ghu_/;async function L(r){const a=r.split(/\./).length===3,c=E.test(r)||I.test(r),p=v.test(r);return{type:"token",token:r,tokenType:a?"app":c?"installation":p?"user-to-server":"oauth"}}function X(r){return r.split(/\./).length===3?`bearer ${r}`:`token ${r}`}async function te(r,a,c,p){const d=a.endpoint.merge(c,p);return d.headers.authorization=X(r),a(d)}const U=function(a){if(!a)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if(typeof a!="string")throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return a=a.replace(/^(token|bearer) +/i,""),Object.assign(L.bind(null,a),{hook:te.bind(null,a)})},B="4.0.5";class J{constructor(a={}){const c=new Q.Collection,p={baseUrl:D.W.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},a.request,{hook:c.bind(null,"request")}),mediaType:{previews:[],format:""}};if(p.headers["user-agent"]=[a.userAgent,`octokit-core.js/${B} ${(0,j.i)()}`].filter(Boolean).join(" "),a.baseUrl&&(p.baseUrl=a.baseUrl),a.previews&&(p.mediaType.previews=a.previews),a.timeZone&&(p.headers["time-zone"]=a.timeZone),this.request=D.W.defaults(p),this.graphql=W(this.request).defaults(p),this.log=Object.assign({debug:()=>{},info:()=>{},warn:console.warn.bind(console),error:console.error.bind(console)},a.log),this.hook=c,a.authStrategy){const{authStrategy:f,...T}=a,G=f(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:T},a.auth));c.wrap("request",G.hook),this.auth=G}else if(!a.auth)this.auth=async()=>({type:"unauthenticated"});else{const f=U(a.auth);c.wrap("request",f.hook),this.auth=f}this.constructor.plugins.forEach(f=>{Object.assign(this,f(this,a))})}static defaults(a){return class extends this{constructor(...p){const d=p[0]||{};if(typeof a=="function"){super(a(d));return}super(Object.assign({},a,d,d.userAgent&&a.userAgent?{userAgent:`${d.userAgent} ${a.userAgent}`}:null))}}}static plugin(...a){var c;const p=this.plugins;return c=class extends this{},c.plugins=p.concat(a.filter(f=>!p.includes(f))),c}}J.VERSION=B,J.plugins=[];const se="1.0.4";function pe(r){r.hook.wrap("request",(a,c)=>{r.log.debug("request",c);const p=Date.now(),d=r.request.endpoint.parse(c),f=d.url.replace(c.baseUrl,"");return a(c).then(T=>(r.log.info(`${d.method} ${f} - ${T.status} in ${Date.now()-p}ms`),T)).catch(T=>{throw r.log.info(`${d.method} ${f} - ${T.status} in ${Date.now()-p}ms`),T})})}pe.VERSION=se;const ge="4.0.0";function le(r){if(!r.data)return{...r,data:[]};if(!("total_count"in r.data&&!("url"in r.data)))return r;const c=r.data.incomplete_results,p=r.data.repository_selection,d=r.data.total_count;delete r.data.incomplete_results,delete r.data.repository_selection,delete r.data.total_count;const f=Object.keys(r.data)[0],T=r.data[f];return r.data=T,typeof c!="undefined"&&(r.data.incomplete_results=c),typeof p!="undefined"&&(r.data.repository_selection=p),r.data.total_count=d,r}function h(r,a,c){const p=typeof a=="function"?a.endpoint(c):r.request.endpoint(a,c),d=typeof a=="function"?a:r.request,f=p.method,T=p.headers;let G=p.url;return{[Symbol.asyncIterator]:()=>({async next(){if(!G)return{done:!0};try{const O=await d({method:f,url:G,headers:T}),V=le(O);return G=((V.headers.link||"").match(/<([^>]+)>;\s*rel="next"/)||[])[1],{value:V}}catch(O){if(O.status!==409)throw O;return G="",{value:{status:200,headers:{},data:[]}}}}})}}function t(r,a,c,p){return typeof c=="function"&&(p=c,c=void 0),u(r,[],h(r,a,c)[Symbol.asyncIterator](),p)}function u(r,a,c,p){return c.next().then(d=>{if(d.done)return a;let f=!1;function T(){f=!0}return a=a.concat(p?p(d.value,T):d.value.data),f?a:u(r,a,c,p)})}const l=Object.assign(t,{iterator:h}),g=null;function _(r){return typeof r=="string"?g.includes(r):!1}function A(r){return{paginate:Object.assign(t.bind(null,r),{iterator:h.bind(null,r)})}}A.VERSION=ge;const C={actions:{addCustomLabelsToSelfHostedRunnerForOrg:["POST /orgs/{org}/actions/runners/{runner_id}/labels"],addCustomLabelsToSelfHostedRunnerForRepo:["POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],approveWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createOrUpdateEnvironmentSecret:["PUT /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteActionsCacheById:["DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"],deleteActionsCacheByKey:["DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteEnvironmentSecret:["DELETE /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunAttemptLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],getActionsCacheList:["GET /repos/{owner}/{repo}/actions/caches"],getActionsCacheUsage:["GET /repos/{owner}/{repo}/actions/cache/usage"],getActionsCacheUsageByRepoForOrg:["GET /orgs/{org}/actions/cache/usage-by-repository"],getActionsCacheUsageForEnterprise:["GET /enterprises/{enterprise}/actions/cache/usage"],getActionsCacheUsageForOrg:["GET /orgs/{org}/actions/cache/usage"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getEnvironmentPublicKey:["GET /repositories/{repository_id}/environments/{environment_name}/secrets/public-key"],getEnvironmentSecret:["GET /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],getGithubActionsDefaultWorkflowPermissionsEnterprise:["GET /enterprises/{enterprise}/actions/permissions/workflow"],getGithubActionsDefaultWorkflowPermissionsOrganization:["GET /orgs/{org}/actions/permissions/workflow"],getGithubActionsDefaultWorkflowPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/workflow"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getPendingDeploymentsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getReviewsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowAccessToRepository:["GET /repos/{owner}/{repo}/actions/permissions/access"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listEnvironmentSecrets:["GET /repositories/{repository_id}/environments/{environment_name}/secrets"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listJobsForWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],listLabelsForSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}/labels"],listLabelsForSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],reRunJobForWorkflowRun:["POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],reRunWorkflowFailedJobs:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"],removeAllCustomLabelsFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels"],removeAllCustomLabelsFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],removeCustomLabelFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"],removeCustomLabelFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],reviewPendingDeploymentsForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setCustomLabelsForSelfHostedRunnerForOrg:["PUT /orgs/{org}/actions/runners/{runner_id}/labels"],setCustomLabelsForSelfHostedRunnerForRepo:["PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],setGithubActionsDefaultWorkflowPermissionsEnterprise:["PUT /enterprises/{enterprise}/actions/permissions/workflow"],setGithubActionsDefaultWorkflowPermissionsOrganization:["PUT /orgs/{org}/actions/permissions/workflow"],setGithubActionsDefaultWorkflowPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/workflow"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"],setWorkflowAccessToRepository:["PUT /repos/{owner}/{repo}/actions/permissions/access"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","addRepoToInstallationForAuthenticatedUser"]}],addRepoToInstallationForAuthenticatedUser:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],getWebhookDelivery:["GET /app/hook/deliveries/{delivery_id}"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],listWebhookDeliveries:["GET /app/hook/deliveries"],redeliverWebhookDelivery:["POST /app/hook/deliveries/{delivery_id}/attempts"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","removeRepoFromInstallationForAuthenticatedUser"]}],removeRepoFromInstallationForAuthenticatedUser:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],scopeToken:["POST /applications/{client_id}/token/scoped"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubAdvancedSecurityBillingGhe:["GET /enterprises/{enterprise}/settings/billing/advanced-security"],getGithubAdvancedSecurityBillingOrg:["GET /orgs/{org}/settings/billing/advanced-security"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestRun:["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{deleteAnalysis:["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],getAnalysis:["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],getSarif:["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],listAlertInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/code-scanning/alerts"],listAlertsForOrg:["GET /orgs/{org}/code-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listAlertsInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",{},{renamed:["codeScanning","listAlertInstances"]}],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct"],getConductCode:["GET /codes_of_conduct/{key}"]},codespaces:{addRepositoryForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],codespaceMachinesForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/machines"],createForAuthenticatedUser:["POST /user/codespaces"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],createOrUpdateSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}"],createWithPrForAuthenticatedUser:["POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"],createWithRepoForAuthenticatedUser:["POST /repos/{owner}/{repo}/codespaces"],deleteForAuthenticatedUser:["DELETE /user/codespaces/{codespace_name}"],deleteFromOrganization:["DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],deleteSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}"],exportForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/exports"],getExportDetailsForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/exports/{export_id}"],getForAuthenticatedUser:["GET /user/codespaces/{codespace_name}"],getPublicKeyForAuthenticatedUser:["GET /user/codespaces/secrets/public-key"],getRepoPublicKey:["GET /repos/{owner}/{repo}/codespaces/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],getSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}"],listDevcontainersInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/devcontainers"],listForAuthenticatedUser:["GET /user/codespaces"],listInOrganization:["GET /orgs/{org}/codespaces",{},{renamedParameters:{org_id:"org"}}],listInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces"],listRepoSecrets:["GET /repos/{owner}/{repo}/codespaces/secrets"],listRepositoriesForSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}/repositories"],listSecretsForAuthenticatedUser:["GET /user/codespaces/secrets"],preFlightWithRepoForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/new"],removeRepositoryForSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],repoMachinesForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/machines"],setRepositoriesForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories"],startForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/start"],stopForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/stop"],stopInOrganization:["POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"],updateForAuthenticatedUser:["PATCH /user/codespaces/{codespace_name}"]},dependabot:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],getOrgPublicKey:["GET /orgs/{org}/dependabot/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}"],getRepoPublicKey:["GET /repos/{owner}/{repo}/dependabot/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],listOrgSecrets:["GET /orgs/{org}/dependabot/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/dependabot/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"]},dependencyGraph:{createRepositorySnapshot:["POST /repos/{owner}/{repo}/dependency-graph/snapshots"],diffRange:["GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"]},emojis:{get:["GET /emojis"]},enterpriseAdmin:{addCustomLabelsToSelfHostedRunnerForEnterprise:["POST /enterprises/{enterprise}/actions/runners/{runner_id}/labels"],disableSelectedOrganizationGithubActionsEnterprise:["DELETE /enterprises/{enterprise}/actions/permissions/organizations/{org_id}"],enableSelectedOrganizationGithubActionsEnterprise:["PUT /enterprises/{enterprise}/actions/permissions/organizations/{org_id}"],getAllowedActionsEnterprise:["GET /enterprises/{enterprise}/actions/permissions/selected-actions"],getGithubActionsPermissionsEnterprise:["GET /enterprises/{enterprise}/actions/permissions"],getServerStatistics:["GET /enterprise-installation/{enterprise_or_org}/server-statistics"],listLabelsForSelfHostedRunnerForEnterprise:["GET /enterprises/{enterprise}/actions/runners/{runner_id}/labels"],listSelectedOrganizationsEnabledGithubActionsEnterprise:["GET /enterprises/{enterprise}/actions/permissions/organizations"],removeAllCustomLabelsFromSelfHostedRunnerForEnterprise:["DELETE /enterprises/{enterprise}/actions/runners/{runner_id}/labels"],removeCustomLabelFromSelfHostedRunnerForEnterprise:["DELETE /enterprises/{enterprise}/actions/runners/{runner_id}/labels/{name}"],setAllowedActionsEnterprise:["PUT /enterprises/{enterprise}/actions/permissions/selected-actions"],setCustomLabelsForSelfHostedRunnerForEnterprise:["PUT /enterprises/{enterprise}/actions/runners/{runner_id}/labels"],setGithubActionsPermissionsEnterprise:["PUT /enterprises/{enterprise}/actions/permissions"],setSelectedOrganizationsEnabledGithubActionsEnterprise:["PUT /enterprises/{enterprise}/actions/permissions/organizations"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},interactions:{getRestrictionsForAuthenticatedUser:["GET /user/interaction-limits"],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits",{},{renamed:["interactions","getRestrictionsForAuthenticatedUser"]}],removeRestrictionsForAuthenticatedUser:["DELETE /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits",{},{renamed:["interactions","removeRestrictionsForAuthenticatedUser"]}],setRestrictionsForAuthenticatedUser:["PUT /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits",{},{renamed:["interactions","setRestrictionsForAuthenticatedUser"]}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{cancelImport:["DELETE /repos/{owner}/{repo}/import"],deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive"],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive"],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive"],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive"],getCommitAuthors:["GET /repos/{owner}/{repo}/import/authors"],getImportStatus:["GET /repos/{owner}/{repo}/import"],getLargeFiles:["GET /repos/{owner}/{repo}/import/large_files"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}"],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}"],listForAuthenticatedUser:["GET /user/migrations"],listForOrg:["GET /orgs/{org}/migrations"],listReposForAuthenticatedUser:["GET /user/migrations/{migration_id}/repositories"],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories"],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{},{renamed:["migrations","listReposForAuthenticatedUser"]}],mapCommitAuthor:["PATCH /repos/{owner}/{repo}/import/authors/{author_id}"],setLfsPreference:["PATCH /repos/{owner}/{repo}/import/lfs"],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],startImport:["PUT /repos/{owner}/{repo}/import"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"],updateImport:["PATCH /repos/{owner}/{repo}/import"]},orgs:{addSecurityManagerTeam:["PUT /orgs/{org}/security-managers/teams/{team_slug}"],blockUser:["PUT /orgs/{org}/blocks/{username}"],cancelInvitation:["DELETE /orgs/{org}/invitations/{invitation_id}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createInvitation:["POST /orgs/{org}/invitations"],createWebhook:["POST /orgs/{org}/hooks"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],get:["GET /orgs/{org}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listBlockedUsers:["GET /orgs/{org}/blocks"],listCustomRoles:["GET /organizations/{organization_id}/custom_roles"],listFailedInvitations:["GET /orgs/{org}/failed_invitations"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listSecurityManagerTeams:["GET /orgs/{org}/security-managers"],listWebhookDeliveries:["GET /orgs/{org}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /orgs/{org}/hooks"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],removeSecurityManagerTeam:["DELETE /orgs/{org}/security-managers/teams/{team_slug}"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},packages:{deletePackageForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}"],deletePackageForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],deletePackageForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}"],deletePackageVersionForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getAllPackageVersionsForAPackageOwnedByAnOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByOrg"]}],getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]}],getAllPackageVersionsForPackageOwnedByAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions"],getPackageForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}"],getPackageForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}"],getPackageForUser:["GET /users/{username}/packages/{package_type}/{package_name}"],getPackageVersionForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],listPackagesForAuthenticatedUser:["GET /user/packages"],listPackagesForOrganization:["GET /orgs/{org}/packages"],listPackagesForUser:["GET /users/{username}/packages"],restorePackageForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForUser:["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageVersionForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForUser:["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}"],createCard:["POST /projects/columns/{column_id}/cards"],createColumn:["POST /projects/{project_id}/columns"],createForAuthenticatedUser:["POST /user/projects"],createForOrg:["POST /orgs/{org}/projects"],createForRepo:["POST /repos/{owner}/{repo}/projects"],delete:["DELETE /projects/{project_id}"],deleteCard:["DELETE /projects/columns/cards/{card_id}"],deleteColumn:["DELETE /projects/columns/{column_id}"],get:["GET /projects/{project_id}"],getCard:["GET /projects/columns/cards/{card_id}"],getColumn:["GET /projects/columns/{column_id}"],getPermissionForUser:["GET /projects/{project_id}/collaborators/{username}/permission"],listCards:["GET /projects/columns/{column_id}/cards"],listCollaborators:["GET /projects/{project_id}/collaborators"],listColumns:["GET /projects/{project_id}/columns"],listForOrg:["GET /orgs/{org}/projects"],listForRepo:["GET /repos/{owner}/{repo}/projects"],listForUser:["GET /users/{username}/projects"],moveCard:["POST /projects/columns/cards/{card_id}/moves"],moveColumn:["POST /projects/columns/{column_id}/moves"],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}"],update:["PATCH /projects/{project_id}"],updateCard:["PATCH /projects/columns/cards/{card_id}"],updateColumn:["PATCH /projects/columns/{column_id}"]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],createForRelease:["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],deleteForRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],listForRelease:["GET /repos/{owner}/{repo}/releases/{release_id}/reactions"],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}",{},{renamed:["repos","acceptInvitationForAuthenticatedUser"]}],acceptInvitationForAuthenticatedUser:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts"],codeownersErrors:["GET /repos/{owner}/{repo}/codeowners/errors"],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],compareCommitsWithBasehead:["GET /repos/{owner}/{repo}/compare/{basehead}"],createAutolink:["POST /repos/{owner}/{repo}/autolinks"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentBranchPolicy:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateEnvironment:["PUT /repos/{owner}/{repo}/environments/{environment_name}"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployment"],createPagesSite:["POST /repos/{owner}/{repo}/pages"],createRelease:["POST /repos/{owner}/{repo}/releases"],createTagProtection:["POST /repos/{owner}/{repo}/tags/protection"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate"],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}",{},{renamed:["repos","declineInvitationForAuthenticatedUser"]}],declineInvitationForAuthenticatedUser:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteAnEnvironment:["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],deleteAutolink:["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteDeploymentBranchPolicy:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages"],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteTagProtection:["DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes"],disableLfsForRepo:["DELETE /repos/{owner}/{repo}/lfs"],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes"],enableLfsForRepo:["PUT /repos/{owner}/{repo}/lfs"],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts"],generateReleaseNotes:["POST /repos/{owner}/{repo}/releases/generate-notes"],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllEnvironments:["GET /repos/{owner}/{repo}/environments"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics"],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getAutolink:["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentBranchPolicy:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getEnvironment:["GET /repos/{owner}/{repo}/environments/{environment_name}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getPagesHealthCheck:["GET /repos/{owner}/{repo}/pages/health"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getReadmeInDirectory:["GET /repos/{owner}/{repo}/readme/{dir}"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],listAutolinks:["GET /repos/{owner}/{repo}/autolinks"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentBranchPolicies:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTagProtection:["GET /repos/{owner}/{repo}/tags/protection"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhookDeliveries:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],mergeUpstream:["POST /repos/{owner}/{repo}/merge-upstream"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],renameBranch:["POST /repos/{owner}/{repo}/branches/{branch}/rename"],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics"],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateDeploymentBranchPolicy:["PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits"],issuesAndPullRequests:["GET /search/issues"],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics"],users:["GET /search/users"]},secretScanning:{getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/secret-scanning/alerts"],listAlertsForOrg:["GET /orgs/{org}/secret-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],listLocationsForAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects"],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails",{},{renamed:["users","addEmailForAuthenticatedUser"]}],addEmailForAuthenticatedUser:["POST /user/emails"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys",{},{renamed:["users","createGpgKeyForAuthenticatedUser"]}],createGpgKeyForAuthenticatedUser:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys",{},{renamed:["users","createPublicSshKeyForAuthenticatedUser"]}],createPublicSshKeyForAuthenticatedUser:["POST /user/keys"],deleteEmailForAuthenticated:["DELETE /user/emails",{},{renamed:["users","deleteEmailForAuthenticatedUser"]}],deleteEmailForAuthenticatedUser:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","deleteGpgKeyForAuthenticatedUser"]}],deleteGpgKeyForAuthenticatedUser:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}",{},{renamed:["users","deletePublicSshKeyForAuthenticatedUser"]}],deletePublicSshKeyForAuthenticatedUser:["DELETE /user/keys/{key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","getGpgKeyForAuthenticatedUser"]}],getGpgKeyForAuthenticatedUser:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}",{},{renamed:["users","getPublicSshKeyForAuthenticatedUser"]}],getPublicSshKeyForAuthenticatedUser:["GET /user/keys/{key_id}"],list:["GET /users"],listBlockedByAuthenticated:["GET /user/blocks",{},{renamed:["users","listBlockedByAuthenticatedUser"]}],listBlockedByAuthenticatedUser:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails",{},{renamed:["users","listEmailsForAuthenticatedUser"]}],listEmailsForAuthenticatedUser:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticatedUser"]}],listFollowedByAuthenticatedUser:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys",{},{renamed:["users","listGpgKeysForAuthenticatedUser"]}],listGpgKeysForAuthenticatedUser:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails",{},{renamed:["users","listPublicEmailsForAuthenticatedUser"]}],listPublicEmailsForAuthenticatedUser:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys",{},{renamed:["users","listPublicSshKeysForAuthenticatedUser"]}],listPublicSshKeysForAuthenticatedUser:["GET /user/keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility",{},{renamed:["users","setPrimaryEmailVisibilityForAuthenticatedUser"]}],setPrimaryEmailVisibilityForAuthenticatedUser:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}},q="6.3.0";function oe(r,a){const c={};for(const[p,d]of Object.entries(a))for(const[f,T]of Object.entries(d)){const[G,O,V]=T,[H,ue]=G.split(/ /),re=Object.assign({method:H,url:ue},O);c[p]||(c[p]={});const Ee=c[p];if(V){Ee[f]=Y(r,p,f,re,V);continue}Ee[f]=r.request.defaults(re)}return c}function Y(r,a,c,p,d){const f=r.request.defaults(p);function T(...G){let O=f.endpoint.merge(...G);if(d.mapToData)return O=Object.assign({},O,{data:O[d.mapToData],[d.mapToData]:void 0}),f(O);if(d.renamed){const[V,H]=d.renamed;r.log.warn(`octokit.${a}.${c}() has been renamed to octokit.${V}.${H}()`)}if(d.deprecated&&r.log.warn(d.deprecated),d.renamedParameters){const V=f.endpoint.merge(...G);for(const[H,ue]of Object.entries(d.renamedParameters))H in V&&(r.log.warn(`"${H}" parameter is deprecated for "octokit.${a}.${c}()". Use "${ue}" instead`),ue in V||(V[ue]=V[H]),delete V[H]);return f(V)}return f(...G)}return Object.assign(T,f)}function ne(r){return{rest:oe(r,C)}}ne.VERSION=q;function ie(r){const a=oe(r,C);return{...a,rest:a}}ie.VERSION=q;const me="19.0.4",he=J.plugin(pe,ie,A).defaults({userAgent:`octokit-rest.js/${me}`})}}]);})();

//# sourceMappingURL=module-octokit.9fb0d235.js.map