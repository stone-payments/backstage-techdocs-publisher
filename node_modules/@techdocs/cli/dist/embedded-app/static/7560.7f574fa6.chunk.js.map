{"version":3,"sources":["webpack://techdocs-cli-embedded-app/../../plugins/techdocs/src/home/components/TechDocsCustomHome.tsx"],"names":["panels","DocsTable","DocsCardGrid","CustomPanel","config","entities","index","classes","makeStyles","panelContainer","marginBottom","panelCSS","loading","loadingOwnership","isOwnedEntity","useEntityOwnership","Panel","panelType","shownEntities","filter","entity","filterPredicate","ContentHeader","title","description","SupportButton","div","className","data-testid","TechDocsCustomHome","props","tabsConfig","selectedTab","setSelectedTab","useState","catalogApi","useApi","catalogApiRef","value","error","useAsync","getEntities","CATALOG_FILTER_EXISTS","fields","items","metadata","annotations","currentTabConfig","TechDocsPageWrapper","Content","Progress","WarningPanel","severity","CodeSnippet","language","text","toString","HeaderTabs","selectedIndex","onChange","tabs","map","label","id"],"mappings":"4TA0CA,MAAMA,EAAS,CACbC,UAAWA,IACXC,aAAcA,GAChB,EAuCMC,EAAc,CAAC,CACnBC,SACAC,WACAC,OAAK,IAKD,CAOJ,MAAMC,G,EANYC,KAAW,CAC3BC,eAAgB,CACdC,aAAc,OACd,GAAIN,EAAOO,SAAWP,EAAOO,SAAW,CAAC,CAC3C,CACF,CAAC,EACyB,EACpB,CAAEC,QAASC,EAAkBC,eAAc,G,EAAIC,MAAmB,EAElEC,EAAQhB,EAAOI,EAAOa,WAEtBC,EAAgBb,EAASc,OAAOC,GAChChB,EAAOiB,kBAAoB,cACzBR,EACK,GAEFC,EAAcM,CAAM,EAI3B,OAAOhB,EAAOiB,iBAAoB,YAClCjB,EAAOiB,gBAAgBD,CAAM,CAEhC,EAED,O,EACE,oB,aACE,OAACE,KAAaA,CAACC,MAAOnB,EAAOmB,MAAOC,YAAapB,EAAOoB,Y,SACrDlB,IAAU,G,EACT,OAACmB,KAAaA,C,SAAC,2C,GAGb,I,MAEN,OAACC,OAAIC,UAAWpB,EAAQE,e,YACtB,OAACO,GAAMY,cAAY,wBAAwBvB,SAAUa,C,OAI7D,EAWaW,EAAsBC,GAAmC,CACpE,KAAM,CAAEC,YAAW,EAAID,EACjB,CAACE,EAAaC,CAAc,G,EAAIC,YAAiB,CAAC,EAClDC,G,EAAyBC,MAAOC,IAAaA,EAE7C,CACJC,MAAOjC,EACPO,UACA2B,OAAK,G,EACHC,WAAS,UACM,MAAML,EAAWM,YAAY,CAC5CtB,OAAQ,CACN,iDAAkDuB,IACpD,EACAC,OAAQ,CACN,aACA,OACA,WACA,YACA,aACA,W,CAEJ,CAAC,GACeC,MAAMzB,OAAQC,GAAmB,C,IACtCA,EAAT,MAAO,CAAC,EAACA,OAAOyB,SAASC,eAAW,MAA3B1B,eAA8B,6BACzC,CAAC,CACF,EAEK2B,EAAmBhB,EAAWC,GAEpC,OAAIpB,G,EAEA,OAACoC,IAAmBA,C,YAClB,OAACC,KAAOA,C,YACN,OAACC,KAAQA,G,KAMbX,G,EAEA,OAACS,IAAmBA,C,YAClB,OAACC,KAAOA,C,YACN,OAACE,KAAYA,CACXC,SAAS,QACT7B,MAAM,0C,YAEN,OAAC8B,KAAWA,CAACC,SAAS,OAAOC,KAAMhB,EAAMiB,SAAS,C,YAQ1D,QAACR,IAAmBA,C,aAClB,OAACS,KAAUA,CACTC,cAAe1B,EACf2B,SAAUrD,GAAS2B,EAAe3B,CAAK,EACvCsD,KAAM7B,EAAW8B,IAAI,CAAC,CAAEC,OAAM,EAAGxD,KAAW,CAC1CyD,GAAIzD,EAAMkD,SAAS,EACnBM,OACF,EAAE,C,MAEJ,OAACb,KAAOA,CAACrB,cAAY,mB,SAClBmB,EAAiB/C,OAAO6D,IAAI,CAACzD,EAAQE,K,EACpC,OAACH,GAECC,OAAQA,EACRC,SAAYA,GAAsB,CAAC,EACnCC,MAAOA,C,EAHFA,CAAK,CAALA,C,KASjB,C","file":"static/7560.7f574fa6.chunk.js","sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useState } from 'react';\nimport useAsync from 'react-use/lib/useAsync';\nimport { makeStyles } from '@material-ui/core';\nimport { CSSProperties } from '@material-ui/styles';\nimport {\n  CATALOG_FILTER_EXISTS,\n  catalogApiRef,\n  CatalogApi,\n  useEntityOwnership,\n} from '@backstage/plugin-catalog-react';\nimport { Entity } from '@backstage/catalog-model';\nimport { DocsTable } from './Tables';\nimport { DocsCardGrid } from './Grids';\nimport { TechDocsPageWrapper } from './TechDocsPageWrapper';\n\nimport {\n  CodeSnippet,\n  Content,\n  HeaderTabs,\n  Progress,\n  WarningPanel,\n  SupportButton,\n  ContentHeader,\n} from '@backstage/core-components';\nimport { useApi } from '@backstage/core-plugin-api';\n\nconst panels = {\n  DocsTable: DocsTable,\n  DocsCardGrid: DocsCardGrid,\n};\n\n/**\n * Available panel types\n *\n * @public\n */\nexport type PanelType = 'DocsCardGrid' | 'DocsTable';\n\n/**\n * Type representing a TechDocsCustomHome panel.\n *\n * @public\n */\nexport interface PanelConfig {\n  title: string;\n  description: string;\n  panelType: PanelType;\n  panelCSS?: CSSProperties;\n  filterPredicate: ((entity: Entity) => boolean) | string;\n}\n\n/**\n * Type representing a TechDocsCustomHome tab.\n *\n * @public\n */\nexport interface TabConfig {\n  label: string;\n  panels: PanelConfig[];\n}\n\n/**\n * Type representing a list of TechDocsCustomHome tabs.\n *\n * @public\n */\nexport type TabsConfig = TabConfig[];\n\nconst CustomPanel = ({\n  config,\n  entities,\n  index,\n}: {\n  config: PanelConfig;\n  entities: Entity[];\n  index: number;\n}) => {\n  const useStyles = makeStyles({\n    panelContainer: {\n      marginBottom: '2rem',\n      ...(config.panelCSS ? config.panelCSS : {}),\n    },\n  });\n  const classes = useStyles();\n  const { loading: loadingOwnership, isOwnedEntity } = useEntityOwnership();\n\n  const Panel = panels[config.panelType];\n\n  const shownEntities = entities.filter(entity => {\n    if (config.filterPredicate === 'ownedByUser') {\n      if (loadingOwnership) {\n        return false;\n      }\n      return isOwnedEntity(entity);\n    }\n\n    return (\n      typeof config.filterPredicate === 'function' &&\n      config.filterPredicate(entity)\n    );\n  });\n\n  return (\n    <>\n      <ContentHeader title={config.title} description={config.description}>\n        {index === 0 ? (\n          <SupportButton>\n            Discover documentation in your ecosystem.\n          </SupportButton>\n        ) : null}\n      </ContentHeader>\n      <div className={classes.panelContainer}>\n        <Panel data-testid=\"techdocs-custom-panel\" entities={shownEntities} />\n      </div>\n    </>\n  );\n};\n\n/**\n * Props for {@link TechDocsCustomHome}\n *\n * @public\n */\nexport type TechDocsCustomHomeProps = {\n  tabsConfig: TabsConfig;\n};\n\nexport const TechDocsCustomHome = (props: TechDocsCustomHomeProps) => {\n  const { tabsConfig } = props;\n  const [selectedTab, setSelectedTab] = useState<number>(0);\n  const catalogApi: CatalogApi = useApi(catalogApiRef);\n\n  const {\n    value: entities,\n    loading,\n    error,\n  } = useAsync(async () => {\n    const response = await catalogApi.getEntities({\n      filter: {\n        'metadata.annotations.backstage.io/techdocs-ref': CATALOG_FILTER_EXISTS,\n      },\n      fields: [\n        'apiVersion',\n        'kind',\n        'metadata',\n        'relations',\n        'spec.owner',\n        'spec.type',\n      ],\n    });\n    return response.items.filter((entity: Entity) => {\n      return !!entity.metadata.annotations?.['backstage.io/techdocs-ref'];\n    });\n  });\n\n  const currentTabConfig = tabsConfig[selectedTab];\n\n  if (loading) {\n    return (\n      <TechDocsPageWrapper>\n        <Content>\n          <Progress />\n        </Content>\n      </TechDocsPageWrapper>\n    );\n  }\n\n  if (error) {\n    return (\n      <TechDocsPageWrapper>\n        <Content>\n          <WarningPanel\n            severity=\"error\"\n            title=\"Could not load available documentation.\"\n          >\n            <CodeSnippet language=\"text\" text={error.toString()} />\n          </WarningPanel>\n        </Content>\n      </TechDocsPageWrapper>\n    );\n  }\n\n  return (\n    <TechDocsPageWrapper>\n      <HeaderTabs\n        selectedIndex={selectedTab}\n        onChange={index => setSelectedTab(index)}\n        tabs={tabsConfig.map(({ label }, index) => ({\n          id: index.toString(),\n          label,\n        }))}\n      />\n      <Content data-testid=\"techdocs-content\">\n        {currentTabConfig.panels.map((config, index) => (\n          <CustomPanel\n            key={index}\n            config={config}\n            entities={!!entities ? entities : []}\n            index={index}\n          />\n        ))}\n      </Content>\n    </TechDocsPageWrapper>\n  );\n};\n"],"sourceRoot":""}